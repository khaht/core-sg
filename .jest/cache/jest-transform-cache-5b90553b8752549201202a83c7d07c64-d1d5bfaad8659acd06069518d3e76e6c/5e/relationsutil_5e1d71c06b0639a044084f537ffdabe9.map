{"version":3,"sources":["relations.util.js"],"names":["prop","require","MANY_RELATIONS","RF_RELATIONS","getRelationalFields","modelDef","associations","filter","a","includes","nature","map","module","exports","constants"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAWC,OAAO,CAAC,WAAD,CAAxB;;AAEA,MAAMC,cAAc,GAAG,CAAC,WAAD,EAAc,YAAd,EAA4B,SAA5B,CAAvB;AACA,MAAMC,YAAY,GAAG,CAAC,WAAD,EAAc,YAAd,EAA4B,SAA5B,EAAuC,WAAvC,EAAoD,QAApD,EAA8D,UAA9D,CAArB;;AAEA,MAAMC,mBAAmB,GAAIC,QAAD,IAAcA,QAAQ,CAACC,YAAT,CAAsBC,MAAtB,CAA8BC,CAAD,IAAOL,YAAY,CAACM,QAAb,CAAsBD,CAAC,CAACE,MAAxB,CAApC,EAAqEC,GAArE,CAAyEX,IAAI,CAAC,OAAD,CAA7E,CAA1C;;AAEAY,MAAM,CAACC,OAAP,GAAiB;AACfT,EAAAA,mBADe;AAEfU,EAAAA,SAAS,EAAE;AACTZ,IAAAA;AADS;AAFI,CAAjB","sourcesContent":["const { prop } = require('lodash/fp');\n\nconst MANY_RELATIONS = ['oneToMany', 'manyToMany', 'manyWay'];\nconst RF_RELATIONS = ['oneToMany', 'manyToMany', 'manyWay', 'manyToOne', 'oneWay', 'oneToOne'];\n\nconst getRelationalFields = (modelDef) => modelDef.associations.filter((a) => RF_RELATIONS.includes(a.nature)).map(prop('alias'));\n\nmodule.exports = {\n  getRelationalFields,\n  constants: {\n    MANY_RELATIONS,\n  },\n};\n"]}