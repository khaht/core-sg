{"version":3,"sources":["connector-registry.test.js"],"names":["logger","require","_","createConnectorRegistry","describe","config","database","connections","default","connector","settings","client","serviceAccount","process","env","SERVICE_ACCOUNT_PATH","options","useNullAsDefault","global","sgApp","log","get","path","defaultValue","set","val","has","defaultConnection","connectors","load","test","expect","Object","keys","toEqual","initialize","resp","getAll","length","toBe","fn","jest","find","_default","getByConnection","toThrow"],"mappings":"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","sourcesContent":["const logger = require('utils/logger.util');\nconst _ = require('lodash');\nconst createConnectorRegistry = require('../connector-registry');\n\ndescribe('Create connector registry', () => {\n  const config = {\n    database: {\n      connections: {\n        default: {\n          connector: 'firebase',\n          settings: {\n            client: 'cloudfirestore',\n            serviceAccount:\n              process.env.SERVICE_ACCOUNT_PATH ||\n              '../firebase/serviceaccount.json',\n          },\n          options: {\n            useNullAsDefault: true,\n          },\n        },\n      },\n    },\n  };\n\n  global.sgApp = {\n    log: logger,\n    config: {\n      ...config,\n\n      get(path, defaultValue) {\n        return _.get(config, path, defaultValue);\n      },\n\n      set(path, val) {\n        _.set(config, path, val);\n\n        return this;\n      },\n\n      has(path) {\n        return _.has(config, path);\n      },\n    },\n  };\n  const connections = {\n    default: {\n      connector: 'firebase',\n      settings: {\n        client: 'cloudfirestore',\n        serviceAccount:\n          process.env.SERVICE_ACCOUNT_PATH || '../firebase/serviceaccount.json',\n      },\n      options: {\n        useNullAsDefault: true,\n      },\n    },\n  };\n  const defaultConnection = 'default';\n  const connectors = createConnectorRegistry({\n    defaultConnection,\n    connections,\n  });\n  connectors.load();\n\n  test('Should create connector registry', () => {\n    expect(Object.keys(connectors)).toEqual([\n      'load',\n      'initialize',\n      'getAll',\n      'get',\n      'set',\n      'default',\n      'getByConnection',\n    ]);\n  });\n\n  test('Should ignore if connector modules loaded', () => {\n    connectors.load();\n  });\n\n  test('Should initialize connectors', async () => {\n    await connectors.initialize();\n  });\n\n  test('Should get all connectors', () => {\n    const resp = connectors.getAll();\n    expect(resp.length).toBe(1);\n  });\n\n  test('Should get connector by key', () => {\n    const resp = connectors.get('firebase');\n    expect(Object.keys(resp)).toEqual([\n      'db',\n      'initialize',\n      'parseSnapshots',\n      'find',\n      'findOne',\n      'create',\n      'update',\n      'delete',\n    ]);\n  });\n\n  test('Should set connector by key', () => {\n    const fn = jest.fn();\n    connectors.set('dynamodb', { find: fn });\n    const resp = connectors.get('dynamodb');\n    expect(resp).toEqual({ find: fn });\n  });\n\n  test('Should get default connector', () => {\n    const _default = connectors.default;\n    expect(Object.keys(_default)).toEqual([\n      'db',\n      'initialize',\n      'parseSnapshots',\n      'find',\n      'findOne',\n      'create',\n      'update',\n      'delete',\n    ]);\n  });\n\n  test('Should get by connection', () => {\n    const resp = connectors.getByConnection('default');\n    expect(Object.keys(resp)).toEqual([\n      'db',\n      'initialize',\n      'parseSnapshots',\n      'find',\n      'findOne',\n      'create',\n      'update',\n      'delete',\n    ]);\n  });\n\n  test('Should throw error when get by connection not exists', () => {\n    expect(() => connectors.getByConnection('connection')).toThrow();\n  });\n});\n"]}