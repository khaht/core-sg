{"version":3,"sources":["database-manager.js"],"names":["createConnectorRegistry","require","DatabaseManager","constructor","sgApp","initialized","connectors","connections","config","get","defaultConnection","queries","Map","models","initialize","Error","load","connector","default","query","entity","normalizedName","toLowerCase","model","db","collection","find","cName","findOne","id","create","data","update","delete","createDatabaseManager","module","exports"],"mappings":"AAAA;AAEA,MAAMA,uBAAuB,GAAGC,OAAO,CAAC,sBAAD,CAAvC;;AAEA,MAAMC,eAAN,CAAsB;AACpBC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,SAAKA,KAAL,GAAaA,KAAb;AAEA,SAAKC,WAAL,GAAmB,KAAnB;AAEA,SAAKC,UAAL,GAAkBN,uBAAuB,CAAC;AACxCO,MAAAA,WAAW,EAAEH,KAAK,CAACI,MAAN,CAAaC,GAAb,CAAiB,sBAAjB,CAD2B;AAExCC,MAAAA,iBAAiB,EAAEN,KAAK,CAACI,MAAN,CAAaC,GAAb,CAAiB,4BAAjB;AAFqB,KAAD,CAAzC;AAKA,SAAKE,OAAL,GAAe,IAAIC,GAAJ,EAAf;AACA,SAAKC,MAAL,GAAc,IAAID,GAAJ,EAAd;AACD;;AAEe,QAAVE,UAAU,GAAG;AACjB,QAAI,KAAKT,WAAL,KAAqB,IAAzB,EAA+B;AAC7B,YAAM,IAAIU,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,SAAKV,WAAL,GAAmB,IAAnB;AAEA,SAAKC,UAAL,CAAgBU,IAAhB,GAPiB,CASjB;;AAEA,UAAM,KAAKV,UAAL,CAAgBQ,UAAhB,EAAN;AAEA,SAAKG,SAAL,GAAiB,KAAKX,UAAL,CAAgBY,OAAjC,CAbiB,CAejB;AAEA;AAEA;AACA;AACA;AAEA;;AAEA,WAAO,IAAP;AACD;;AAEDC,EAAAA,KAAK,CAACC,MAAD,EAAS;AACZ,QAAI,CAACA,MAAL,EAAa;AACX,YAAM,IAAIL,KAAJ,CAAU,6BAAV,CAAN;AACD;;AAED,UAAMM,cAAc,GAAGD,MAAM,CAACE,WAAP,EAAvB,CALY,CAOZ;;AACA,UAAMC,KAAK,GAAG,KAAKN,SAAL,CAAeO,EAAf,CAAkBC,UAAlB,CAA6BJ,cAA7B,CAAd;;AAEA,QAAI,CAACE,KAAL,EAAY;AACV,YAAM,IAAIR,KAAJ,CAAW,aAAYK,MAAO,kBAA9B,CAAN;AACD;;AAED,WAAOG,KAAP;AACD;;AAEDG,EAAAA,IAAI,CAACC,KAAD,EAAQR,KAAR,EAAe;AACjB,WAAO,KAAKF,SAAL,CAAeS,IAAf,CAAoBC,KAApB,EAA2BR,KAA3B,CAAP;AACD;;AAEDS,EAAAA,OAAO,CAACD,KAAD,EAAQE,EAAR,EAAY;AACjB,WAAO,KAAKZ,SAAL,CAAeW,OAAf,CAAuBD,KAAvB,EAA8BE,EAA9B,CAAP;AACD;;AAEDC,EAAAA,MAAM,CAACH,KAAD,EAAQI,IAAR,EAAcF,EAAd,EAAkB;AACtB,WAAO,KAAKZ,SAAL,CAAea,MAAf,CAAsBH,KAAtB,EAA6BI,IAA7B,EAAmCF,EAAnC,CAAP;AACD;;AAEDG,EAAAA,MAAM,CAACL,KAAD,EAAQI,IAAR,EAAcF,EAAd,EAAkB;AACtB,WAAO,KAAKZ,SAAL,CAAee,MAAf,CAAsBL,KAAtB,EAA6BI,IAA7B,EAAmCF,EAAnC,CAAP;AACD;;AAEDI,EAAAA,MAAM,CAACN,KAAD,EAAQE,EAAR,EAAY;AAChB,WAAO,KAAKZ,SAAL,CAAegB,MAAf,CAAsBN,KAAtB,EAA6BE,EAA7B,CAAP;AACD;;AA9EmB;;AAiFtB,SAASK,qBAAT,CAA+B9B,KAA/B,EAAsC;AACpC,SAAO,IAAIF,eAAJ,CAAoBE,KAApB,CAAP;AACD;;AAED+B,MAAM,CAACC,OAAP,GAAiB;AACfF,EAAAA;AADe,CAAjB","sourcesContent":["// TODO: This is only for temporary testing\n\nconst createConnectorRegistry = require('./connector-registry');\n\nclass DatabaseManager {\n  constructor(sgApp) {\n    this.sgApp = sgApp;\n\n    this.initialized = false;\n\n    this.connectors = createConnectorRegistry({\n      connections: sgApp.config.get('database.connections'),\n      defaultConnection: sgApp.config.get('database.defaultConnection'),\n    });\n\n    this.queries = new Map();\n    this.models = new Map();\n  }\n\n  async initialize() {\n    if (this.initialized === true) {\n      throw new Error('Database manager already initialized');\n    }\n\n    this.initialized = true;\n\n    this.connectors.load();\n\n    // validateModelSchemas({ sgApp: this.sgApp, manager: this });\n\n    await this.connectors.initialize();\n\n    this.connector = this.connectors.default;\n\n    // this.initializeModelsMap();\n\n    // const serviceAccount = sgApp.config.get('database.connections');\n\n    // admin.initializeApp({\n    //   credential: admin.credential.cert(serviceAccount.default.settings.serviceAccount),\n    // });\n\n    // this.db = admin.firestore();\n\n    return this;\n  }\n\n  query(entity) {\n    if (!entity) {\n      throw new Error('argument entity is required');\n    }\n\n    const normalizedName = entity.toLowerCase();\n\n    // get by uid or name / plugin\n    const model = this.connector.db.collection(normalizedName);\n\n    if (!model) {\n      throw new Error(`The model ${entity} can't be found.`);\n    }\n\n    return model;\n  }\n\n  find(cName, query) {\n    return this.connector.find(cName, query);\n  }\n\n  findOne(cName, id) {\n    return this.connector.findOne(cName, id);\n  }\n\n  create(cName, data, id) {\n    return this.connector.create(cName, data, id);\n  }\n\n  update(cName, data, id) {\n    return this.connector.update(cName, data, id);\n  }\n\n  delete(cName, id) {\n    return this.connector.delete(cName, id);\n  }\n}\n\nfunction createDatabaseManager(sgApp) {\n  return new DatabaseManager(sgApp);\n}\n\nmodule.exports = {\n  createDatabaseManager,\n};\n"]}