a6e4707bd1a39c67f0651fb80b636d37
// TODO: This is only for temporary testing
const createConnectorRegistry = require('./connector-registry');

class DatabaseManager {
  constructor(sgApp) {
    this.sgApp = sgApp;
    this.initialized = false;
    this.connectors = createConnectorRegistry({
      connections: sgApp.config.get('database.connections'),
      defaultConnection: sgApp.config.get('database.defaultConnection')
    });
    this.queries = new Map();
    this.models = new Map();
  }

  async initialize() {
    if (this.initialized === true) {
      throw new Error('Database manager already initialized');
    }

    this.initialized = true;
    this.connectors.load(); // validateModelSchemas({ sgApp: this.sgApp, manager: this });

    await this.connectors.initialize();
    this.connector = this.connectors.default; // this.initializeModelsMap();
    // const serviceAccount = sgApp.config.get('database.connections');
    // admin.initializeApp({
    //   credential: admin.credential.cert(serviceAccount.default.settings.serviceAccount),
    // });
    // this.db = admin.firestore();

    return this;
  }

  query(entity) {
    if (!entity) {
      throw new Error('argument entity is required');
    }

    const normalizedName = entity.toLowerCase(); // get by uid or name / plugin

    const model = this.connector.db.collection(normalizedName);

    if (!model) {
      throw new Error(`The model ${entity} can't be found.`);
    }

    return model;
  }

  find(cName, query) {
    return this.connector.find(cName, query);
  }

  findOne(cName, id) {
    return this.connector.findOne(cName, id);
  }

  create(cName, data, id) {
    return this.connector.create(cName, data, id);
  }

  update(cName, data, id) {
    return this.connector.update(cName, data, id);
  }

  delete(cName, id) {
    return this.connector.delete(cName, id);
  }

}

function createDatabaseManager(sgApp) {
  return new DatabaseManager(sgApp);
}

module.exports = {
  createDatabaseManager
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRhdGFiYXNlLW1hbmFnZXIuanMiXSwibmFtZXMiOlsiY3JlYXRlQ29ubmVjdG9yUmVnaXN0cnkiLCJyZXF1aXJlIiwiRGF0YWJhc2VNYW5hZ2VyIiwiY29uc3RydWN0b3IiLCJzZ0FwcCIsImluaXRpYWxpemVkIiwiY29ubmVjdG9ycyIsImNvbm5lY3Rpb25zIiwiY29uZmlnIiwiZ2V0IiwiZGVmYXVsdENvbm5lY3Rpb24iLCJxdWVyaWVzIiwiTWFwIiwibW9kZWxzIiwiaW5pdGlhbGl6ZSIsIkVycm9yIiwibG9hZCIsImNvbm5lY3RvciIsImRlZmF1bHQiLCJxdWVyeSIsImVudGl0eSIsIm5vcm1hbGl6ZWROYW1lIiwidG9Mb3dlckNhc2UiLCJtb2RlbCIsImRiIiwiY29sbGVjdGlvbiIsImZpbmQiLCJjTmFtZSIsImZpbmRPbmUiLCJpZCIsImNyZWF0ZSIsImRhdGEiLCJ1cGRhdGUiLCJkZWxldGUiLCJjcmVhdGVEYXRhYmFzZU1hbmFnZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLHVCQUF1QixHQUFHQyxPQUFPLENBQUMsc0JBQUQsQ0FBdkM7O0FBRUEsTUFBTUMsZUFBTixDQUFzQjtBQUNwQkMsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQVE7QUFDakIsU0FBS0EsS0FBTCxHQUFhQSxLQUFiO0FBRUEsU0FBS0MsV0FBTCxHQUFtQixLQUFuQjtBQUVBLFNBQUtDLFVBQUwsR0FBa0JOLHVCQUF1QixDQUFDO0FBQ3hDTyxNQUFBQSxXQUFXLEVBQUVILEtBQUssQ0FBQ0ksTUFBTixDQUFhQyxHQUFiLENBQWlCLHNCQUFqQixDQUQyQjtBQUV4Q0MsTUFBQUEsaUJBQWlCLEVBQUVOLEtBQUssQ0FBQ0ksTUFBTixDQUFhQyxHQUFiLENBQWlCLDRCQUFqQjtBQUZxQixLQUFELENBQXpDO0FBS0EsU0FBS0UsT0FBTCxHQUFlLElBQUlDLEdBQUosRUFBZjtBQUNBLFNBQUtDLE1BQUwsR0FBYyxJQUFJRCxHQUFKLEVBQWQ7QUFDRDs7QUFFZSxRQUFWRSxVQUFVLEdBQUc7QUFDakIsUUFBSSxLQUFLVCxXQUFMLEtBQXFCLElBQXpCLEVBQStCO0FBQzdCLFlBQU0sSUFBSVUsS0FBSixDQUFVLHNDQUFWLENBQU47QUFDRDs7QUFFRCxTQUFLVixXQUFMLEdBQW1CLElBQW5CO0FBRUEsU0FBS0MsVUFBTCxDQUFnQlUsSUFBaEIsR0FQaUIsQ0FTakI7O0FBRUEsVUFBTSxLQUFLVixVQUFMLENBQWdCUSxVQUFoQixFQUFOO0FBRUEsU0FBS0csU0FBTCxHQUFpQixLQUFLWCxVQUFMLENBQWdCWSxPQUFqQyxDQWJpQixDQWVqQjtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7O0FBRUEsV0FBTyxJQUFQO0FBQ0Q7O0FBRURDLEVBQUFBLEtBQUssQ0FBQ0MsTUFBRCxFQUFTO0FBQ1osUUFBSSxDQUFDQSxNQUFMLEVBQWE7QUFDWCxZQUFNLElBQUlMLEtBQUosQ0FBVSw2QkFBVixDQUFOO0FBQ0Q7O0FBRUQsVUFBTU0sY0FBYyxHQUFHRCxNQUFNLENBQUNFLFdBQVAsRUFBdkIsQ0FMWSxDQU9aOztBQUNBLFVBQU1DLEtBQUssR0FBRyxLQUFLTixTQUFMLENBQWVPLEVBQWYsQ0FBa0JDLFVBQWxCLENBQTZCSixjQUE3QixDQUFkOztBQUVBLFFBQUksQ0FBQ0UsS0FBTCxFQUFZO0FBQ1YsWUFBTSxJQUFJUixLQUFKLENBQVcsYUFBWUssTUFBTyxrQkFBOUIsQ0FBTjtBQUNEOztBQUVELFdBQU9HLEtBQVA7QUFDRDs7QUFFREcsRUFBQUEsSUFBSSxDQUFDQyxLQUFELEVBQVFSLEtBQVIsRUFBZTtBQUNqQixXQUFPLEtBQUtGLFNBQUwsQ0FBZVMsSUFBZixDQUFvQkMsS0FBcEIsRUFBMkJSLEtBQTNCLENBQVA7QUFDRDs7QUFFRFMsRUFBQUEsT0FBTyxDQUFDRCxLQUFELEVBQVFFLEVBQVIsRUFBWTtBQUNqQixXQUFPLEtBQUtaLFNBQUwsQ0FBZVcsT0FBZixDQUF1QkQsS0FBdkIsRUFBOEJFLEVBQTlCLENBQVA7QUFDRDs7QUFFREMsRUFBQUEsTUFBTSxDQUFDSCxLQUFELEVBQVFJLElBQVIsRUFBY0YsRUFBZCxFQUFrQjtBQUN0QixXQUFPLEtBQUtaLFNBQUwsQ0FBZWEsTUFBZixDQUFzQkgsS0FBdEIsRUFBNkJJLElBQTdCLEVBQW1DRixFQUFuQyxDQUFQO0FBQ0Q7O0FBRURHLEVBQUFBLE1BQU0sQ0FBQ0wsS0FBRCxFQUFRSSxJQUFSLEVBQWNGLEVBQWQsRUFBa0I7QUFDdEIsV0FBTyxLQUFLWixTQUFMLENBQWVlLE1BQWYsQ0FBc0JMLEtBQXRCLEVBQTZCSSxJQUE3QixFQUFtQ0YsRUFBbkMsQ0FBUDtBQUNEOztBQUVESSxFQUFBQSxNQUFNLENBQUNOLEtBQUQsRUFBUUUsRUFBUixFQUFZO0FBQ2hCLFdBQU8sS0FBS1osU0FBTCxDQUFlZ0IsTUFBZixDQUFzQk4sS0FBdEIsRUFBNkJFLEVBQTdCLENBQVA7QUFDRDs7QUE5RW1COztBQWlGdEIsU0FBU0sscUJBQVQsQ0FBK0I5QixLQUEvQixFQUFzQztBQUNwQyxTQUFPLElBQUlGLGVBQUosQ0FBb0JFLEtBQXBCLENBQVA7QUFDRDs7QUFFRCtCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmRixFQUFBQTtBQURlLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVE9ETzogVGhpcyBpcyBvbmx5IGZvciB0ZW1wb3JhcnkgdGVzdGluZ1xuXG5jb25zdCBjcmVhdGVDb25uZWN0b3JSZWdpc3RyeSA9IHJlcXVpcmUoJy4vY29ubmVjdG9yLXJlZ2lzdHJ5Jyk7XG5cbmNsYXNzIERhdGFiYXNlTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKHNnQXBwKSB7XG4gICAgdGhpcy5zZ0FwcCA9IHNnQXBwO1xuXG4gICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5jb25uZWN0b3JzID0gY3JlYXRlQ29ubmVjdG9yUmVnaXN0cnkoe1xuICAgICAgY29ubmVjdGlvbnM6IHNnQXBwLmNvbmZpZy5nZXQoJ2RhdGFiYXNlLmNvbm5lY3Rpb25zJyksXG4gICAgICBkZWZhdWx0Q29ubmVjdGlvbjogc2dBcHAuY29uZmlnLmdldCgnZGF0YWJhc2UuZGVmYXVsdENvbm5lY3Rpb24nKSxcbiAgICB9KTtcblxuICAgIHRoaXMucXVlcmllcyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLm1vZGVscyA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIGFzeW5jIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQgPT09IHRydWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGF0YWJhc2UgbWFuYWdlciBhbHJlYWR5IGluaXRpYWxpemVkJyk7XG4gICAgfVxuXG4gICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICB0aGlzLmNvbm5lY3RvcnMubG9hZCgpO1xuXG4gICAgLy8gdmFsaWRhdGVNb2RlbFNjaGVtYXMoeyBzZ0FwcDogdGhpcy5zZ0FwcCwgbWFuYWdlcjogdGhpcyB9KTtcblxuICAgIGF3YWl0IHRoaXMuY29ubmVjdG9ycy5pbml0aWFsaXplKCk7XG5cbiAgICB0aGlzLmNvbm5lY3RvciA9IHRoaXMuY29ubmVjdG9ycy5kZWZhdWx0O1xuXG4gICAgLy8gdGhpcy5pbml0aWFsaXplTW9kZWxzTWFwKCk7XG5cbiAgICAvLyBjb25zdCBzZXJ2aWNlQWNjb3VudCA9IHNnQXBwLmNvbmZpZy5nZXQoJ2RhdGFiYXNlLmNvbm5lY3Rpb25zJyk7XG5cbiAgICAvLyBhZG1pbi5pbml0aWFsaXplQXBwKHtcbiAgICAvLyAgIGNyZWRlbnRpYWw6IGFkbWluLmNyZWRlbnRpYWwuY2VydChzZXJ2aWNlQWNjb3VudC5kZWZhdWx0LnNldHRpbmdzLnNlcnZpY2VBY2NvdW50KSxcbiAgICAvLyB9KTtcblxuICAgIC8vIHRoaXMuZGIgPSBhZG1pbi5maXJlc3RvcmUoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcXVlcnkoZW50aXR5KSB7XG4gICAgaWYgKCFlbnRpdHkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYXJndW1lbnQgZW50aXR5IGlzIHJlcXVpcmVkJyk7XG4gICAgfVxuXG4gICAgY29uc3Qgbm9ybWFsaXplZE5hbWUgPSBlbnRpdHkudG9Mb3dlckNhc2UoKTtcblxuICAgIC8vIGdldCBieSB1aWQgb3IgbmFtZSAvIHBsdWdpblxuICAgIGNvbnN0IG1vZGVsID0gdGhpcy5jb25uZWN0b3IuZGIuY29sbGVjdGlvbihub3JtYWxpemVkTmFtZSk7XG5cbiAgICBpZiAoIW1vZGVsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBtb2RlbCAke2VudGl0eX0gY2FuJ3QgYmUgZm91bmQuYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vZGVsO1xuICB9XG5cbiAgZmluZChjTmFtZSwgcXVlcnkpIHtcbiAgICByZXR1cm4gdGhpcy5jb25uZWN0b3IuZmluZChjTmFtZSwgcXVlcnkpO1xuICB9XG5cbiAgZmluZE9uZShjTmFtZSwgaWQpIHtcbiAgICByZXR1cm4gdGhpcy5jb25uZWN0b3IuZmluZE9uZShjTmFtZSwgaWQpO1xuICB9XG5cbiAgY3JlYXRlKGNOYW1lLCBkYXRhLCBpZCkge1xuICAgIHJldHVybiB0aGlzLmNvbm5lY3Rvci5jcmVhdGUoY05hbWUsIGRhdGEsIGlkKTtcbiAgfVxuXG4gIHVwZGF0ZShjTmFtZSwgZGF0YSwgaWQpIHtcbiAgICByZXR1cm4gdGhpcy5jb25uZWN0b3IudXBkYXRlKGNOYW1lLCBkYXRhLCBpZCk7XG4gIH1cblxuICBkZWxldGUoY05hbWUsIGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuY29ubmVjdG9yLmRlbGV0ZShjTmFtZSwgaWQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURhdGFiYXNlTWFuYWdlcihzZ0FwcCkge1xuICByZXR1cm4gbmV3IERhdGFiYXNlTWFuYWdlcihzZ0FwcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGVEYXRhYmFzZU1hbmFnZXIsXG59O1xuIl19