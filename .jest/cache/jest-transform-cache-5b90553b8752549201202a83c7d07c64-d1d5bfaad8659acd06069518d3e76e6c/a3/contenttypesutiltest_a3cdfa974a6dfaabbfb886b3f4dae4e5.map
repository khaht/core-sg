{"version":3,"sources":["content-types.util.test.js"],"names":["isScalarAttribute","isMediaAttribute","getPrivateAttributes","getTimestampsAttributes","isPrivateAttribute","getNonWritableAttributes","getWritableAttributes","getNonVisibleAttributes","getVisibleAttributes","hasDraftAndPublish","isDraft","isSingleType","isCollectionType","isKind","require","_","describe","test","attribute","type","expect","toBe","collection","jest","fn","model","plugin","toBeTruthy","toBeFalsy","attributes","password","private","options","privateAttributes","config","api","responses","global","sgApp","get","path","defaultValue","set","val","has","resp","toEqual","timestamps","undefined","writable","test1","primary","draftAndPublish","published_at","kind"],"mappings":"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","sourcesContent":["const {\n  isScalarAttribute,\n  isMediaAttribute,\n  getPrivateAttributes,\n  getTimestampsAttributes,\n  isPrivateAttribute,\n  getNonWritableAttributes,\n  getWritableAttributes,\n  getNonVisibleAttributes,\n  getVisibleAttributes,\n  hasDraftAndPublish,\n  isDraft,\n  isSingleType,\n  isCollectionType,\n  isKind,\n} = require('../content-types.util');\nconst _ = require('lodash');\n\ndescribe('Content types util', () => {\n  test('Should is scalar attribute', () => {\n    const attribute = {\n      type: 'test',\n    };\n\n    expect(isScalarAttribute(attribute)).toBe(true);\n  });\n\n  test('Should is not scalar attribute', () => {\n    const attribute = {\n      collection: jest.fn(),\n      model: jest.fn(),\n      type: 'component',\n    };\n    expect(isScalarAttribute(attribute)).toBe(false);\n  });\n\n  describe('Media attribute', () => {\n    test('Should is media attribute when collection is file', () => {\n      const attribute = {\n        collection: 'file',\n        plugin: 'upload',\n      };\n      expect(isMediaAttribute(attribute)).toBeTruthy();\n    });\n\n    test('Should is media attribute when model is file', () => {\n      const attribute = {\n        model: 'file',\n        plugin: 'upload',\n      };\n      expect(isMediaAttribute(attribute)).toBeTruthy();\n    });\n\n    test('Should is not media attribute', () => {\n      const attribute = {\n        model: 'text',\n        plugin: 'upload',\n      };\n      expect(isMediaAttribute(attribute)).toBeFalsy();\n    });\n  });\n\n  test('Should get private attributes', () => {\n    const model = {\n      attributes: { password: { private: true } },\n      options: { privateAttributes: [] },\n    };\n    const config = {\n      api: {\n        responses: {\n          privateAttributes: [],\n        },\n      },\n    };\n\n    global.sgApp = {\n      config: {\n        ...config,\n\n        get(path, defaultValue) {\n          return _.get(config, path, defaultValue);\n        },\n\n        set(path, val) {\n          _.set(config, path, val);\n\n          return this;\n        },\n\n        has(path) {\n          return _.has(config, path);\n        },\n      },\n    };\n    const resp = getPrivateAttributes(model);\n    expect(resp).toEqual(['password']);\n  });\n\n  test('Should get timestamps attributes', () => {\n    expect(getTimestampsAttributes()).toEqual({});\n    expect(\n      getTimestampsAttributes({\n        options: {\n          timestamps: {},\n        },\n      })\n    ).toEqual({});\n    expect(\n      getTimestampsAttributes({\n        options: {\n          timestamps: ['test'],\n        },\n      })\n    ).toEqual({ test: { type: 'timestamp' } });\n  });\n\n  describe('Is Private Attribute', () => {\n    test('Should is private attribute', () => {\n      expect(\n        isPrivateAttribute(\n          {\n            privateAttributes: ['att'],\n          },\n          'att'\n        )\n      ).toEqual(true);\n    });\n\n    test('Should is not private attribute when model is empty', () => {\n      expect(isPrivateAttribute()).toBeFalsy();\n    });\n  });\n\n  test('Should get non writable attributes', () => {\n    expect(getNonWritableAttributes()).toEqual([\n      'id',\n      'created_by',\n      'updated_by',\n      undefined,\n    ]);\n    expect(\n      getNonWritableAttributes({\n        attributes: {\n          test: {\n            writable: false,\n          },\n          test1: {\n            writable: true,\n          },\n        },\n      })\n    ).toEqual(['id', 'created_by', 'updated_by', undefined, 'test']);\n  });\n\n  test('Should get writable attributes', () => {\n    expect(\n      getWritableAttributes({\n        attributes: {\n          test: {\n            writable: false,\n          },\n        },\n      })\n    ).toEqual([]);\n  });\n\n  describe('Non visible attributes', () => {\n    test('Should get non visible attributes', () => {\n      expect(\n        getNonVisibleAttributes({\n          attributes: { test: { writable: false } },\n          primary: 'abc',\n        })\n      ).toEqual([undefined, 'id', 'created_by', 'updated_by', 'published_at']);\n    });\n  });\n\n  describe('Visible attributes', () => {\n    test('Should get visible attributes', () => {\n      expect(\n        getVisibleAttributes({\n          attributes: { test: { writable: false } },\n          primary: 'abc',\n        })\n      ).toEqual(['test']);\n    });\n  });\n\n  describe('Draft and publish', () => {\n    test('Should has draft and publish', () => {\n      expect(\n        hasDraftAndPublish({ options: { draftAndPublish: true } })\n      ).toEqual(true);\n    });\n\n    test('Should has not draft and publish', () => {\n      expect(\n        hasDraftAndPublish({ options: { draftAndPublish: false } })\n      ).toEqual(false);\n    });\n  });\n\n  describe('Draft', () => {\n    test('Should is draft', () => {\n      expect(\n        isDraft({ published_at: null }, { options: { draftAndPublish: true } })\n      ).toEqual(true);\n    });\n\n    test('Should is not draft', () => {\n      expect(\n        isDraft({ published_at: null }, { options: { draftAndPublish: false } })\n      ).toEqual(false);\n    });\n  });\n\n  describe('Single type', () => {\n    test('Should is single type', () => {\n      expect(isSingleType({ kind: 'singleType' })).toBeTruthy();\n    });\n\n    test('Should is not single type', () => {\n      expect(isSingleType({ kind: 'test' })).toBeFalsy();\n    });\n\n    test('Should is not single type with default kind', () => {\n      expect(isSingleType({})).toBeFalsy();\n    });\n  });\n\n  describe('Collection type', () => {\n    test('Should is collection type', () => {\n      expect(isCollectionType({ kind: 'collectionType' })).toBeTruthy();\n    });\n\n    test('Should is not collection type', () => {\n      expect(isCollectionType({ kind: 'test' })).toBeFalsy();\n    });\n\n    test('Should is collection type with default kind', () => {\n      expect(isCollectionType({})).toBeTruthy();\n    });\n  });\n\n  describe('Kind', () => {\n    test('Should is kind', () => {\n      expect(isKind('test')({ kind: 'test' })).toEqual(true);\n    });\n\n    test('Should is not kind', () => {\n      expect(isKind('test')({ kind: 'test1' })).toEqual(false);\n    });\n  });\n});\n"]}