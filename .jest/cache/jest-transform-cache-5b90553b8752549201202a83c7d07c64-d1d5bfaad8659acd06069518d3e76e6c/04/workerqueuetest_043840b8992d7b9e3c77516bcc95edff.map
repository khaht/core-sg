{"version":3,"sources":["worker-queue.test.js"],"names":["WorkerQueue","require","logger","describe","test","workerQueue","enqueue","expect","Object","keys","toEqual","subscribe","worker","toBe","concurrency","event","info","pop","queue","jest","fn","Error","error","execute","toHaveBeenCalledTimes"],"mappings":"AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,iBAAD,CAA3B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,mBAAD,CAAtB;;AAEAE,QAAQ,CAAC,qBAAD,EAAwB,MAAM;AACpCC,EAAAA,IAAI,CAAC,kCAAD,EAAqC,MAAM;AAC7C,UAAMC,WAAW,GAAG,IAAIL,WAAJ,EAApB;AACAK,IAAAA,WAAW,CAACC,OAAZ,CAAoB,EAApB;AAEAC,IAAAA,MAAM,CAACC,MAAM,CAACC,IAAP,CAAYJ,WAAZ,CAAD,CAAN,CAAiCK,OAAjC,CAAyC,CACvC,QADuC,EAEvC,QAFuC,EAGvC,aAHuC,EAIvC,SAJuC,EAKvC,OALuC,CAAzC;AAOD,GAXG,CAAJ;AAaAN,EAAAA,IAAI,CAAC,kBAAD,EAAqB,MAAM;AAC7B,UAAMC,WAAW,GAAG,IAAIL,WAAJ,EAApB;AACAK,IAAAA,WAAW,CAACM,SAAZ,CAAsB,QAAtB;AAEAJ,IAAAA,MAAM,CAACF,WAAW,CAACO,MAAb,CAAN,CAA2BC,IAA3B,CAAgC,QAAhC;AACD,GALG,CAAJ;AAOAT,EAAAA,IAAI,CAAC,qCAAD,EAAwC,MAAM;AAChD,UAAMC,WAAW,GAAG,IAAIL,WAAJ,CAAgB;AAAEc,MAAAA,WAAW,EAAE;AAAf,KAAhB,CAApB;AACAT,IAAAA,WAAW,CAACC,OAAZ,CAAoB,CAAC;AAAES,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,IAAI,EAAE;AAAvB,KAAD,CAApB;AACAX,IAAAA,WAAW,CAACY,GAAZ;AACAV,IAAAA,MAAM,CAACF,WAAW,CAACa,KAAb,CAAN,CAA0BR,OAA1B,CAAkC,EAAlC;AACD,GALG,CAAJ;AAOAN,EAAAA,IAAI,CAAC,qCAAD,EAAwC,YAAY;AACtD,UAAMC,WAAW,GAAG,IAAIL,WAAJ,CAAgB;AAAEc,MAAAA,WAAW,EAAE,CAAf;AAAkBZ,MAAAA;AAAlB,KAAhB,CAApB;AACAG,IAAAA,WAAW,CAACO,MAAZ,GAAqBO,IAAI,CAACC,EAAL,CAAQ,MAAM;AACjC,YAAM,IAAIC,KAAJ,CAAU,OAAV,CAAN;AACD,KAFoB,CAArB;AAGAhB,IAAAA,WAAW,CAACH,MAAZ,CAAmBoB,KAAnB,GAA2BH,IAAI,CAACC,EAAL,CAASE,KAAD,IAAWA,KAAnB,CAA3B;AACA,UAAMjB,WAAW,CAACkB,OAAZ,EAAN;AACAhB,IAAAA,MAAM,CAACF,WAAW,CAACO,MAAb,CAAN,CAA2BY,qBAA3B,CAAiD,CAAjD;AACAjB,IAAAA,MAAM,CAACF,WAAW,CAACH,MAAZ,CAAmBoB,KAApB,CAAN,CAAiCE,qBAAjC,CAAuD,CAAvD;AACD,GATG,CAAJ;AAUD,CAtCO,CAAR","sourcesContent":["const WorkerQueue = require('../worker-queue');\nconst logger = require('utils/logger.util');\n\ndescribe('Create worker queue', () => {\n  test('Should return constructor object', () => {\n    const workerQueue = new WorkerQueue();\n    workerQueue.enqueue([]);\n\n    expect(Object.keys(workerQueue)).toEqual([\n      'logger',\n      'worker',\n      'concurrency',\n      'running',\n      'queue',\n    ]);\n  });\n\n  test('Should subscribe', () => {\n    const workerQueue = new WorkerQueue();\n    workerQueue.subscribe('worker');\n\n    expect(workerQueue.worker).toBe('worker');\n  });\n\n  test('Should pop worker queue and execute', () => {\n    const workerQueue = new WorkerQueue({ concurrency: 0 });\n    workerQueue.enqueue([{ event: 'test', info: 'info' }]);\n    workerQueue.pop();\n    expect(workerQueue.queue).toEqual([]);\n  });\n\n  test('Should log error after call execute', async () => {\n    const workerQueue = new WorkerQueue({ concurrency: 0, logger });\n    workerQueue.worker = jest.fn(() => {\n      throw new Error('error');\n    });\n    workerQueue.logger.error = jest.fn((error) => error);\n    await workerQueue.execute();\n    expect(workerQueue.worker).toHaveBeenCalledTimes(1);\n    expect(workerQueue.logger.error).toHaveBeenCalledTimes(1);\n  });\n});\n"]}