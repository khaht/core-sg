ac336f32bb820ff026892ae002cdcdc3
const WorkerQueue = require('../worker-queue');

const logger = require('utils/logger.util');

describe('Create worker queue', () => {
  test('Should return constructor object', () => {
    const workerQueue = new WorkerQueue();
    workerQueue.enqueue([]);
    expect(Object.keys(workerQueue)).toEqual(['logger', 'worker', 'concurrency', 'running', 'queue']);
  });
  test('Should subscribe', () => {
    const workerQueue = new WorkerQueue();
    workerQueue.subscribe('worker');
    expect(workerQueue.worker).toBe('worker');
  });
  test('Should pop worker queue and execute', () => {
    const workerQueue = new WorkerQueue({
      concurrency: 0
    });
    workerQueue.enqueue([{
      event: 'test',
      info: 'info'
    }]);
    workerQueue.pop();
    expect(workerQueue.queue).toEqual([]);
  });
  test('Should log error after call execute', async () => {
    const workerQueue = new WorkerQueue({
      concurrency: 0,
      logger
    });
    workerQueue.worker = jest.fn(() => {
      throw new Error('error');
    });
    workerQueue.logger.error = jest.fn(error => error);
    await workerQueue.execute();
    expect(workerQueue.worker).toHaveBeenCalledTimes(1);
    expect(workerQueue.logger.error).toHaveBeenCalledTimes(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndvcmtlci1xdWV1ZS50ZXN0LmpzIl0sIm5hbWVzIjpbIldvcmtlclF1ZXVlIiwicmVxdWlyZSIsImxvZ2dlciIsImRlc2NyaWJlIiwidGVzdCIsIndvcmtlclF1ZXVlIiwiZW5xdWV1ZSIsImV4cGVjdCIsIk9iamVjdCIsImtleXMiLCJ0b0VxdWFsIiwic3Vic2NyaWJlIiwid29ya2VyIiwidG9CZSIsImNvbmN1cnJlbmN5IiwiZXZlbnQiLCJpbmZvIiwicG9wIiwicXVldWUiLCJqZXN0IiwiZm4iLCJFcnJvciIsImVycm9yIiwiZXhlY3V0ZSIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsV0FBVyxHQUFHQyxPQUFPLENBQUMsaUJBQUQsQ0FBM0I7O0FBQ0EsTUFBTUMsTUFBTSxHQUFHRCxPQUFPLENBQUMsbUJBQUQsQ0FBdEI7O0FBRUFFLFFBQVEsQ0FBQyxxQkFBRCxFQUF3QixNQUFNO0FBQ3BDQyxFQUFBQSxJQUFJLENBQUMsa0NBQUQsRUFBcUMsTUFBTTtBQUM3QyxVQUFNQyxXQUFXLEdBQUcsSUFBSUwsV0FBSixFQUFwQjtBQUNBSyxJQUFBQSxXQUFXLENBQUNDLE9BQVosQ0FBb0IsRUFBcEI7QUFFQUMsSUFBQUEsTUFBTSxDQUFDQyxNQUFNLENBQUNDLElBQVAsQ0FBWUosV0FBWixDQUFELENBQU4sQ0FBaUNLLE9BQWpDLENBQXlDLENBQ3ZDLFFBRHVDLEVBRXZDLFFBRnVDLEVBR3ZDLGFBSHVDLEVBSXZDLFNBSnVDLEVBS3ZDLE9BTHVDLENBQXpDO0FBT0QsR0FYRyxDQUFKO0FBYUFOLEVBQUFBLElBQUksQ0FBQyxrQkFBRCxFQUFxQixNQUFNO0FBQzdCLFVBQU1DLFdBQVcsR0FBRyxJQUFJTCxXQUFKLEVBQXBCO0FBQ0FLLElBQUFBLFdBQVcsQ0FBQ00sU0FBWixDQUFzQixRQUF0QjtBQUVBSixJQUFBQSxNQUFNLENBQUNGLFdBQVcsQ0FBQ08sTUFBYixDQUFOLENBQTJCQyxJQUEzQixDQUFnQyxRQUFoQztBQUNELEdBTEcsQ0FBSjtBQU9BVCxFQUFBQSxJQUFJLENBQUMscUNBQUQsRUFBd0MsTUFBTTtBQUNoRCxVQUFNQyxXQUFXLEdBQUcsSUFBSUwsV0FBSixDQUFnQjtBQUFFYyxNQUFBQSxXQUFXLEVBQUU7QUFBZixLQUFoQixDQUFwQjtBQUNBVCxJQUFBQSxXQUFXLENBQUNDLE9BQVosQ0FBb0IsQ0FBQztBQUFFUyxNQUFBQSxLQUFLLEVBQUUsTUFBVDtBQUFpQkMsTUFBQUEsSUFBSSxFQUFFO0FBQXZCLEtBQUQsQ0FBcEI7QUFDQVgsSUFBQUEsV0FBVyxDQUFDWSxHQUFaO0FBQ0FWLElBQUFBLE1BQU0sQ0FBQ0YsV0FBVyxDQUFDYSxLQUFiLENBQU4sQ0FBMEJSLE9BQTFCLENBQWtDLEVBQWxDO0FBQ0QsR0FMRyxDQUFKO0FBT0FOLEVBQUFBLElBQUksQ0FBQyxxQ0FBRCxFQUF3QyxZQUFZO0FBQ3RELFVBQU1DLFdBQVcsR0FBRyxJQUFJTCxXQUFKLENBQWdCO0FBQUVjLE1BQUFBLFdBQVcsRUFBRSxDQUFmO0FBQWtCWixNQUFBQTtBQUFsQixLQUFoQixDQUFwQjtBQUNBRyxJQUFBQSxXQUFXLENBQUNPLE1BQVosR0FBcUJPLElBQUksQ0FBQ0MsRUFBTCxDQUFRLE1BQU07QUFDakMsWUFBTSxJQUFJQyxLQUFKLENBQVUsT0FBVixDQUFOO0FBQ0QsS0FGb0IsQ0FBckI7QUFHQWhCLElBQUFBLFdBQVcsQ0FBQ0gsTUFBWixDQUFtQm9CLEtBQW5CLEdBQTJCSCxJQUFJLENBQUNDLEVBQUwsQ0FBU0UsS0FBRCxJQUFXQSxLQUFuQixDQUEzQjtBQUNBLFVBQU1qQixXQUFXLENBQUNrQixPQUFaLEVBQU47QUFDQWhCLElBQUFBLE1BQU0sQ0FBQ0YsV0FBVyxDQUFDTyxNQUFiLENBQU4sQ0FBMkJZLHFCQUEzQixDQUFpRCxDQUFqRDtBQUNBakIsSUFBQUEsTUFBTSxDQUFDRixXQUFXLENBQUNILE1BQVosQ0FBbUJvQixLQUFwQixDQUFOLENBQWlDRSxxQkFBakMsQ0FBdUQsQ0FBdkQ7QUFDRCxHQVRHLENBQUo7QUFVRCxDQXRDTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgV29ya2VyUXVldWUgPSByZXF1aXJlKCcuLi93b3JrZXItcXVldWUnKTtcbmNvbnN0IGxvZ2dlciA9IHJlcXVpcmUoJ3V0aWxzL2xvZ2dlci51dGlsJyk7XG5cbmRlc2NyaWJlKCdDcmVhdGUgd29ya2VyIHF1ZXVlJywgKCkgPT4ge1xuICB0ZXN0KCdTaG91bGQgcmV0dXJuIGNvbnN0cnVjdG9yIG9iamVjdCcsICgpID0+IHtcbiAgICBjb25zdCB3b3JrZXJRdWV1ZSA9IG5ldyBXb3JrZXJRdWV1ZSgpO1xuICAgIHdvcmtlclF1ZXVlLmVucXVldWUoW10pO1xuXG4gICAgZXhwZWN0KE9iamVjdC5rZXlzKHdvcmtlclF1ZXVlKSkudG9FcXVhbChbXG4gICAgICAnbG9nZ2VyJyxcbiAgICAgICd3b3JrZXInLFxuICAgICAgJ2NvbmN1cnJlbmN5JyxcbiAgICAgICdydW5uaW5nJyxcbiAgICAgICdxdWV1ZScsXG4gICAgXSk7XG4gIH0pO1xuXG4gIHRlc3QoJ1Nob3VsZCBzdWJzY3JpYmUnLCAoKSA9PiB7XG4gICAgY29uc3Qgd29ya2VyUXVldWUgPSBuZXcgV29ya2VyUXVldWUoKTtcbiAgICB3b3JrZXJRdWV1ZS5zdWJzY3JpYmUoJ3dvcmtlcicpO1xuXG4gICAgZXhwZWN0KHdvcmtlclF1ZXVlLndvcmtlcikudG9CZSgnd29ya2VyJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ1Nob3VsZCBwb3Agd29ya2VyIHF1ZXVlIGFuZCBleGVjdXRlJywgKCkgPT4ge1xuICAgIGNvbnN0IHdvcmtlclF1ZXVlID0gbmV3IFdvcmtlclF1ZXVlKHsgY29uY3VycmVuY3k6IDAgfSk7XG4gICAgd29ya2VyUXVldWUuZW5xdWV1ZShbeyBldmVudDogJ3Rlc3QnLCBpbmZvOiAnaW5mbycgfV0pO1xuICAgIHdvcmtlclF1ZXVlLnBvcCgpO1xuICAgIGV4cGVjdCh3b3JrZXJRdWV1ZS5xdWV1ZSkudG9FcXVhbChbXSk7XG4gIH0pO1xuXG4gIHRlc3QoJ1Nob3VsZCBsb2cgZXJyb3IgYWZ0ZXIgY2FsbCBleGVjdXRlJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHdvcmtlclF1ZXVlID0gbmV3IFdvcmtlclF1ZXVlKHsgY29uY3VycmVuY3k6IDAsIGxvZ2dlciB9KTtcbiAgICB3b3JrZXJRdWV1ZS53b3JrZXIgPSBqZXN0LmZuKCgpID0+IHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZXJyb3InKTtcbiAgICB9KTtcbiAgICB3b3JrZXJRdWV1ZS5sb2dnZXIuZXJyb3IgPSBqZXN0LmZuKChlcnJvcikgPT4gZXJyb3IpO1xuICAgIGF3YWl0IHdvcmtlclF1ZXVlLmV4ZWN1dGUoKTtcbiAgICBleHBlY3Qod29ya2VyUXVldWUud29ya2VyKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgZXhwZWN0KHdvcmtlclF1ZXVlLmxvZ2dlci5lcnJvcikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICB9KTtcbn0pO1xuIl19