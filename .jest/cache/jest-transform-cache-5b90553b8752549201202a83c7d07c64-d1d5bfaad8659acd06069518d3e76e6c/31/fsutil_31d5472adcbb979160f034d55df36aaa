7d237875dc3cab5bc9df028ab8de7f63
const path = require('path');

const fse = require('fs-extra');
/**
 * create app fs layer
 */


module.exports = app => {
  function normalizePath(optPath) {
    const filePath = Array.isArray(optPath) ? optPath.join('/') : optPath;
    const normalizedPath = path.normalize(filePath).replace(/^(\/?\.\.?)+/, '');
    return path.join(app.dir, normalizedPath);
  }

  const appFS = {
    /**
     * Writes a file in a app
     * @param {Array|string} optPath - file path
     * @param {string} data - content
     */
    writeAppFile(optPath, data) {
      const writePath = normalizePath(optPath);
      return fse.ensureFile(writePath).then(() => fse.writeFile(writePath, data));
    },

    /**
     * Writes a file in a plugin extensions folder
     * @param {string} plugin - plugin name
     * @param {Array|string} optPath - path to file
     * @param {string} data - content
     */
    writePluginFile(plugin, optPath, data) {
      const newPath = ['extensions', plugin].concat(optPath).join('/');
      return appFS.writeAppFile(newPath, data);
    },

    /**
     * Removes a file in app
     */
    removeAppFile(optPath) {
      const removePath = normalizePath(optPath);
      return fse.remove(removePath);
    }

  };
  return appFS;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZzLnV0aWwuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJmc2UiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXBwIiwibm9ybWFsaXplUGF0aCIsIm9wdFBhdGgiLCJmaWxlUGF0aCIsIkFycmF5IiwiaXNBcnJheSIsImpvaW4iLCJub3JtYWxpemVkUGF0aCIsIm5vcm1hbGl6ZSIsInJlcGxhY2UiLCJkaXIiLCJhcHBGUyIsIndyaXRlQXBwRmlsZSIsImRhdGEiLCJ3cml0ZVBhdGgiLCJlbnN1cmVGaWxlIiwidGhlbiIsIndyaXRlRmlsZSIsIndyaXRlUGx1Z2luRmlsZSIsInBsdWdpbiIsIm5ld1BhdGgiLCJjb25jYXQiLCJyZW1vdmVBcHBGaWxlIiwicmVtb3ZlUGF0aCIsInJlbW92ZSJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNQyxHQUFHLEdBQUdELE9BQU8sQ0FBQyxVQUFELENBQW5CO0FBRUE7QUFDQTtBQUNBOzs7QUFDQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWtCQyxHQUFELElBQVM7QUFDeEIsV0FBU0MsYUFBVCxDQUF1QkMsT0FBdkIsRUFBZ0M7QUFDOUIsVUFBTUMsUUFBUSxHQUFHQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0gsT0FBZCxJQUF5QkEsT0FBTyxDQUFDSSxJQUFSLENBQWEsR0FBYixDQUF6QixHQUE2Q0osT0FBOUQ7QUFFQSxVQUFNSyxjQUFjLEdBQUdaLElBQUksQ0FBQ2EsU0FBTCxDQUFlTCxRQUFmLEVBQXlCTSxPQUF6QixDQUFpQyxjQUFqQyxFQUFpRCxFQUFqRCxDQUF2QjtBQUVBLFdBQU9kLElBQUksQ0FBQ1csSUFBTCxDQUFVTixHQUFHLENBQUNVLEdBQWQsRUFBbUJILGNBQW5CLENBQVA7QUFDRDs7QUFFRCxRQUFNSSxLQUFLLEdBQUc7QUFDWjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0lDLElBQUFBLFlBQVksQ0FBQ1YsT0FBRCxFQUFVVyxJQUFWLEVBQWdCO0FBQzFCLFlBQU1DLFNBQVMsR0FBR2IsYUFBYSxDQUFDQyxPQUFELENBQS9CO0FBQ0EsYUFBT0wsR0FBRyxDQUFDa0IsVUFBSixDQUFlRCxTQUFmLEVBQTBCRSxJQUExQixDQUErQixNQUFNbkIsR0FBRyxDQUFDb0IsU0FBSixDQUFjSCxTQUFkLEVBQXlCRCxJQUF6QixDQUFyQyxDQUFQO0FBQ0QsS0FUVzs7QUFXWjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSUssSUFBQUEsZUFBZSxDQUFDQyxNQUFELEVBQVNqQixPQUFULEVBQWtCVyxJQUFsQixFQUF3QjtBQUNyQyxZQUFNTyxPQUFPLEdBQUcsQ0FBQyxZQUFELEVBQWVELE1BQWYsRUFBdUJFLE1BQXZCLENBQThCbkIsT0FBOUIsRUFBdUNJLElBQXZDLENBQTRDLEdBQTVDLENBQWhCO0FBQ0EsYUFBT0ssS0FBSyxDQUFDQyxZQUFOLENBQW1CUSxPQUFuQixFQUE0QlAsSUFBNUIsQ0FBUDtBQUNELEtBcEJXOztBQXNCWjtBQUNKO0FBQ0E7QUFDSVMsSUFBQUEsYUFBYSxDQUFDcEIsT0FBRCxFQUFVO0FBQ3JCLFlBQU1xQixVQUFVLEdBQUd0QixhQUFhLENBQUNDLE9BQUQsQ0FBaEM7QUFDQSxhQUFPTCxHQUFHLENBQUMyQixNQUFKLENBQVdELFVBQVgsQ0FBUDtBQUNEOztBQTVCVyxHQUFkO0FBK0JBLFNBQU9aLEtBQVA7QUFDRCxDQXpDRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBmc2UgPSByZXF1aXJlKCdmcy1leHRyYScpO1xuXG4vKipcbiAqIGNyZWF0ZSBhcHAgZnMgbGF5ZXJcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSAoYXBwKSA9PiB7XG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZVBhdGgob3B0UGF0aCkge1xuICAgIGNvbnN0IGZpbGVQYXRoID0gQXJyYXkuaXNBcnJheShvcHRQYXRoKSA/IG9wdFBhdGguam9pbignLycpIDogb3B0UGF0aDtcblxuICAgIGNvbnN0IG5vcm1hbGl6ZWRQYXRoID0gcGF0aC5ub3JtYWxpemUoZmlsZVBhdGgpLnJlcGxhY2UoL14oXFwvP1xcLlxcLj8pKy8sICcnKTtcblxuICAgIHJldHVybiBwYXRoLmpvaW4oYXBwLmRpciwgbm9ybWFsaXplZFBhdGgpO1xuICB9XG5cbiAgY29uc3QgYXBwRlMgPSB7XG4gICAgLyoqXG4gICAgICogV3JpdGVzIGEgZmlsZSBpbiBhIGFwcFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBvcHRQYXRoIC0gZmlsZSBwYXRoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGEgLSBjb250ZW50XG4gICAgICovXG4gICAgd3JpdGVBcHBGaWxlKG9wdFBhdGgsIGRhdGEpIHtcbiAgICAgIGNvbnN0IHdyaXRlUGF0aCA9IG5vcm1hbGl6ZVBhdGgob3B0UGF0aCk7XG4gICAgICByZXR1cm4gZnNlLmVuc3VyZUZpbGUod3JpdGVQYXRoKS50aGVuKCgpID0+IGZzZS53cml0ZUZpbGUod3JpdGVQYXRoLCBkYXRhKSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFdyaXRlcyBhIGZpbGUgaW4gYSBwbHVnaW4gZXh0ZW5zaW9ucyBmb2xkZXJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGx1Z2luIC0gcGx1Z2luIG5hbWVcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gb3B0UGF0aCAtIHBhdGggdG8gZmlsZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhIC0gY29udGVudFxuICAgICAqL1xuICAgIHdyaXRlUGx1Z2luRmlsZShwbHVnaW4sIG9wdFBhdGgsIGRhdGEpIHtcbiAgICAgIGNvbnN0IG5ld1BhdGggPSBbJ2V4dGVuc2lvbnMnLCBwbHVnaW5dLmNvbmNhdChvcHRQYXRoKS5qb2luKCcvJyk7XG4gICAgICByZXR1cm4gYXBwRlMud3JpdGVBcHBGaWxlKG5ld1BhdGgsIGRhdGEpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgZmlsZSBpbiBhcHBcbiAgICAgKi9cbiAgICByZW1vdmVBcHBGaWxlKG9wdFBhdGgpIHtcbiAgICAgIGNvbnN0IHJlbW92ZVBhdGggPSBub3JtYWxpemVQYXRoKG9wdFBhdGgpO1xuICAgICAgcmV0dXJuIGZzZS5yZW1vdmUocmVtb3ZlUGF0aCk7XG4gICAgfSxcbiAgfTtcblxuICByZXR1cm4gYXBwRlM7XG59O1xuIl19