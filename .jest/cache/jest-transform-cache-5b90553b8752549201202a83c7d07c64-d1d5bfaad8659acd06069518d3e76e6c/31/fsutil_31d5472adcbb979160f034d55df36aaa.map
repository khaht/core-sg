{"version":3,"sources":["fs.util.js"],"names":["path","require","fse","module","exports","app","normalizePath","optPath","filePath","Array","isArray","join","normalizedPath","normalize","replace","dir","appFS","writeAppFile","data","writePath","ensureFile","then","writeFile","writePluginFile","plugin","newPath","concat","removeAppFile","removePath","remove"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,UAAD,CAAnB;AAEA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAkBC,GAAD,IAAS;AACxB,WAASC,aAAT,CAAuBC,OAAvB,EAAgC;AAC9B,UAAMC,QAAQ,GAAGC,KAAK,CAACC,OAAN,CAAcH,OAAd,IAAyBA,OAAO,CAACI,IAAR,CAAa,GAAb,CAAzB,GAA6CJ,OAA9D;AAEA,UAAMK,cAAc,GAAGZ,IAAI,CAACa,SAAL,CAAeL,QAAf,EAAyBM,OAAzB,CAAiC,cAAjC,EAAiD,EAAjD,CAAvB;AAEA,WAAOd,IAAI,CAACW,IAAL,CAAUN,GAAG,CAACU,GAAd,EAAmBH,cAAnB,CAAP;AACD;;AAED,QAAMI,KAAK,GAAG;AACZ;AACJ;AACA;AACA;AACA;AACIC,IAAAA,YAAY,CAACV,OAAD,EAAUW,IAAV,EAAgB;AAC1B,YAAMC,SAAS,GAAGb,aAAa,CAACC,OAAD,CAA/B;AACA,aAAOL,GAAG,CAACkB,UAAJ,CAAeD,SAAf,EAA0BE,IAA1B,CAA+B,MAAMnB,GAAG,CAACoB,SAAJ,CAAcH,SAAd,EAAyBD,IAAzB,CAArC,CAAP;AACD,KATW;;AAWZ;AACJ;AACA;AACA;AACA;AACA;AACIK,IAAAA,eAAe,CAACC,MAAD,EAASjB,OAAT,EAAkBW,IAAlB,EAAwB;AACrC,YAAMO,OAAO,GAAG,CAAC,YAAD,EAAeD,MAAf,EAAuBE,MAAvB,CAA8BnB,OAA9B,EAAuCI,IAAvC,CAA4C,GAA5C,CAAhB;AACA,aAAOK,KAAK,CAACC,YAAN,CAAmBQ,OAAnB,EAA4BP,IAA5B,CAAP;AACD,KApBW;;AAsBZ;AACJ;AACA;AACIS,IAAAA,aAAa,CAACpB,OAAD,EAAU;AACrB,YAAMqB,UAAU,GAAGtB,aAAa,CAACC,OAAD,CAAhC;AACA,aAAOL,GAAG,CAAC2B,MAAJ,CAAWD,UAAX,CAAP;AACD;;AA5BW,GAAd;AA+BA,SAAOZ,KAAP;AACD,CAzCD","sourcesContent":["const path = require('path');\nconst fse = require('fs-extra');\n\n/**\n * create app fs layer\n */\nmodule.exports = (app) => {\n  function normalizePath(optPath) {\n    const filePath = Array.isArray(optPath) ? optPath.join('/') : optPath;\n\n    const normalizedPath = path.normalize(filePath).replace(/^(\\/?\\.\\.?)+/, '');\n\n    return path.join(app.dir, normalizedPath);\n  }\n\n  const appFS = {\n    /**\n     * Writes a file in a app\n     * @param {Array|string} optPath - file path\n     * @param {string} data - content\n     */\n    writeAppFile(optPath, data) {\n      const writePath = normalizePath(optPath);\n      return fse.ensureFile(writePath).then(() => fse.writeFile(writePath, data));\n    },\n\n    /**\n     * Writes a file in a plugin extensions folder\n     * @param {string} plugin - plugin name\n     * @param {Array|string} optPath - path to file\n     * @param {string} data - content\n     */\n    writePluginFile(plugin, optPath, data) {\n      const newPath = ['extensions', plugin].concat(optPath).join('/');\n      return appFS.writeAppFile(newPath, data);\n    },\n\n    /**\n     * Removes a file in app\n     */\n    removeAppFile(optPath) {\n      const removePath = normalizePath(optPath);\n      return fse.remove(removePath);\n    },\n  };\n\n  return appFS;\n};\n"]}