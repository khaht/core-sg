79b0681ffbd5f19f9368e800ccf59994
const _ = require('lodash');

const configProvider = require('../config-provider');

const initialConfig = {
  server: {
    host: '0.0.0.0',
    port: 4000
  }
};
describe('Load config provider', () => {
  test('Should return object has get set has', () => {
    const _configs = configProvider(initialConfig);

    expect(Object.keys(_.pick(_configs, ['get', 'set', 'has']))).toEqual(['get', 'set', 'has']);
  });
  test('Should return object has get set has with config is empty', () => {
    const _configs = configProvider();

    expect(Object.keys(_.pick(_configs, ['get', 'set', 'has']))).toEqual(['get', 'set', 'has']);
  });
  test('Should set a config', () => {
    let _configs = configProvider(initialConfig);

    _configs = _configs.set('server.port', 3000);
    expect(_.pick(_configs, 'server')).toEqual({
      server: {
        host: '0.0.0.0',
        port: 3000
      }
    });
  });
  test('Should get a config', () => {
    const _configs = configProvider(initialConfig);

    const port = _configs.get('server.port');

    expect(port).toBe(4000);
  });
  test('Should has a config', () => {
    const _configs = configProvider(initialConfig);

    const hasPort = _configs.has('server.port');

    expect(hasPort).toBe(true);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy1wcm92aWRlci50ZXN0LmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiY29uZmlnUHJvdmlkZXIiLCJpbml0aWFsQ29uZmlnIiwic2VydmVyIiwiaG9zdCIsInBvcnQiLCJkZXNjcmliZSIsInRlc3QiLCJfY29uZmlncyIsImV4cGVjdCIsIk9iamVjdCIsImtleXMiLCJwaWNrIiwidG9FcXVhbCIsInNldCIsImdldCIsInRvQmUiLCJoYXNQb3J0IiwiaGFzIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxRQUFELENBQWpCOztBQUNBLE1BQU1DLGNBQWMsR0FBR0QsT0FBTyxDQUFDLG9CQUFELENBQTlCOztBQUVBLE1BQU1FLGFBQWEsR0FBRztBQUNwQkMsRUFBQUEsTUFBTSxFQUFFO0FBQ05DLElBQUFBLElBQUksRUFBRSxTQURBO0FBRU5DLElBQUFBLElBQUksRUFBRTtBQUZBO0FBRFksQ0FBdEI7QUFPQUMsUUFBUSxDQUFDLHNCQUFELEVBQXlCLE1BQU07QUFDckNDLEVBQUFBLElBQUksQ0FBQyxzQ0FBRCxFQUF5QyxNQUFNO0FBQ2pELFVBQU1DLFFBQVEsR0FBR1AsY0FBYyxDQUFDQyxhQUFELENBQS9COztBQUVBTyxJQUFBQSxNQUFNLENBQUNDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZWixDQUFDLENBQUNhLElBQUYsQ0FBT0osUUFBUCxFQUFpQixDQUFDLEtBQUQsRUFBUSxLQUFSLEVBQWUsS0FBZixDQUFqQixDQUFaLENBQUQsQ0FBTixDQUE2REssT0FBN0QsQ0FBcUUsQ0FDbkUsS0FEbUUsRUFFbkUsS0FGbUUsRUFHbkUsS0FIbUUsQ0FBckU7QUFLRCxHQVJHLENBQUo7QUFVQU4sRUFBQUEsSUFBSSxDQUFDLDJEQUFELEVBQThELE1BQU07QUFDdEUsVUFBTUMsUUFBUSxHQUFHUCxjQUFjLEVBQS9COztBQUVBUSxJQUFBQSxNQUFNLENBQUNDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZWixDQUFDLENBQUNhLElBQUYsQ0FBT0osUUFBUCxFQUFpQixDQUFDLEtBQUQsRUFBUSxLQUFSLEVBQWUsS0FBZixDQUFqQixDQUFaLENBQUQsQ0FBTixDQUE2REssT0FBN0QsQ0FBcUUsQ0FDbkUsS0FEbUUsRUFFbkUsS0FGbUUsRUFHbkUsS0FIbUUsQ0FBckU7QUFLRCxHQVJHLENBQUo7QUFVQU4sRUFBQUEsSUFBSSxDQUFDLHFCQUFELEVBQXdCLE1BQU07QUFDaEMsUUFBSUMsUUFBUSxHQUFHUCxjQUFjLENBQUNDLGFBQUQsQ0FBN0I7O0FBQ0FNLElBQUFBLFFBQVEsR0FBR0EsUUFBUSxDQUFDTSxHQUFULENBQWEsYUFBYixFQUE0QixJQUE1QixDQUFYO0FBRUFMLElBQUFBLE1BQU0sQ0FBQ1YsQ0FBQyxDQUFDYSxJQUFGLENBQU9KLFFBQVAsRUFBaUIsUUFBakIsQ0FBRCxDQUFOLENBQW1DSyxPQUFuQyxDQUEyQztBQUN6Q1YsTUFBQUEsTUFBTSxFQUFFO0FBQ05DLFFBQUFBLElBQUksRUFBRSxTQURBO0FBRU5DLFFBQUFBLElBQUksRUFBRTtBQUZBO0FBRGlDLEtBQTNDO0FBTUQsR0FWRyxDQUFKO0FBWUFFLEVBQUFBLElBQUksQ0FBQyxxQkFBRCxFQUF3QixNQUFNO0FBQ2hDLFVBQU1DLFFBQVEsR0FBR1AsY0FBYyxDQUFDQyxhQUFELENBQS9COztBQUNBLFVBQU1HLElBQUksR0FBR0csUUFBUSxDQUFDTyxHQUFULENBQWEsYUFBYixDQUFiOztBQUVBTixJQUFBQSxNQUFNLENBQUNKLElBQUQsQ0FBTixDQUFhVyxJQUFiLENBQWtCLElBQWxCO0FBQ0QsR0FMRyxDQUFKO0FBT0FULEVBQUFBLElBQUksQ0FBQyxxQkFBRCxFQUF3QixNQUFNO0FBQ2hDLFVBQU1DLFFBQVEsR0FBR1AsY0FBYyxDQUFDQyxhQUFELENBQS9COztBQUNBLFVBQU1lLE9BQU8sR0FBR1QsUUFBUSxDQUFDVSxHQUFULENBQWEsYUFBYixDQUFoQjs7QUFFQVQsSUFBQUEsTUFBTSxDQUFDUSxPQUFELENBQU4sQ0FBZ0JELElBQWhCLENBQXFCLElBQXJCO0FBQ0QsR0FMRyxDQUFKO0FBTUQsQ0E5Q08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbmNvbnN0IGNvbmZpZ1Byb3ZpZGVyID0gcmVxdWlyZSgnLi4vY29uZmlnLXByb3ZpZGVyJyk7XG5cbmNvbnN0IGluaXRpYWxDb25maWcgPSB7XG4gIHNlcnZlcjoge1xuICAgIGhvc3Q6ICcwLjAuMC4wJyxcbiAgICBwb3J0OiA0MDAwLFxuICB9LFxufTtcblxuZGVzY3JpYmUoJ0xvYWQgY29uZmlnIHByb3ZpZGVyJywgKCkgPT4ge1xuICB0ZXN0KCdTaG91bGQgcmV0dXJuIG9iamVjdCBoYXMgZ2V0IHNldCBoYXMnLCAoKSA9PiB7XG4gICAgY29uc3QgX2NvbmZpZ3MgPSBjb25maWdQcm92aWRlcihpbml0aWFsQ29uZmlnKTtcblxuICAgIGV4cGVjdChPYmplY3Qua2V5cyhfLnBpY2soX2NvbmZpZ3MsIFsnZ2V0JywgJ3NldCcsICdoYXMnXSkpKS50b0VxdWFsKFtcbiAgICAgICdnZXQnLFxuICAgICAgJ3NldCcsXG4gICAgICAnaGFzJyxcbiAgICBdKTtcbiAgfSk7XG5cbiAgdGVzdCgnU2hvdWxkIHJldHVybiBvYmplY3QgaGFzIGdldCBzZXQgaGFzIHdpdGggY29uZmlnIGlzIGVtcHR5JywgKCkgPT4ge1xuICAgIGNvbnN0IF9jb25maWdzID0gY29uZmlnUHJvdmlkZXIoKTtcblxuICAgIGV4cGVjdChPYmplY3Qua2V5cyhfLnBpY2soX2NvbmZpZ3MsIFsnZ2V0JywgJ3NldCcsICdoYXMnXSkpKS50b0VxdWFsKFtcbiAgICAgICdnZXQnLFxuICAgICAgJ3NldCcsXG4gICAgICAnaGFzJyxcbiAgICBdKTtcbiAgfSk7XG5cbiAgdGVzdCgnU2hvdWxkIHNldCBhIGNvbmZpZycsICgpID0+IHtcbiAgICBsZXQgX2NvbmZpZ3MgPSBjb25maWdQcm92aWRlcihpbml0aWFsQ29uZmlnKTtcbiAgICBfY29uZmlncyA9IF9jb25maWdzLnNldCgnc2VydmVyLnBvcnQnLCAzMDAwKTtcblxuICAgIGV4cGVjdChfLnBpY2soX2NvbmZpZ3MsICdzZXJ2ZXInKSkudG9FcXVhbCh7XG4gICAgICBzZXJ2ZXI6IHtcbiAgICAgICAgaG9zdDogJzAuMC4wLjAnLFxuICAgICAgICBwb3J0OiAzMDAwLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnU2hvdWxkIGdldCBhIGNvbmZpZycsICgpID0+IHtcbiAgICBjb25zdCBfY29uZmlncyA9IGNvbmZpZ1Byb3ZpZGVyKGluaXRpYWxDb25maWcpO1xuICAgIGNvbnN0IHBvcnQgPSBfY29uZmlncy5nZXQoJ3NlcnZlci5wb3J0Jyk7XG5cbiAgICBleHBlY3QocG9ydCkudG9CZSg0MDAwKTtcbiAgfSk7XG5cbiAgdGVzdCgnU2hvdWxkIGhhcyBhIGNvbmZpZycsICgpID0+IHtcbiAgICBjb25zdCBfY29uZmlncyA9IGNvbmZpZ1Byb3ZpZGVyKGluaXRpYWxDb25maWcpO1xuICAgIGNvbnN0IGhhc1BvcnQgPSBfY29uZmlncy5oYXMoJ3NlcnZlci5wb3J0Jyk7XG5cbiAgICBleHBlY3QoaGFzUG9ydCkudG9CZSh0cnVlKTtcbiAgfSk7XG59KTtcbiJdfQ==