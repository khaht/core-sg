{"version":3,"sources":["config-provider.test.js"],"names":["_","require","configProvider","initialConfig","server","host","port","describe","test","_configs","expect","Object","keys","pick","toEqual","set","get","toBe","hasPort","has"],"mappings":"AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,oBAAD,CAA9B;;AAEA,MAAME,aAAa,GAAG;AACpBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EAAE,SADA;AAENC,IAAAA,IAAI,EAAE;AAFA;AADY,CAAtB;AAOAC,QAAQ,CAAC,sBAAD,EAAyB,MAAM;AACrCC,EAAAA,IAAI,CAAC,sCAAD,EAAyC,MAAM;AACjD,UAAMC,QAAQ,GAAGP,cAAc,CAACC,aAAD,CAA/B;;AAEAO,IAAAA,MAAM,CAACC,MAAM,CAACC,IAAP,CAAYZ,CAAC,CAACa,IAAF,CAAOJ,QAAP,EAAiB,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAAjB,CAAZ,CAAD,CAAN,CAA6DK,OAA7D,CAAqE,CACnE,KADmE,EAEnE,KAFmE,EAGnE,KAHmE,CAArE;AAKD,GARG,CAAJ;AAUAN,EAAAA,IAAI,CAAC,2DAAD,EAA8D,MAAM;AACtE,UAAMC,QAAQ,GAAGP,cAAc,EAA/B;;AAEAQ,IAAAA,MAAM,CAACC,MAAM,CAACC,IAAP,CAAYZ,CAAC,CAACa,IAAF,CAAOJ,QAAP,EAAiB,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAAjB,CAAZ,CAAD,CAAN,CAA6DK,OAA7D,CAAqE,CACnE,KADmE,EAEnE,KAFmE,EAGnE,KAHmE,CAArE;AAKD,GARG,CAAJ;AAUAN,EAAAA,IAAI,CAAC,qBAAD,EAAwB,MAAM;AAChC,QAAIC,QAAQ,GAAGP,cAAc,CAACC,aAAD,CAA7B;;AACAM,IAAAA,QAAQ,GAAGA,QAAQ,CAACM,GAAT,CAAa,aAAb,EAA4B,IAA5B,CAAX;AAEAL,IAAAA,MAAM,CAACV,CAAC,CAACa,IAAF,CAAOJ,QAAP,EAAiB,QAAjB,CAAD,CAAN,CAAmCK,OAAnC,CAA2C;AACzCV,MAAAA,MAAM,EAAE;AACNC,QAAAA,IAAI,EAAE,SADA;AAENC,QAAAA,IAAI,EAAE;AAFA;AADiC,KAA3C;AAMD,GAVG,CAAJ;AAYAE,EAAAA,IAAI,CAAC,qBAAD,EAAwB,MAAM;AAChC,UAAMC,QAAQ,GAAGP,cAAc,CAACC,aAAD,CAA/B;;AACA,UAAMG,IAAI,GAAGG,QAAQ,CAACO,GAAT,CAAa,aAAb,CAAb;;AAEAN,IAAAA,MAAM,CAACJ,IAAD,CAAN,CAAaW,IAAb,CAAkB,IAAlB;AACD,GALG,CAAJ;AAOAT,EAAAA,IAAI,CAAC,qBAAD,EAAwB,MAAM;AAChC,UAAMC,QAAQ,GAAGP,cAAc,CAACC,aAAD,CAA/B;;AACA,UAAMe,OAAO,GAAGT,QAAQ,CAACU,GAAT,CAAa,aAAb,CAAhB;;AAEAT,IAAAA,MAAM,CAACQ,OAAD,CAAN,CAAgBD,IAAhB,CAAqB,IAArB;AACD,GALG,CAAJ;AAMD,CA9CO,CAAR","sourcesContent":["const _ = require('lodash');\nconst configProvider = require('../config-provider');\n\nconst initialConfig = {\n  server: {\n    host: '0.0.0.0',\n    port: 4000,\n  },\n};\n\ndescribe('Load config provider', () => {\n  test('Should return object has get set has', () => {\n    const _configs = configProvider(initialConfig);\n\n    expect(Object.keys(_.pick(_configs, ['get', 'set', 'has']))).toEqual([\n      'get',\n      'set',\n      'has',\n    ]);\n  });\n\n  test('Should return object has get set has with config is empty', () => {\n    const _configs = configProvider();\n\n    expect(Object.keys(_.pick(_configs, ['get', 'set', 'has']))).toEqual([\n      'get',\n      'set',\n      'has',\n    ]);\n  });\n\n  test('Should set a config', () => {\n    let _configs = configProvider(initialConfig);\n    _configs = _configs.set('server.port', 3000);\n\n    expect(_.pick(_configs, 'server')).toEqual({\n      server: {\n        host: '0.0.0.0',\n        port: 3000,\n      },\n    });\n  });\n\n  test('Should get a config', () => {\n    const _configs = configProvider(initialConfig);\n    const port = _configs.get('server.port');\n\n    expect(port).toBe(4000);\n  });\n\n  test('Should has a config', () => {\n    const _configs = configProvider(initialConfig);\n    const hasPort = _configs.has('server.port');\n\n    expect(hasPort).toBe(true);\n  });\n});\n"]}