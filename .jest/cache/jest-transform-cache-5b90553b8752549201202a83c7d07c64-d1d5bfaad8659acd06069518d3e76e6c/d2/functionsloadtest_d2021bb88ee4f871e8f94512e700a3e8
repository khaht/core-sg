7c32350fd87f5fe440435fdc7be2143c
const loadFunctions = require('../functions.load');

const del = require('del');

const path = require('path');

const fs = require('fs');

const getConfigDir = (prefix, dir = process.cwd()) => {
  const configDir = path.resolve(dir, prefix ? `${prefix}-config` : 'config');

  if (!fs.existsSync(configDir)) {
    fs.mkdirSync(configDir);
  }

  return configDir;
};

const testConfigDir = getConfigDir('functions-load-test');
const testConfigSubDir = getConfigDir('test', testConfigDir);
describe('Load Functions', () => {
  afterAll(async () => {
    await del(testConfigDir);
  });
  test('Should load functions', () => {
    const dir = path.resolve(process.cwd(), 'config', 'functions');
    const resp = loadFunctions(dir);
    expect(Object.keys(resp)).toEqual(['bootstrap', 'cron', 'responses', 'validator.load']);
  });
  test('Should return empty object if dir is not exists', () => {
    const dir = path.resolve(process.cwd(), 'config', 'functions', 'test');
    const resp = loadFunctions(dir);
    expect(resp).toEqual({});
  });
  test('Should throw error when could not load function', () => {
    // create file
    const jsConfigFilePath = path.join(testConfigSubDir, 'test.js');
    fs.writeFileSync(jsConfigFilePath, 'invalid data!!!');
    expect(() => loadFunctions(testConfigDir)).toThrowError();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZ1bmN0aW9ucy5sb2FkLnRlc3QuanMiXSwibmFtZXMiOlsibG9hZEZ1bmN0aW9ucyIsInJlcXVpcmUiLCJkZWwiLCJwYXRoIiwiZnMiLCJnZXRDb25maWdEaXIiLCJwcmVmaXgiLCJkaXIiLCJwcm9jZXNzIiwiY3dkIiwiY29uZmlnRGlyIiwicmVzb2x2ZSIsImV4aXN0c1N5bmMiLCJta2RpclN5bmMiLCJ0ZXN0Q29uZmlnRGlyIiwidGVzdENvbmZpZ1N1YkRpciIsImRlc2NyaWJlIiwiYWZ0ZXJBbGwiLCJ0ZXN0IiwicmVzcCIsImV4cGVjdCIsIk9iamVjdCIsImtleXMiLCJ0b0VxdWFsIiwianNDb25maWdGaWxlUGF0aCIsImpvaW4iLCJ3cml0ZUZpbGVTeW5jIiwidG9UaHJvd0Vycm9yIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxhQUFhLEdBQUdDLE9BQU8sQ0FBQyxtQkFBRCxDQUE3Qjs7QUFDQSxNQUFNQyxHQUFHLEdBQUdELE9BQU8sQ0FBQyxLQUFELENBQW5COztBQUNBLE1BQU1FLElBQUksR0FBR0YsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTUcsRUFBRSxHQUFHSCxPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFFQSxNQUFNSSxZQUFZLEdBQUcsQ0FBQ0MsTUFBRCxFQUFTQyxHQUFHLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBUixFQUFmLEtBQWlDO0FBQ3BELFFBQU1DLFNBQVMsR0FBR1AsSUFBSSxDQUFDUSxPQUFMLENBQWFKLEdBQWIsRUFBa0JELE1BQU0sR0FBSSxHQUFFQSxNQUFPLFNBQWIsR0FBd0IsUUFBaEQsQ0FBbEI7O0FBQ0EsTUFBSSxDQUFDRixFQUFFLENBQUNRLFVBQUgsQ0FBY0YsU0FBZCxDQUFMLEVBQStCO0FBQzdCTixJQUFBQSxFQUFFLENBQUNTLFNBQUgsQ0FBYUgsU0FBYjtBQUNEOztBQUVELFNBQU9BLFNBQVA7QUFDRCxDQVBEOztBQVNBLE1BQU1JLGFBQWEsR0FBR1QsWUFBWSxDQUFDLHFCQUFELENBQWxDO0FBQ0EsTUFBTVUsZ0JBQWdCLEdBQUdWLFlBQVksQ0FBQyxNQUFELEVBQVNTLGFBQVQsQ0FBckM7QUFFQUUsUUFBUSxDQUFDLGdCQUFELEVBQW1CLE1BQU07QUFDL0JDLEVBQUFBLFFBQVEsQ0FBQyxZQUFZO0FBQ25CLFVBQU1mLEdBQUcsQ0FBQ1ksYUFBRCxDQUFUO0FBQ0QsR0FGTyxDQUFSO0FBSUFJLEVBQUFBLElBQUksQ0FBQyx1QkFBRCxFQUEwQixNQUFNO0FBQ2xDLFVBQU1YLEdBQUcsR0FBR0osSUFBSSxDQUFDUSxPQUFMLENBQWFILE9BQU8sQ0FBQ0MsR0FBUixFQUFiLEVBQTRCLFFBQTVCLEVBQXNDLFdBQXRDLENBQVo7QUFDQSxVQUFNVSxJQUFJLEdBQUduQixhQUFhLENBQUNPLEdBQUQsQ0FBMUI7QUFDQWEsSUFBQUEsTUFBTSxDQUFDQyxNQUFNLENBQUNDLElBQVAsQ0FBWUgsSUFBWixDQUFELENBQU4sQ0FBMEJJLE9BQTFCLENBQWtDLENBQUMsV0FBRCxFQUFjLE1BQWQsRUFBc0IsV0FBdEIsRUFBbUMsZ0JBQW5DLENBQWxDO0FBQ0QsR0FKRyxDQUFKO0FBTUFMLEVBQUFBLElBQUksQ0FBQyxpREFBRCxFQUFvRCxNQUFNO0FBQzVELFVBQU1YLEdBQUcsR0FBR0osSUFBSSxDQUFDUSxPQUFMLENBQWFILE9BQU8sQ0FBQ0MsR0FBUixFQUFiLEVBQTRCLFFBQTVCLEVBQXNDLFdBQXRDLEVBQW1ELE1BQW5ELENBQVo7QUFDQSxVQUFNVSxJQUFJLEdBQUduQixhQUFhLENBQUNPLEdBQUQsQ0FBMUI7QUFDQWEsSUFBQUEsTUFBTSxDQUFDRCxJQUFELENBQU4sQ0FBYUksT0FBYixDQUFxQixFQUFyQjtBQUNELEdBSkcsQ0FBSjtBQU1BTCxFQUFBQSxJQUFJLENBQUMsaURBQUQsRUFBb0QsTUFBTTtBQUM1RDtBQUNBLFVBQU1NLGdCQUFnQixHQUFHckIsSUFBSSxDQUFDc0IsSUFBTCxDQUFVVixnQkFBVixFQUE0QixTQUE1QixDQUF6QjtBQUNBWCxJQUFBQSxFQUFFLENBQUNzQixhQUFILENBQWlCRixnQkFBakIsRUFBbUMsaUJBQW5DO0FBQ0FKLElBQUFBLE1BQU0sQ0FBQyxNQUFNcEIsYUFBYSxDQUFDYyxhQUFELENBQXBCLENBQU4sQ0FBMkNhLFlBQTNDO0FBQ0QsR0FMRyxDQUFKO0FBTUQsQ0F2Qk8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGxvYWRGdW5jdGlvbnMgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMubG9hZCcpO1xuY29uc3QgZGVsID0gcmVxdWlyZSgnZGVsJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuXG5jb25zdCBnZXRDb25maWdEaXIgPSAocHJlZml4LCBkaXIgPSBwcm9jZXNzLmN3ZCgpKSA9PiB7XG4gIGNvbnN0IGNvbmZpZ0RpciA9IHBhdGgucmVzb2x2ZShkaXIsIHByZWZpeCA/IGAke3ByZWZpeH0tY29uZmlnYCA6ICdjb25maWcnKTtcbiAgaWYgKCFmcy5leGlzdHNTeW5jKGNvbmZpZ0RpcikpIHtcbiAgICBmcy5ta2RpclN5bmMoY29uZmlnRGlyKTtcbiAgfVxuXG4gIHJldHVybiBjb25maWdEaXI7XG59O1xuXG5jb25zdCB0ZXN0Q29uZmlnRGlyID0gZ2V0Q29uZmlnRGlyKCdmdW5jdGlvbnMtbG9hZC10ZXN0Jyk7XG5jb25zdCB0ZXN0Q29uZmlnU3ViRGlyID0gZ2V0Q29uZmlnRGlyKCd0ZXN0JywgdGVzdENvbmZpZ0Rpcik7XG5cbmRlc2NyaWJlKCdMb2FkIEZ1bmN0aW9ucycsICgpID0+IHtcbiAgYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGRlbCh0ZXN0Q29uZmlnRGlyKTtcbiAgfSk7XG5cbiAgdGVzdCgnU2hvdWxkIGxvYWQgZnVuY3Rpb25zJywgKCkgPT4ge1xuICAgIGNvbnN0IGRpciA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCAnY29uZmlnJywgJ2Z1bmN0aW9ucycpO1xuICAgIGNvbnN0IHJlc3AgPSBsb2FkRnVuY3Rpb25zKGRpcik7XG4gICAgZXhwZWN0KE9iamVjdC5rZXlzKHJlc3ApKS50b0VxdWFsKFsnYm9vdHN0cmFwJywgJ2Nyb24nLCAncmVzcG9uc2VzJywgJ3ZhbGlkYXRvci5sb2FkJ10pO1xuICB9KTtcblxuICB0ZXN0KCdTaG91bGQgcmV0dXJuIGVtcHR5IG9iamVjdCBpZiBkaXIgaXMgbm90IGV4aXN0cycsICgpID0+IHtcbiAgICBjb25zdCBkaXIgPSBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgJ2NvbmZpZycsICdmdW5jdGlvbnMnLCAndGVzdCcpO1xuICAgIGNvbnN0IHJlc3AgPSBsb2FkRnVuY3Rpb25zKGRpcik7XG4gICAgZXhwZWN0KHJlc3ApLnRvRXF1YWwoe30pO1xuICB9KTtcblxuICB0ZXN0KCdTaG91bGQgdGhyb3cgZXJyb3Igd2hlbiBjb3VsZCBub3QgbG9hZCBmdW5jdGlvbicsICgpID0+IHtcbiAgICAvLyBjcmVhdGUgZmlsZVxuICAgIGNvbnN0IGpzQ29uZmlnRmlsZVBhdGggPSBwYXRoLmpvaW4odGVzdENvbmZpZ1N1YkRpciwgJ3Rlc3QuanMnKTtcbiAgICBmcy53cml0ZUZpbGVTeW5jKGpzQ29uZmlnRmlsZVBhdGgsICdpbnZhbGlkIGRhdGEhISEnKTtcbiAgICBleHBlY3QoKCkgPT4gbG9hZEZ1bmN0aW9ucyh0ZXN0Q29uZmlnRGlyKSkudG9UaHJvd0Vycm9yKCk7XG4gIH0pO1xufSk7XG4iXX0=