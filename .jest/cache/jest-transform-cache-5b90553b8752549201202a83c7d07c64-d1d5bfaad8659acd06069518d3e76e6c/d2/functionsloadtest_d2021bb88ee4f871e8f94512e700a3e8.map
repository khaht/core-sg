{"version":3,"sources":["functions.load.test.js"],"names":["loadFunctions","require","del","path","fs","getConfigDir","prefix","dir","process","cwd","configDir","resolve","existsSync","mkdirSync","testConfigDir","testConfigSubDir","describe","afterAll","test","resp","expect","Object","keys","toEqual","jsConfigFilePath","join","writeFileSync","toThrowError"],"mappings":"AAAA,MAAMA,aAAa,GAAGC,OAAO,CAAC,mBAAD,CAA7B;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMG,EAAE,GAAGH,OAAO,CAAC,IAAD,CAAlB;;AAEA,MAAMI,YAAY,GAAG,CAACC,MAAD,EAASC,GAAG,GAAGC,OAAO,CAACC,GAAR,EAAf,KAAiC;AACpD,QAAMC,SAAS,GAAGP,IAAI,CAACQ,OAAL,CAAaJ,GAAb,EAAkBD,MAAM,GAAI,GAAEA,MAAO,SAAb,GAAwB,QAAhD,CAAlB;;AACA,MAAI,CAACF,EAAE,CAACQ,UAAH,CAAcF,SAAd,CAAL,EAA+B;AAC7BN,IAAAA,EAAE,CAACS,SAAH,CAAaH,SAAb;AACD;;AAED,SAAOA,SAAP;AACD,CAPD;;AASA,MAAMI,aAAa,GAAGT,YAAY,CAAC,qBAAD,CAAlC;AACA,MAAMU,gBAAgB,GAAGV,YAAY,CAAC,MAAD,EAASS,aAAT,CAArC;AAEAE,QAAQ,CAAC,gBAAD,EAAmB,MAAM;AAC/BC,EAAAA,QAAQ,CAAC,YAAY;AACnB,UAAMf,GAAG,CAACY,aAAD,CAAT;AACD,GAFO,CAAR;AAIAI,EAAAA,IAAI,CAAC,uBAAD,EAA0B,MAAM;AAClC,UAAMX,GAAG,GAAGJ,IAAI,CAACQ,OAAL,CAAaH,OAAO,CAACC,GAAR,EAAb,EAA4B,QAA5B,EAAsC,WAAtC,CAAZ;AACA,UAAMU,IAAI,GAAGnB,aAAa,CAACO,GAAD,CAA1B;AACAa,IAAAA,MAAM,CAACC,MAAM,CAACC,IAAP,CAAYH,IAAZ,CAAD,CAAN,CAA0BI,OAA1B,CAAkC,CAAC,WAAD,EAAc,MAAd,EAAsB,WAAtB,EAAmC,gBAAnC,CAAlC;AACD,GAJG,CAAJ;AAMAL,EAAAA,IAAI,CAAC,iDAAD,EAAoD,MAAM;AAC5D,UAAMX,GAAG,GAAGJ,IAAI,CAACQ,OAAL,CAAaH,OAAO,CAACC,GAAR,EAAb,EAA4B,QAA5B,EAAsC,WAAtC,EAAmD,MAAnD,CAAZ;AACA,UAAMU,IAAI,GAAGnB,aAAa,CAACO,GAAD,CAA1B;AACAa,IAAAA,MAAM,CAACD,IAAD,CAAN,CAAaI,OAAb,CAAqB,EAArB;AACD,GAJG,CAAJ;AAMAL,EAAAA,IAAI,CAAC,iDAAD,EAAoD,MAAM;AAC5D;AACA,UAAMM,gBAAgB,GAAGrB,IAAI,CAACsB,IAAL,CAAUV,gBAAV,EAA4B,SAA5B,CAAzB;AACAX,IAAAA,EAAE,CAACsB,aAAH,CAAiBF,gBAAjB,EAAmC,iBAAnC;AACAJ,IAAAA,MAAM,CAAC,MAAMpB,aAAa,CAACc,aAAD,CAApB,CAAN,CAA2Ca,YAA3C;AACD,GALG,CAAJ;AAMD,CAvBO,CAAR","sourcesContent":["const loadFunctions = require('../functions.load');\nconst del = require('del');\nconst path = require('path');\nconst fs = require('fs');\n\nconst getConfigDir = (prefix, dir = process.cwd()) => {\n  const configDir = path.resolve(dir, prefix ? `${prefix}-config` : 'config');\n  if (!fs.existsSync(configDir)) {\n    fs.mkdirSync(configDir);\n  }\n\n  return configDir;\n};\n\nconst testConfigDir = getConfigDir('functions-load-test');\nconst testConfigSubDir = getConfigDir('test', testConfigDir);\n\ndescribe('Load Functions', () => {\n  afterAll(async () => {\n    await del(testConfigDir);\n  });\n\n  test('Should load functions', () => {\n    const dir = path.resolve(process.cwd(), 'config', 'functions');\n    const resp = loadFunctions(dir);\n    expect(Object.keys(resp)).toEqual(['bootstrap', 'cron', 'responses', 'validator.load']);\n  });\n\n  test('Should return empty object if dir is not exists', () => {\n    const dir = path.resolve(process.cwd(), 'config', 'functions', 'test');\n    const resp = loadFunctions(dir);\n    expect(resp).toEqual({});\n  });\n\n  test('Should throw error when could not load function', () => {\n    // create file\n    const jsConfigFilePath = path.join(testConfigSubDir, 'test.js');\n    fs.writeFileSync(jsConfigFilePath, 'invalid data!!!');\n    expect(() => loadFunctions(testConfigDir)).toThrowError();\n  });\n});\n"]}