{"version":3,"sources":["policy.util.test.js"],"names":["get","createPolicyFactory","require","logger","createApp","initialize","Promise","resolve","describe","validator","jest","fn","global","sgApp","config","policies","api","auth","controllers","Object","services","passport","token","validators","user","routes","Array","__filename__","home","models","test","policy","apiName","resp","expect","toEqual","toThrow","factoryCallback","options","name","args","toHaveBeenCalledTimes"],"mappings":"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","sourcesContent":["const { get, createPolicyFactory } = require('../policy.util');\nconst logger = require('../logger.util');\nconst createApp = require('../../App');\n\nconst initialize = async () => {\n  // Create new app instance\n  // const appInstance = createApp();\n\n  // // start instance\n  // await appInstance.start().then(() => logger.info('App started'));\n\n  // console.log('app>> ', appInstance);\n  // return appInstance;\n  return Promise.resolve();\n};\n\ndescribe('Policy util', () => {\n  // let app;\n  // beforeAll(async () => {\n  //   console.log('Haha');\n  //   app = await initialize();\n  //   console.log('app>>> ', app.api);\n  // });\n\n  // afterAll(async () => {\n  //   app.server.destroy();\n  // });\n\n  const validator = jest.fn();\n\n  global.sgApp = {\n    config: { policies: { validator } },\n    api: {\n      auth: {\n        controllers: { auth: [Object], 'authenticated-user': [Object] },\n        services: { auth: [Object], passport: [Object], token: [Object] },\n        validators: { auth: [Object], user: [Object] },\n        config: { routes: [Array], __filename__: 'routes.json' },\n      },\n      home: {\n        controllers: { home: [Object] },\n        services: { home: [Object] },\n        config: { routes: [Array], __filename__: 'routes.json' },\n      },\n      user: { models: { user: [Object] }, services: { user: [Object] } },\n    },\n    // policies: {\n    //   isauthenticated: [Function(anonymous)],\n    //   validator: [AsyncFunction(anonymous)],\n    // },\n  };\n\n  describe('Get policy', () => {\n    test('should get policy', () => {\n      const policy = 'global::validator';\n      const apiName = 'auth';\n      const resp = get(policy, apiName);\n      expect(resp).toEqual(validator);\n    });\n\n    test('should throw error when could not find application policy', () => {\n      const policy = 'application::validator';\n      const apiName = 'auth';\n      expect(() => get(policy, apiName)).toThrow();\n    });\n\n    test('should throw error when could not find admin policy', () => {\n      const policy = 'admin::validator';\n      const apiName = 'auth';\n      expect(() => get(policy, apiName)).toThrow();\n    });\n\n    test('should throw error when could not find plugins policy', () => {\n      const policy = 'plugins::validator';\n      const apiName = 'auth';\n      expect(() => get(policy, apiName)).toThrow();\n    });\n  });\n\n  describe('Create policy factory', () => {\n    test('Should create policy factory', () => {\n      const factoryCallback = jest.fn();\n      const options = { validator: jest.fn(), name: 'home' };\n      const args = [];\n      createPolicyFactory(factoryCallback, options)(args);\n      expect(options.validator).toHaveBeenCalledTimes(1);\n      expect(factoryCallback).toHaveBeenCalledTimes(1);\n    });\n\n    test('Should throw error when create policy factory', () => {\n      const factoryCallback = jest.fn();\n      const options = { validator: 'home', name: 'home' };\n      const args = [];\n      expect(() =>\n        createPolicyFactory(factoryCallback, options)(args)\n      ).toThrow();\n    });\n  });\n});\n"]}