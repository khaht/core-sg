{"version":3,"sources":["index.test.js"],"names":["_","require","logger","firebaseConnector","describe","config","database","connections","default","connector","settings","client","serviceAccount","process","env","SERVICE_ACCOUNT_PATH","options","useNullAsDefault","defaultConnection","global","sgApp","log","get","path","defaultValue","set","val","has","test","initialize","expect","db","not","toBeNull","collection","jest","fn","mockImplementation","where","k","o","v","orderBy","limit","mockResolvedValue","data","id","name","kind","resp","find","conditions","email","order","toEqual","operators","doc","findOne","create","update","delete","toBeTruthy"],"mappings":"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","sourcesContent":["const _ = require('lodash');\nconst logger = require('../../../../utils/logger.util');\nconst firebaseConnector = require('../index');\n\ndescribe('Create database manager', () => {\n  const config = {\n    database: {\n      connections: {\n        default: {\n          connector: 'firebase',\n          settings: {\n            client: 'cloudfirestore',\n            serviceAccount:\n              process.env.SERVICE_ACCOUNT_PATH ||\n              '../firebase/serviceaccount.json',\n          },\n          options: {\n            useNullAsDefault: true,\n          },\n        },\n      },\n      defaultConnection: 'default',\n    },\n  };\n  global.sgApp = {\n    log: logger,\n    config: {\n      ...config,\n      get(path, defaultValue) {\n        return _.get(config, path, defaultValue);\n      },\n\n      set(path, val) {\n        _.set(config, path, val);\n        return this;\n      },\n\n      has(path) {\n        return _.has(config, path);\n      },\n    },\n  };\n\n  const connector = firebaseConnector();\n\n  test('Should initialize', () => {\n    connector.initialize();\n    expect(connector.db).not.toBeNull();\n  });\n\n  test('Should find item', async () => {\n    connector.db = {\n      collection: jest.fn().mockImplementation((collection) => ({\n        where: jest.fn().mockImplementation((k, o, v) => ({\n          orderBy: jest.fn().mockImplementation((k, v) => ({\n            limit: jest.fn().mockImplementation((v) => ({\n              get: jest.fn().mockResolvedValue([\n                {\n                  data() {\n                    return {\n                      id: '1234',\n                      name: 'ABCD',\n                      kind: 'find',\n                    };\n                  },\n                },\n              ]),\n            })),\n          })),\n        })),\n      })),\n    };\n\n    const resp = await connector.find('users', {\n      conditions: { email: 'test@gmail.com' },\n      order: { k: 'name', v: 'asc' },\n      limit: 1,\n    });\n    expect(resp).toEqual([{ id: '1234', name: 'ABCD', kind: 'find' }]);\n  });\n\n  test('Should find item with operation', async () => {\n    connector.db = {\n      collection: jest.fn().mockImplementation((collection) => ({\n        where: jest.fn().mockImplementation((k, o, v) => ({\n          orderBy: jest.fn().mockImplementation((k, v) => ({\n            limit: jest.fn().mockImplementation((v) => ({\n              get: jest.fn().mockResolvedValue([\n                {\n                  data() {\n                    return {\n                      id: '1234',\n                      name: 'ABCD',\n                      kind: 'find',\n                    };\n                  },\n                },\n              ]),\n            })),\n          })),\n        })),\n      })),\n    };\n\n    const resp = await connector.find('users', {\n      conditions: { email: 'test@gmail.com' },\n      order: { k: 'name', v: 'asc' },\n      operators: { email: '==' },\n      limit: 1,\n    });\n    expect(resp).toEqual([{ id: '1234', name: 'ABCD', kind: 'find' }]);\n  });\n\n  test('Should find item with query is empty', async () => {\n    connector.db = {\n      collection: jest.fn().mockImplementation((collection) => ({\n        get: jest.fn().mockResolvedValue([\n          {\n            data() {\n              return {\n                id: '1234',\n                name: 'ABCD',\n                kind: 'find',\n              };\n            },\n          },\n        ]),\n      })),\n    };\n\n    const resp = await connector.find('users');\n    expect(resp).toEqual([{ id: '1234', name: 'ABCD', kind: 'find' }]);\n  });\n\n  test('Should findOne item', async () => {\n    connector.db = {\n      collection: jest.fn().mockImplementation((collection) => ({\n        doc: jest.fn().mockImplementation((id) => ({\n          get: jest.fn().mockResolvedValue({\n            data() {\n              return {\n                id: '1234',\n                name: 'ABCD',\n                kind: 'findOne',\n              };\n            },\n          }),\n        })),\n      })),\n    };\n\n    const resp = await connector.findOne('users', '1234');\n    expect(resp).toEqual({ id: '1234', name: 'ABCD', kind: 'findOne' });\n  });\n\n  test('Should create item', async () => {\n    connector.db = {\n      collection: jest.fn().mockImplementation((collection) => ({\n        doc: jest.fn().mockImplementation((id) => ({\n          set: jest\n            .fn()\n            .mockResolvedValue({ id: '1234', name: 'ABCD', kind: 'create' }),\n        })),\n      })),\n    };\n\n    const resp = await connector.create('users', { name: 'ABCD' }, '1234');\n    expect(resp).toEqual({ id: '1234', name: 'ABCD', kind: 'create' });\n  });\n\n  test('Should update item', async () => {\n    connector.db = {\n      collection: jest.fn().mockImplementation((collection) => ({\n        doc: jest.fn().mockImplementation((id) => ({\n          set: jest\n            .fn()\n            .mockResolvedValue({ id: '1234', name: 'ABCD', kind: 'update' }),\n        })),\n      })),\n    };\n\n    const resp = await connector.update('users', { name: 'ABCD' }, '1234');\n    expect(resp).toEqual({ id: '1234', name: 'ABCD', kind: 'update' });\n  });\n\n  test('Should delete item', async () => {\n    connector.db = {\n      collection: jest.fn().mockImplementation((collection) => ({\n        doc: jest.fn().mockImplementation((id) => ({\n          delete: jest.fn().mockResolvedValue(true),\n        })),\n      })),\n    };\n\n    const resp = await connector.delete('users', '1234');\n    expect(resp).toBeTruthy();\n  });\n});\n"]}