{"version":3,"sources":["router.utils.routerChecker.test.js"],"names":["mock","routerChecker","require","logger","_","initializeApp","global","sgApp","log","stopWithError","jest","fn","Error","controllers","auth","login","identity","api","config","routes","method","path","handler","policies","validator","describe","beforeEach","test","policyUtils","globalPolicy","get","route","resp","expect","Object","keys","toEqual","error","message","toBe","undefined"],"mappings":"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","sourcesContent":["const routerChecker = require('../router/utils/routerChecker');\nconst logger = require('utils/logger.util');\nconst _ = require('lodash');\n\njest.mock('utils/policy.util');\n\nconst initializeApp = () => {\n  global.sgApp = {\n    log: logger,\n    stopWithError: jest.fn(() => {\n      throw new Error('error');\n    }),\n    controllers: { auth: { login: jest.fn(), identity: 'Auth' } },\n    api: {\n      auth: {\n        controllers: {\n          auth: {\n            identity: 'Auth',\n            log: {},\n          },\n        },\n        config: {\n          routes: [\n            {\n              method: 'POST',\n              path: '/login',\n              handler: 'auth.login',\n              config: {\n                policies: ['global::validator'],\n                validator: 'validateLoginUserInput',\n              },\n            },\n          ],\n        },\n      },\n    },\n  };\n};\n\ndescribe('Router checker', () => {\n  beforeEach(() => {\n    initializeApp();\n  });\n  test('should return router', () => {\n    const policyUtils = require('utils/policy.util');\n    policyUtils.globalPolicy = jest.fn(() => 'globalPolicy');\n    policyUtils.get = jest.fn(() => 'policyUtils');\n\n    const route = {\n      method: 'POST',\n      path: '/login',\n      handler: 'auth.login',\n      config: {\n        policies: ['global::validator'],\n        validator: 'validateLoginUserInput',\n      },\n    };\n\n    const resp = routerChecker(sgApp)(route);\n    expect(Object.keys(resp)).toEqual([\n      'method',\n      'endpoint',\n      'policies',\n      'action',\n    ]);\n  });\n\n  test('should throw error if controller is not found', () => {\n    const policyUtils = require('utils/policy.util');\n    policyUtils.globalPolicy = jest.fn(() => 'globalPolicy');\n    policyUtils.get = jest.fn(() => 'policyUtils');\n\n    sgApp.controllers = {};\n    const route = {\n      method: 'POST',\n      path: '/login',\n      handler: 'auth.login',\n      config: {\n        policies: ['global::validator'],\n        validator: 'validateLoginUserInput',\n      },\n    };\n\n    try {\n      routerChecker(sgApp)(route);\n    } catch (error) {\n      expect(error.message).toBe('error');\n    }\n  });\n\n  test('should throw error if action controller is not function', () => {\n    const policyUtils = require('utils/policy.util');\n    policyUtils.globalPolicy = jest.fn(() => 'globalPolicy');\n    policyUtils.get = jest.fn(() => 'policyUtils');\n\n    sgApp.controllers = { auth: { login: 'login', identity: 'Auth' } };\n\n    const route = {\n      method: 'POST',\n      path: '/login',\n      handler: 'auth.login',\n      config: {\n        policies: ['global::validator'],\n        validator: 'validateLoginUserInput',\n      },\n    };\n\n    try {\n      routerChecker(sgApp)(route);\n    } catch (error) {\n      expect(error.message).toBe('error');\n    }\n  });\n\n  test('should throw error if create endpoint fail', () => {\n    const policyUtils = require('utils/policy.util');\n    policyUtils.globalPolicy = jest.fn(() => 'globalPolicy');\n    policyUtils.get = jest.fn(() => {\n      throw new Error('error');\n    });\n\n    const route = {\n      method: 'POST',\n      path: '/login',\n      handler: 'auth.login',\n      config: {\n        policies: 'global::validator',\n        validator: 'validateLoginUserInput',\n      },\n    };\n\n    try {\n      routerChecker(sgApp)(route);\n    } catch (error) {\n      expect(error.message).toBe('error');\n    }\n  });\n\n  test('should not get policy util if config policies is undefined ', () => {\n    const policyUtils = require('utils/policy.util');\n    policyUtils.globalPolicy = jest.fn(() => 'globalPolicy');\n    policyUtils.get = jest.fn(() => {\n      throw new Error('error');\n    });\n\n    const route = {\n      method: 'POST',\n      path: '/login',\n      handler: 'auth.login',\n      config: {\n        policies: undefined,\n        validator: 'validateLoginUserInput',\n      },\n    };\n\n    const resp = routerChecker(sgApp)(route);\n    expect(Object.keys(resp)).toEqual([\n      'method',\n      'endpoint',\n      'policies',\n      'action',\n    ]);\n  });\n});\n"]}