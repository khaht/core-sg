db694fbb603972ae21502b728154c472
const _ = require('lodash');

const admin = require('firebase-admin');

module.exports = () => ({
  db: null,

  initialize() {
    const serviceAccount = sgApp.config.get('database.connections');
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount.default.settings.serviceAccount)
    });
    this.db = admin.firestore();
    return this;
  },

  parseSnapshots(snapshots) {
    const data = [];
    snapshots.forEach(doc => {
      data.push(doc.data());
    });
    return data;
  },

  find(collection, query = {}) {
    const {
      conditions,
      operators,
      order,
      limit
    } = query;
    let ref = this.db.collection(collection);

    if (!_.isEmpty(conditions)) {
      const keys = Object.keys(conditions);
      keys.forEach(key => {
        const o = operators && operators[key] || '==';
        ref = ref.where(key, o, conditions[key]);
      });
    }

    if (order) {
      ref = ref.orderBy(order.k, order.v);
    }

    if (limit) {
      ref = ref.limit(limit);
    }

    return ref.get().then(this.parseSnapshots);
  },

  findOne(collection, id) {
    return this.db.collection(collection).doc(id).get().then(snapshot => snapshot.data());
  },

  create(collection, data, id) {
    const c = this.db.collection(collection);
    const ref = c.doc(id);
    return ref.set(data);
  },

  update(collection, data, id) {
    const c = this.db.collection(collection);
    const ref = c.doc(id);
    return ref.set(data, {
      merge: true
    });
  },

  delete(collection, id) {
    return this.db.collection(collection).doc(id).delete();
  }

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiYWRtaW4iLCJtb2R1bGUiLCJleHBvcnRzIiwiZGIiLCJpbml0aWFsaXplIiwic2VydmljZUFjY291bnQiLCJzZ0FwcCIsImNvbmZpZyIsImdldCIsImluaXRpYWxpemVBcHAiLCJjcmVkZW50aWFsIiwiY2VydCIsImRlZmF1bHQiLCJzZXR0aW5ncyIsImZpcmVzdG9yZSIsInBhcnNlU25hcHNob3RzIiwic25hcHNob3RzIiwiZGF0YSIsImZvckVhY2giLCJkb2MiLCJwdXNoIiwiZmluZCIsImNvbGxlY3Rpb24iLCJxdWVyeSIsImNvbmRpdGlvbnMiLCJvcGVyYXRvcnMiLCJvcmRlciIsImxpbWl0IiwicmVmIiwiaXNFbXB0eSIsImtleXMiLCJPYmplY3QiLCJrZXkiLCJvIiwid2hlcmUiLCJvcmRlckJ5IiwiayIsInYiLCJ0aGVuIiwiZmluZE9uZSIsImlkIiwic25hcHNob3QiLCJjcmVhdGUiLCJjIiwic2V0IiwidXBkYXRlIiwibWVyZ2UiLCJkZWxldGUiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLENBQUMsR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBakI7O0FBQ0EsTUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsZ0JBQUQsQ0FBckI7O0FBRUFFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixPQUFPO0FBQ3RCQyxFQUFBQSxFQUFFLEVBQUUsSUFEa0I7O0FBR3RCQyxFQUFBQSxVQUFVLEdBQUc7QUFDWCxVQUFNQyxjQUFjLEdBQUdDLEtBQUssQ0FBQ0MsTUFBTixDQUFhQyxHQUFiLENBQWlCLHNCQUFqQixDQUF2QjtBQUVBUixJQUFBQSxLQUFLLENBQUNTLGFBQU4sQ0FBb0I7QUFDbEJDLE1BQUFBLFVBQVUsRUFBRVYsS0FBSyxDQUFDVSxVQUFOLENBQWlCQyxJQUFqQixDQUNWTixjQUFjLENBQUNPLE9BQWYsQ0FBdUJDLFFBQXZCLENBQWdDUixjQUR0QjtBQURNLEtBQXBCO0FBTUEsU0FBS0Ys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LEdBL0RxQjs7QUFpRXRCQyxFQUFBQSxNQUFNLENBQUN6QixVQUFELEVBQWFrQixFQUFiLEVBQWlCO0FBQ3JCLFdBQU8sS0FBS3JDLEVBQUwsQ0FBUW1CLFVBQVIsQ0FBbUJBLFVBQW5CLEVBQStCSCxHQUEvQixDQUFtQ3FCLEVBQW5DLEVBQXVDTyxNQUF2QyxFQUFQO0FBQ0Q7O0FBbkVxQixDQUFQLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuY29uc3QgYWRtaW4gPSByZXF1aXJlKCdmaXJlYmFzZS1hZG1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+ICh7XG4gIGRiOiBudWxsLFxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgY29uc3Qgc2VydmljZUFjY291bnQgPSBzZ0FwcC5jb25maWcuZ2V0KCdkYXRhYmFzZS5jb25uZWN0aW9ucycpO1xuXG4gICAgYWRtaW4uaW5pdGlhbGl6ZUFwcCh7XG4gICAgICBjcmVkZW50aWFsOiBhZG1pbi5jcmVkZW50aWFsLmNlcnQoXG4gICAgICAgIHNlcnZpY2VBY2NvdW50LmRlZmF1bHQuc2V0dGluZ3Muc2VydmljZUFjY291bnRcbiAgICAgICksXG4gICAgfSk7XG5cbiAgICB0aGlzLmRiID0gYWRtaW4uZmlyZXN0b3JlKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgcGFyc2VTbmFwc2hvdHMoc25hcHNob3RzKSB7XG4gICAgY29uc3QgZGF0YSA9IFtdO1xuICAgIHNuYXBzaG90cy5mb3JFYWNoKChkb2MpID0+IHtcbiAgICAgIGRhdGEucHVzaChkb2MuZGF0YSgpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfSxcblxuICBmaW5kKGNvbGxlY3Rpb24sIHF1ZXJ5ID0ge30pIHtcbiAgICBjb25zdCB7IGNvbmRpdGlvbnMsIG9wZXJhdG9ycywgb3JkZXIsIGxpbWl0IH0gPSBxdWVyeTtcbiAgICBsZXQgcmVmID0gdGhpcy5kYi5jb2xsZWN0aW9uKGNvbGxlY3Rpb24pO1xuXG4gICAgaWYgKCFfLmlzRW1wdHkoY29uZGl0aW9ucykpIHtcbiAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhjb25kaXRpb25zKTtcbiAgICAgIGtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IG8gPSAob3BlcmF0b3JzICYmIG9wZXJhdG9yc1trZXldKSB8fCAnPT0nO1xuICAgICAgICByZWYgPSByZWYud2hlcmUoa2V5LCBvLCBjb25kaXRpb25zW2tleV0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChvcmRlcikge1xuICAgICAgcmVmID0gcmVmLm9yZGVyQnkob3JkZXIuaywgb3JkZXIudik7XG4gICAgfVxuICAgIGlmIChsaW1pdCkge1xuICAgICAgcmVmID0gcmVmLmxpbWl0KGxpbWl0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVmLmdldCgpLnRoZW4odGhpcy5wYXJzZVNuYXBzaG90cyk7XG4gIH0sXG5cbiAgZmluZE9uZShjb2xsZWN0aW9uLCBpZCkge1xuICAgIHJldHVybiB0aGlzLmRiXG4gICAgICAuY29sbGVjdGlvbihjb2xsZWN0aW9uKVxuICAgICAgLmRvYyhpZClcbiAgICAgIC5nZXQoKVxuICAgICAgLnRoZW4oKHNuYXBzaG90KSA9PiBzbmFwc2hvdC5kYXRhKCkpO1xuICB9LFxuXG4gIGNyZWF0ZShjb2xsZWN0aW9uLCBkYXRhLCBpZCkge1xuICAgIGNvbnN0IGMgPSB0aGlzLmRiLmNvbGxlY3Rpb24oY29sbGVjdGlvbik7XG4gICAgY29uc3QgcmVmID0gYy5kb2MoaWQpO1xuICAgIHJldHVybiByZWYuc2V0KGRhdGEpO1xuICB9LFxuXG4gIHVwZGF0ZShjb2xsZWN0aW9uLCBkYXRhLCBpZCkge1xuICAgIGNvbnN0IGMgPSB0aGlzLmRiLmNvbGxlY3Rpb24oY29sbGVjdGlvbik7XG4gICAgY29uc3QgcmVmID0gYy5kb2MoaWQpO1xuICAgIHJldHVybiByZWYuc2V0KGRhdGEsIHsgbWVyZ2U6IHRydWUgfSk7XG4gIH0sXG5cbiAgZGVsZXRlKGNvbGxlY3Rpb24sIGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuZGIuY29sbGVjdGlvbihjb2xsZWN0aW9uKS5kb2MoaWQpLmRlbGV0ZSgpO1xuICB9LFxufSk7XG4iXX0=