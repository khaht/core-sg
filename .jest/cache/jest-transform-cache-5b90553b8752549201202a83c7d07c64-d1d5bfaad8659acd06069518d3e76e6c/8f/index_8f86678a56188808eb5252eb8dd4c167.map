{"version":3,"sources":["index.js"],"names":["_","require","admin","module","exports","db","initialize","serviceAccount","sgApp","config","get","initializeApp","credential","cert","default","settings","firestore","parseSnapshots","snapshots","data","forEach","doc","push","find","collection","query","conditions","operators","order","limit","ref","isEmpty","keys","Object","key","o","where","orderBy","k","v","then","findOne","id","snapshot","create","c","set","update","merge","delete"],"mappings":"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","sourcesContent":["const _ = require('lodash');\nconst admin = require('firebase-admin');\n\nmodule.exports = () => ({\n  db: null,\n\n  initialize() {\n    const serviceAccount = sgApp.config.get('database.connections');\n\n    admin.initializeApp({\n      credential: admin.credential.cert(\n        serviceAccount.default.settings.serviceAccount\n      ),\n    });\n\n    this.db = admin.firestore();\n    return this;\n  },\n\n  parseSnapshots(snapshots) {\n    const data = [];\n    snapshots.forEach((doc) => {\n      data.push(doc.data());\n    });\n    return data;\n  },\n\n  find(collection, query = {}) {\n    const { conditions, operators, order, limit } = query;\n    let ref = this.db.collection(collection);\n\n    if (!_.isEmpty(conditions)) {\n      const keys = Object.keys(conditions);\n      keys.forEach((key) => {\n        const o = (operators && operators[key]) || '==';\n        ref = ref.where(key, o, conditions[key]);\n      });\n    }\n    if (order) {\n      ref = ref.orderBy(order.k, order.v);\n    }\n    if (limit) {\n      ref = ref.limit(limit);\n    }\n\n    return ref.get().then(this.parseSnapshots);\n  },\n\n  findOne(collection, id) {\n    return this.db\n      .collection(collection)\n      .doc(id)\n      .get()\n      .then((snapshot) => snapshot.data());\n  },\n\n  create(collection, data, id) {\n    const c = this.db.collection(collection);\n    const ref = c.doc(id);\n    return ref.set(data);\n  },\n\n  update(collection, data, id) {\n    const c = this.db.collection(collection);\n    const ref = c.doc(id);\n    return ref.set(data, { merge: true });\n  },\n\n  delete(collection, id) {\n    return this.db.collection(collection).doc(id).delete();\n  },\n});\n"]}