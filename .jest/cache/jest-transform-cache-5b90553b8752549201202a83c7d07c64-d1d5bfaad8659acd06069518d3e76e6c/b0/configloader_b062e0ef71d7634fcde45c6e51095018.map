{"version":3,"sources":["config-loader.js"],"names":["path","require","fs","env","templateConfiguration","loadJsFile","file","jsModule","error","Error","message","loadJSONFile","JSON","parse","readFileSync","loadFile","ext","extname","loadFileEx","module","exports","dir","existsSync","readdirSync","withFileTypes","filter","isFile","reduce","acc","key","basename","name","resolve"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,UAAD,CAAnB;;AACA,MAAMG,qBAAqB,GAAGH,OAAO,CAAC,sCAAD,CAArC;;AAEA,MAAMI,UAAU,GAAIC,IAAD,IAAU;AAC3B,MAAI;AACF,UAAMC,QAAQ,GAAGN,OAAO,CAACK,IAAD,CAAxB,CADE,CAGF;;;AACA,QAAI,OAAOC,QAAP,KAAoB,UAAxB,EAAoC;AAClC,aAAOA,QAAQ,CAAC;AAAEJ,QAAAA;AAAF,OAAD,CAAf;AACD;;AAED,WAAOI,QAAP;AACD,GATD,CASE,OAAOC,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,CAAW,iCAAgCH,IAAK,KAAIE,KAAK,CAACE,OAAQ,EAAlE,CAAN;AACD;AACF,CAbD;;AAeA,MAAMC,YAAY,GAAIL,IAAD,IAAU;AAC7B,MAAI;AACF,WAAOF,qBAAqB,CAACQ,IAAI,CAACC,KAAL,CAAWX,EAAE,CAACY,YAAH,CAAgBR,IAAhB,CAAX,CAAD,CAA5B;AACD,GAFD,CAEE,OAAOE,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,CAAW,mCAAkCH,IAAK,KAAIE,KAAK,CAACE,OAAQ,EAApE,CAAN;AACD;AACF,CAND;;AAQA,MAAMK,QAAQ,GAAIT,IAAD,IAAU;AACzB,QAAMU,GAAG,GAAGhB,IAAI,CAACiB,OAAL,CAAaX,IAAb,CAAZ;AAEA,QAAMY,UAAU,GAAG;AACjB,WAAOb,UADU;AAEjB,aAASM;AAFQ,GAAnB;;AAKA,MAAI,CAACO,UAAU,CAACF,GAAD,CAAf,EAAsB;AACpB,WAAO,EAAP;AACD;;AAED,SAAOE,UAAU,CAACF,GAAD,CAAV,CAAgBV,IAAhB,CAAP;AACD,CAbD;;AAeAa,MAAM,CAACC,OAAP,GAAkBC,GAAD,IAAS;AACxB,MAAI,CAACnB,EAAE,CAACoB,UAAH,CAAcD,GAAd,CAAL,EAAyB,OAAO,EAAP;AAEzB,SAAOnB,EAAE,CACNqB,WADI,CACQF,GADR,EACa;AAAEG,IAAAA,aAAa,EAAE;AAAjB,GADb,EAEJC,MAFI,CAEInB,IAAD,IAAUA,IAAI,CAACoB,MAAL,EAFb,EAGJC,MAHI,CAGG,CAACC,GAAD,EAAMtB,IAAN,KAAe;AACrB,UAAMuB,GAAG,GAAG7B,IAAI,CAAC8B,QAAL,CAAcxB,IAAI,CAACyB,IAAnB,EAAyB/B,IAAI,CAACiB,OAAL,CAAaX,IAAI,CAACyB,IAAlB,CAAzB,CAAZ;AAEAH,IAAAA,GAAG,CAACC,GAAD,CAAH,GAAWd,QAAQ,CAACf,IAAI,CAACgC,OAAL,CAAaX,GAAb,EAAkBf,IAAI,CAACyB,IAAvB,CAAD,CAAnB;AAEA,WAAOH,GAAP;AACD,GATI,EASF,EATE,CAAP;AAUD,CAbD","sourcesContent":["const path = require('path');\nconst fs = require('fs');\nconst env = require('@ltv/env');\nconst templateConfiguration = require('../utils/template-configuration.util');\n\nconst loadJsFile = (file) => {\n  try {\n    const jsModule = require(file);\n\n    // call if function\n    if (typeof jsModule === 'function') {\n      return jsModule({ env });\n    }\n\n    return jsModule;\n  } catch (error) {\n    throw new Error(`Could not load js config file ${file}: ${error.message}`);\n  }\n};\n\nconst loadJSONFile = (file) => {\n  try {\n    return templateConfiguration(JSON.parse(fs.readFileSync(file)));\n  } catch (error) {\n    throw new Error(`Could not load json config file ${file}: ${error.message}`);\n  }\n};\n\nconst loadFile = (file) => {\n  const ext = path.extname(file);\n\n  const loadFileEx = {\n    '.js': loadJsFile,\n    '.json': loadJSONFile,\n  };\n\n  if (!loadFileEx[ext]) {\n    return {};\n  }\n\n  return loadFileEx[ext](file);\n};\n\nmodule.exports = (dir) => {\n  if (!fs.existsSync(dir)) return {};\n\n  return fs\n    .readdirSync(dir, { withFileTypes: true })\n    .filter((file) => file.isFile())\n    .reduce((acc, file) => {\n      const key = path.basename(file.name, path.extname(file.name));\n\n      acc[key] = loadFile(path.resolve(dir, file.name));\n\n      return acc;\n    }, {});\n};\n"]}