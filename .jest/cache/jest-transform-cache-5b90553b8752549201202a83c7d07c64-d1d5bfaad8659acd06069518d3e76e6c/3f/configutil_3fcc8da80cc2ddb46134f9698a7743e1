6dac11482805ec9f209de9dc78c65858
const _ = require('lodash');

const getConfigUrls = serverConfig => {
  // Defines serverUrl value
  let serverUrl = _.get(serverConfig, 'url', '');

  serverUrl = _.trim(serverUrl, '/ ');

  if (typeof serverUrl !== 'string') {
    throw new Error('Invalid server url config. Make sure the url is a string.');
  }

  if (serverUrl.startsWith('http')) {
    try {
      serverUrl = _.trim(new URL(serverConfig.url).toString(), '/');
    } catch (e) {
      throw new Error('Invalid server url config. Make sure the url defined in server.js is valid.');
    }
  } else if (serverUrl !== '') {
    serverUrl = `/${serverUrl}`;
  }

  return {
    serverUrl
  };
};

const getAbsoluteUrl = adminOrServer => (config, forAdminBuild = false) => {
  const {
    serverUrl,
    adminUrl
  } = getConfigUrls(config.server, forAdminBuild);
  const url = adminOrServer === 'server' ? serverUrl : adminUrl;

  if (url.startsWith('http')) {
    return url;
  }

  const hostname = config.environment === 'development' && ['127.0.0.1', '0.0.0.0'].includes(config.server.host) ? 'localhost' : config.server.host;
  return `http://${hostname}:${config.server.port}${url}`;
};

module.exports = {
  getConfigUrls,
  getAbsoluteServerUrl: getAbsoluteUrl('server')
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy51dGlsLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiZ2V0Q29uZmlnVXJscyIsInNlcnZlckNvbmZpZyIsInNlcnZlclVybCIsImdldCIsInRyaW0iLCJFcnJvciIsInN0YXJ0c1dpdGgiLCJVUkwiLCJ1cmwiLCJ0b1N0cmluZyIsImUiLCJnZXRBYnNvbHV0ZVVybCIsImFkbWluT3JTZXJ2ZXIiLCJjb25maWciLCJmb3JBZG1pbkJ1aWxkIiwiYWRtaW5VcmwiLCJzZXJ2ZXIiLCJob3N0bmFtZSIsImVudmlyb25tZW50IiwiaW5jbHVkZXMiLCJob3N0IiwicG9ydCIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRBYnNvbHV0ZVNlcnZlclVybCJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsQ0FBQyxHQUFHQyxPQUFPLENBQUMsUUFBRCxDQUFqQjs7QUFFQSxNQUFNQyxhQUFhLEdBQUlDLFlBQUQsSUFBa0I7QUFDdEM7QUFDQSxNQUFJQyxTQUFTLEdBQUdKLENBQUMsQ0FBQ0ssR0FBRixDQUFNRixZQUFOLEVBQW9CLEtBQXBCLEVBQTJCLEVBQTNCLENBQWhCOztBQUNBQyxFQUFBQSxTQUFTLEdBQUdKLENBQUMsQ0FBQ00sSUFBRixDQUFPRixTQUFQLEVBQWtCLElBQWxCLENBQVo7O0FBQ0EsTUFBSSxPQUFPQSxTQUFQLEtBQXFCLFFBQXpCLEVBQW1DO0FBQ2pDLFVBQU0sSUFBSUcsS0FBSixDQUNKLDJEQURJLENBQU47QUFHRDs7QUFDRCxNQUFJSCxTQUFTLENBQUNJLFVBQVYsQ0FBcUIsTUFBckIsQ0FBSixFQUFrQztBQUNoQyxRQUFJO0FBQ0ZKLE1BQUFBLFNBQVMsR0FBR0osQ0FBQyxDQUFDTSxJQUFGLENBQU8sSUFBSUcsR0FBSixDQUFRTixZQUFZLENBQUNPLEdBQXJCLEVBQTBCQyxRQUExQixFQUFQLEVBQTZDLEdBQTdDLENBQVo7QUFDRCxLQUZELENBRUUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1YsWUFBTSxJQUFJTCxLQUFKLENBQ0osNkVBREksQ0FBTjtBQUdEO0FBQ0YsR0FSRCxNQVFPLElBQUlILFNBQVMsS0FBSyxFQUFsQixFQUFzQjtBQUMzQkEsSUFBQUEsU0FBUyxHQUFJLElBQUdBLFNBQVUsRUFBMUI7QUFDRDs7QUFFRCxTQUFPO0FBQ0xBLElBQUFBO0FBREssR0FBUDtBQUdELENBeEJEOztBQTBCQSxNQUFNUyxjQUFjLEdBQUlDLGFBQUQsSUFBbUIsQ0FBQ0MsTUFBRCxFQUFTQyxhQUFhLEdBQUcsS0FBekIsS0FBbUM7QUFDM0UsUUFBTTtBQUFFWixJQUFBQSxTQUFGO0FBQWFhLElBQUFBO0FBQWIsTUFBMEJmLGFBQWEsQ0FBQ2EsTUFBTSxDQUFDRyxNQUFSLEVBQWdCRixhQUFoQixDQUE3QztBQUNBLFFBQU1OLEdBQUcsR0FBR0ksYUFBYSxLQUFLLFFBQWxCLEdBQTZCVixTQUE3QixHQUF5Q2EsUUFBckQ7O0FBRUEsTUFBSVAsR0FBRyxDQUFDRixVQUFKLENBQWUsTUFBZixDQUFKLEVBQTRCO0FBQzFCLFdBQU9FLEdBQVA7QUFDRDs7QUFFRCxRQUFNUyxRQUFRLEdBQ1pKLE1BQU0sQ0FBQ0ssV0FBUCxLQUF1QixhQUF2QixJQUNBLENBQUMsV0FBRCxFQUFjLFNBQWQsRUFBeUJDLFFBQXpCLENBQWtDTixNQUFNLENBQUNHLE1BQVAsQ0FBY0ksSUFBaEQsQ0FEQSxHQUVJLFdBRkosR0FHSVAsTUFBTSxDQUFDRyxNQUFQLENBQWNJLElBSnBCO0FBTUEsU0FBUSxVQUFTSCxRQUFTLElBQUdKLE1BQU0sQ0FBQ0csTUFBUCxDQUFjSyxJQUFLLEdBQUViLEdBQUksRUFBdEQ7QUFDRCxDQWZEOztBQWlCQWMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2Z2QixFQUFBQSxhQURlO0FBRWZ3QixFQUFBQSxvQkFBb0IsRUFBRWIsY0FBYyxDQUFDLFFBQUQ7QUFGckIsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5cbmNvbnN0IGdldENvbmZpZ1VybHMgPSAoc2VydmVyQ29uZmlnKSA9PiB7XG4gIC8vIERlZmluZXMgc2VydmVyVXJsIHZhbHVlXG4gIGxldCBzZXJ2ZXJVcmwgPSBfLmdldChzZXJ2ZXJDb25maWcsICd1cmwnLCAnJyk7XG4gIHNlcnZlclVybCA9IF8udHJpbShzZXJ2ZXJVcmwsICcvICcpO1xuICBpZiAodHlwZW9mIHNlcnZlclVybCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnSW52YWxpZCBzZXJ2ZXIgdXJsIGNvbmZpZy4gTWFrZSBzdXJlIHRoZSB1cmwgaXMgYSBzdHJpbmcuJ1xuICAgICk7XG4gIH1cbiAgaWYgKHNlcnZlclVybC5zdGFydHNXaXRoKCdodHRwJykpIHtcbiAgICB0cnkge1xuICAgICAgc2VydmVyVXJsID0gXy50cmltKG5ldyBVUkwoc2VydmVyQ29uZmlnLnVybCkudG9TdHJpbmcoKSwgJy8nKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJbnZhbGlkIHNlcnZlciB1cmwgY29uZmlnLiBNYWtlIHN1cmUgdGhlIHVybCBkZWZpbmVkIGluIHNlcnZlci5qcyBpcyB2YWxpZC4nXG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIGlmIChzZXJ2ZXJVcmwgIT09ICcnKSB7XG4gICAgc2VydmVyVXJsID0gYC8ke3NlcnZlclVybH1gO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXJ2ZXJVcmwsXG4gIH07XG59O1xuXG5jb25zdCBnZXRBYnNvbHV0ZVVybCA9IChhZG1pbk9yU2VydmVyKSA9PiAoY29uZmlnLCBmb3JBZG1pbkJ1aWxkID0gZmFsc2UpID0+IHtcbiAgY29uc3QgeyBzZXJ2ZXJVcmwsIGFkbWluVXJsIH0gPSBnZXRDb25maWdVcmxzKGNvbmZpZy5zZXJ2ZXIsIGZvckFkbWluQnVpbGQpO1xuICBjb25zdCB1cmwgPSBhZG1pbk9yU2VydmVyID09PSAnc2VydmVyJyA/IHNlcnZlclVybCA6IGFkbWluVXJsO1xuXG4gIGlmICh1cmwuc3RhcnRzV2l0aCgnaHR0cCcpKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIGNvbnN0IGhvc3RuYW1lID1cbiAgICBjb25maWcuZW52aXJvbm1lbnQgPT09ICdkZXZlbG9wbWVudCcgJiZcbiAgICBbJzEyNy4wLjAuMScsICcwLjAuMC4wJ10uaW5jbHVkZXMoY29uZmlnLnNlcnZlci5ob3N0KVxuICAgICAgPyAnbG9jYWxob3N0J1xuICAgICAgOiBjb25maWcuc2VydmVyLmhvc3Q7XG5cbiAgcmV0dXJuIGBodHRwOi8vJHtob3N0bmFtZX06JHtjb25maWcuc2VydmVyLnBvcnR9JHt1cmx9YDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25maWdVcmxzLFxuICBnZXRBYnNvbHV0ZVNlcnZlclVybDogZ2V0QWJzb2x1dGVVcmwoJ3NlcnZlcicpLFxufTtcbiJdfQ==