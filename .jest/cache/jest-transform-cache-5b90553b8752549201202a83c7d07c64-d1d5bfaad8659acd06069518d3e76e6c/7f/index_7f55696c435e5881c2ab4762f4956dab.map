{"version":3,"sources":["index.js"],"names":["path","require","_","dotenv","env","config","process","ENV_PATH","nodeEnv","getPrefixedDeps","loadPolicies","loadFunctions","loadConfigDir","createConfigProvider","version","appVersion","join","__dirname","CONFIG_PATHS","modules","plugins","policies","tmp","defaultConfig","server","host","port","proxy","cron","enabled","autoOpen","admin","middleware","timeout","load","before","order","after","settings","routes","functions","module","exports","dir","initialConfig","appDir","cwd","pkgJSON","resolve","configDir","rootConfig","launchedAt","Date","now","appPath","paths","environment","uuid","get","template","info","installedPlugins","installedMiddlewares","baseConfig","envDir","envConfig","merge"],"mappings":"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","sourcesContent":["const path = require('path');\nconst _ = require('lodash');\nconst dotenv = require('dotenv');\nconst env = require('@ltv/env');\n\ndotenv.config({ path: process.env.ENV_PATH || 'local.env' });\n\nconst nodeEnv = env('NODE_ENV', 'development');\n\nconst getPrefixedDeps = require('../utils/get-prefixed-dependencies.util');\nconst loadPolicies = require('../loader/policies.load');\nconst loadFunctions = require('../loader/functions.load');\nconst loadConfigDir = require('./config-loader');\nconst createConfigProvider = require('./config-provider');\n\nconst { version: appVersion } = require(path.join(\n  __dirname,\n  '../../package.json'\n));\n\nconst CONFIG_PATHS = {\n  modules: 'modules',\n  config: 'config',\n  plugins: 'plugins',\n  policies: 'policies',\n  tmp: '.tmp',\n};\n\nconst defaultConfig = {\n  server: {\n    host: env('HOST', 'localhost'),\n    port: env('PORT', 4000),\n    proxy: false,\n    cron: { enabled: false },\n    autoOpen: false,\n  },\n  admin: {},\n  middleware: {\n    timeout: 1000,\n    load: {\n      before: ['responseTime', 'logger', 'cors', 'responses', 'gzip'],\n      order: [],\n      after: ['parser', 'router'],\n    },\n    settings: {},\n  },\n  routes: {},\n  functions: {},\n  policies: {},\n};\n\nmodule.exports = (dir, initialConfig = {}) => {\n  const appDir = dir || process.cwd();\n  const pkgJSON = require(path.resolve(appDir, 'package.json'));\n\n  const configDir = path.resolve(appDir, 'config');\n\n  const rootConfig = {\n    launchedAt: Date.now(),\n    appPath: appDir,\n    paths: CONFIG_PATHS,\n    environment: nodeEnv,\n    uuid: _.get(pkgJSON, 'app.uuid'),\n    template: _.get(pkgJSON, 'app.template'),\n    info: {\n      ...pkgJSON,\n      appVersion,\n    },\n    installedPlugins: getPrefixedDeps('@social-gear/middleware', pkgJSON),\n    installedMiddlewares: getPrefixedDeps('@social-gear/middleware', pkgJSON),\n    ...initialConfig,\n  };\n\n  const baseConfig = {\n    ...loadConfigDir(configDir),\n    policies: loadPolicies(path.resolve(configDir, 'policies')),\n    functions: loadFunctions(path.resolve(configDir, 'functions')),\n  };\n\n  const envDir = path.resolve(configDir, 'env', nodeEnv);\n  const envConfig = loadConfigDir(envDir);\n\n  return createConfigProvider(\n    _.merge(rootConfig, defaultConfig, baseConfig, envConfig)\n  );\n};\n"]}