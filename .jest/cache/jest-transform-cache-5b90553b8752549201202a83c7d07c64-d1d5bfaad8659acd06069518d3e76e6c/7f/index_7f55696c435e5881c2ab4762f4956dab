f8e8fb65f5e7afee42e66e17f1057471
const path = require('path');

const _ = require('lodash');

const dotenv = require('dotenv');

const env = require('@ltv/env');

dotenv.config({
  path: process.env.ENV_PATH || 'local.env'
});
const nodeEnv = env('NODE_ENV', 'development');

const getPrefixedDeps = require('../utils/get-prefixed-dependencies.util');

const loadPolicies = require('../loader/policies.load');

const loadFunctions = require('../loader/functions.load');

const loadConfigDir = require('./config-loader');

const createConfigProvider = require('./config-provider');

const {
  version: appVersion
} = require(path.join(__dirname, '../../package.json'));

const CONFIG_PATHS = {
  modules: 'modules',
  config: 'config',
  plugins: 'plugins',
  policies: 'policies',
  tmp: '.tmp'
};
const defaultConfig = {
  server: {
    host: env('HOST', 'localhost'),
    port: env('PORT', 4000),
    proxy: false,
    cron: {
      enabled: false
    },
    autoOpen: false
  },
  admin: {},
  middleware: {
    timeout: 1000,
    load: {
      before: ['responseTime', 'logger', 'cors', 'responses', 'gzip'],
      order: [],
      after: ['parser', 'router']
    },
    settings: {}
  },
  routes: {},
  functions: {},
  policies: {}
};

module.exports = (dir, initialConfig = {}) => {
  const appDir = dir || process.cwd();

  const pkgJSON = require(path.resolve(appDir, 'package.json'));

  const configDir = path.resolve(appDir, 'config');
  const rootConfig = {
    launchedAt: Date.now(),
    appPath: appDir,
    paths: CONFIG_PATHS,
    environment: nodeEnv,
    uuid: _.get(pkgJSON, 'app.uuid'),
    template: _.get(pkgJSON, 'app.template'),
    info: { ...pkgJSON,
      appVersion
    },
    installedPlugins: getPrefixedDeps('@social-gear/middleware', pkgJSON),
    installedMiddlewares: getPrefixedDeps('@social-gear/middleware', pkgJSON),
    ...initialConfig
  };
  const baseConfig = { ...loadConfigDir(configDir),
    policies: loadPolicies(path.resolve(configDir, 'policies')),
    functions: loadFunctions(path.resolve(configDir, 'functions'))
  };
  const envDir = path.resolve(configDir, 'env', nodeEnv);
  const envConfig = loadConfigDir(envDir);
  return createConfigProvider(_.merge(rootConfig, defaultConfig, baseConfig, envConfig));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwiXyIsImRvdGVudiIsImVudiIsImNvbmZpZyIsInByb2Nlc3MiLCJFTlZfUEFUSCIsIm5vZGVFbnYiLCJnZXRQcmVmaXhlZERlcHMiLCJsb2FkUG9saWNpZXMiLCJsb2FkRnVuY3Rpb25zIiwibG9hZENvbmZpZ0RpciIsImNyZWF0ZUNvbmZpZ1Byb3ZpZGVyIiwidmVyc2lvbiIsImFwcFZlcnNpb24iLCJqb2luIiwiX19kaXJuYW1lIiwiQ09ORklHX1BBVEhTIiwibW9kdWxlcyIsInBsdWdpbnMiLCJwb2xpY2llcyIsInRtcCIsImRlZmF1bHRDb25maWciLCJzZXJ2ZXIiLCJob3N0IiwicG9ydCIsInByb3h5IiwiY3JvbiIsImVuYWJsZWQiLCJhdXRvT3BlbiIsImFkbWluIiwibWlkZGxld2FyZSIsInRpbWVvdXQiLCJsb2FkIiwiYmVmb3JlIiwib3JkZXIiLCJhZnRlciIsInNldHRpbmdzIiwicm91dGVzIiwiZnVuY3Rpb25zIiwibW9kdWxlIiwiZXhwb3J0cyIsImRpciIsImluaXRpYWxDb25maWciLCJhcHBEaXIiLCJjd2QiLCJwa2dKU09OIiwicmVzb2x2ZSIsImNvbmZpZ0RpciIsInJvb3RDb25maWciLCJsYXVuY2hlZEF0IiwiRGF0ZSIsIm5vdyIsImFwcFBhdGgiLCJwYXRocyIsImVudmlyb25tZW50IiwidXVpZCIsImdldCIsInRlbXBsYXRlIiwiaW5mbyIsImluc3RhbGxlZFBsdWdpbnMiLCJpbnN0YWxsZWRNaWRkbGV3YXJlcyIsImJhc2VDb25maWciLCJlbnZEaXIiLCJlbnZDb25maWciLCJtZXJnZSJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNQyxDQUFDLEdBQUdELE9BQU8sQ0FBQyxRQUFELENBQWpCOztBQUNBLE1BQU1FLE1BQU0sR0FBR0YsT0FBTyxDQUFDLFFBQUQsQ0FBdEI7O0FBQ0EsTUFB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QUEsSUFBSSxFQUFFdkQsQ0FBQyxDQUFDd0QsR0FBRixDQUFNWCxPQUFOLEVBQWUsVUFBZixDQUxXO0FBTWpCWSxJQUFBQSxRQUFRLEVBQUV6RCxDQUFDLENBQUN3RCxHQUFGLENBQU1YLE9BQU4sRUFBZSxjQUFmLENBTk87QUFPakJhLElBQUFBLElBQUksRUFBRSxFQUNKLEdBQUdiLE9BREM7QUFFSmhDLE1BQUFBO0FBRkksS0FQVztBQVdqQjhDLElBQUFBLGdCQUFnQixFQUFFcEQsZUFBZSxDQUFDLHlCQUFELEVBQTRCc0MsT0FBNUIsQ0FYaEI7QUFZakJlLElBQUFBLG9CQUFvQixFQUFFckQsZUFBZSxDQUFDLHlCQUFELEVBQTRCc0MsT0FBNUIsQ0FacEI7QUFhakIsT0FBR0g7QUFiYyxHQUFuQjtBQWdCQSxRQUFNbUIsVUFBVSxHQUFHLEVBQ2pCLEdBQUduRCxhQUFhLENBQUNxQyxTQUFELENBREM7QUFFakI1QixJQUFBQSxRQUFRLEVBQUVYLFlBQVksQ0FBQ1YsSUFBSSxDQUFDZ0QsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLFVBQXhCLENBQUQsQ0FGTDtBQUdqQlQsSUFBQUEsU0FBUyxFQUFFN0IsYUFBYSxDQUFDWCxJQUFJLENBQUNnRCxPQUFMLENBQWFDLFNBQWIsRUFBd0IsV0FBeEIsQ0FBRDtBQUhQLEdBQW5CO0FBTUEsUUFBTWUsTUFBTSxHQUFHaEUsSUFBSSxDQUFDZ0QsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLEtBQXhCLEVBQStCekMsT0FBL0IsQ0FBZjtBQUNBLFFBQU15RCxTQUFTLEdBQUdyRCxhQUFhLENBQUNvRCxNQUFELENBQS9CO0FBRUEsU0FBT25ELG9CQUFvQixDQUN6QlgsQ0FBQyxDQUFDZ0UsS0FBRixDQUFRaEIsVUFBUixFQUFvQjNCLGFBQXBCLEVBQW1Dd0MsVUFBbkMsRUFBK0NFLFNBQS9DLENBRHlCLENBQTNCO0FBR0QsQ0FsQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuY29uc3QgZG90ZW52ID0gcmVxdWlyZSgnZG90ZW52Jyk7XG5jb25zdCBlbnYgPSByZXF1aXJlKCdAbHR2L2VudicpO1xuXG5kb3RlbnYuY29uZmlnKHsgcGF0aDogcHJvY2Vzcy5lbnYuRU5WX1BBVEggfHwgJ2xvY2FsLmVudicgfSk7XG5cbmNvbnN0IG5vZGVFbnYgPSBlbnYoJ05PREVfRU5WJywgJ2RldmVsb3BtZW50Jyk7XG5cbmNvbnN0IGdldFByZWZpeGVkRGVwcyA9IHJlcXVpcmUoJy4uL3V0aWxzL2dldC1wcmVmaXhlZC1kZXBlbmRlbmNpZXMudXRpbCcpO1xuY29uc3QgbG9hZFBvbGljaWVzID0gcmVxdWlyZSgnLi4vbG9hZGVyL3BvbGljaWVzLmxvYWQnKTtcbmNvbnN0IGxvYWRGdW5jdGlvbnMgPSByZXF1aXJlKCcuLi9sb2FkZXIvZnVuY3Rpb25zLmxvYWQnKTtcbmNvbnN0IGxvYWRDb25maWdEaXIgPSByZXF1aXJlKCcuL2NvbmZpZy1sb2FkZXInKTtcbmNvbnN0IGNyZWF0ZUNvbmZpZ1Byb3ZpZGVyID0gcmVxdWlyZSgnLi9jb25maWctcHJvdmlkZXInKTtcblxuY29uc3QgeyB2ZXJzaW9uOiBhcHBWZXJzaW9uIH0gPSByZXF1aXJlKHBhdGguam9pbihcbiAgX19kaXJuYW1lLFxuICAnLi4vLi4vcGFja2FnZS5qc29uJ1xuKSk7XG5cbmNvbnN0IENPTkZJR19QQVRIUyA9IHtcbiAgbW9kdWxlczogJ21vZHVsZXMnLFxuICBjb25maWc6ICdjb25maWcnLFxuICBwbHVnaW5zOiAncGx1Z2lucycsXG4gIHBvbGljaWVzOiAncG9saWNpZXMnLFxuICB0bXA6ICcudG1wJyxcbn07XG5cbmNvbnN0IGRlZmF1bHRDb25maWcgPSB7XG4gIHNlcnZlcjoge1xuICAgIGhvc3Q6IGVudignSE9TVCcsICdsb2NhbGhvc3QnKSxcbiAgICBwb3J0OiBlbnYoJ1BPUlQnLCA0MDAwKSxcbiAgICBwcm94eTogZmFsc2UsXG4gICAgY3JvbjogeyBlbmFibGVkOiBmYWxzZSB9LFxuICAgIGF1dG9PcGVuOiBmYWxzZSxcbiAgfSxcbiAgYWRtaW46IHt9LFxuICBtaWRkbGV3YXJlOiB7XG4gICAgdGltZW91dDogMTAwMCxcbiAgICBsb2FkOiB7XG4gICAgICBiZWZvcmU6IFsncmVzcG9uc2VUaW1lJywgJ2xvZ2dlcicsICdjb3JzJywgJ3Jlc3BvbnNlcycsICdnemlwJ10sXG4gICAgICBvcmRlcjogW10sXG4gICAgICBhZnRlcjogWydwYXJzZXInLCAncm91dGVyJ10sXG4gICAgfSxcbiAgICBzZXR0aW5nczoge30sXG4gIH0sXG4gIHJvdXRlczoge30sXG4gIGZ1bmN0aW9uczoge30sXG4gIHBvbGljaWVzOiB7fSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gKGRpciwgaW5pdGlhbENvbmZpZyA9IHt9KSA9PiB7XG4gIGNvbnN0IGFwcERpciA9IGRpciB8fCBwcm9jZXNzLmN3ZCgpO1xuICBjb25zdCBwa2dKU09OID0gcmVxdWlyZShwYXRoLnJlc29sdmUoYXBwRGlyLCAncGFja2FnZS5qc29uJykpO1xuXG4gIGNvbnN0IGNvbmZpZ0RpciA9IHBhdGgucmVzb2x2ZShhcHBEaXIsICdjb25maWcnKTtcblxuICBjb25zdCByb290Q29uZmlnID0ge1xuICAgIGxhdW5jaGVkQXQ6IERhdGUubm93KCksXG4gICAgYXBwUGF0aDogYXBwRGlyLFxuICAgIHBhdGhzOiBDT05GSUdfUEFUSFMsXG4gICAgZW52aXJvbm1lbnQ6IG5vZGVFbnYsXG4gICAgdXVpZDogXy5nZXQocGtnSlNPTiwgJ2FwcC51dWlkJyksXG4gICAgdGVtcGxhdGU6IF8uZ2V0KHBrZ0pTT04sICdhcHAudGVtcGxhdGUnKSxcbiAgICBpbmZvOiB7XG4gICAgICAuLi5wa2dKU09OLFxuICAgICAgYXBwVmVyc2lvbixcbiAgICB9LFxuICAgIGluc3RhbGxlZFBsdWdpbnM6IGdldFByZWZpeGVkRGVwcygnQHNvY2lhbC1nZWFyL21pZGRsZXdhcmUnLCBwa2dKU09OKSxcbiAgICBpbnN0YWxsZWRNaWRkbGV3YXJlczogZ2V0UHJlZml4ZWREZXBzKCdAc29jaWFsLWdlYXIvbWlkZGxld2FyZScsIHBrZ0pTT04pLFxuICAgIC4uLmluaXRpYWxDb25maWcsXG4gIH07XG5cbiAgY29uc3QgYmFzZUNvbmZpZyA9IHtcbiAgICAuLi5sb2FkQ29uZmlnRGlyKGNvbmZpZ0RpciksXG4gICAgcG9saWNpZXM6IGxvYWRQb2xpY2llcyhwYXRoLnJlc29sdmUoY29uZmlnRGlyLCAncG9saWNpZXMnKSksXG4gICAgZnVuY3Rpb25zOiBsb2FkRnVuY3Rpb25zKHBhdGgucmVzb2x2ZShjb25maWdEaXIsICdmdW5jdGlvbnMnKSksXG4gIH07XG5cbiAgY29uc3QgZW52RGlyID0gcGF0aC5yZXNvbHZlKGNvbmZpZ0RpciwgJ2VudicsIG5vZGVFbnYpO1xuICBjb25zdCBlbnZDb25maWcgPSBsb2FkQ29uZmlnRGlyKGVudkRpcik7XG5cbiAgcmV0dXJuIGNyZWF0ZUNvbmZpZ1Byb3ZpZGVyKFxuICAgIF8ubWVyZ2Uocm9vdENvbmZpZywgZGVmYXVsdENvbmZpZywgYmFzZUNvbmZpZywgZW52Q29uZmlnKVxuICApO1xufTtcbiJdfQ==