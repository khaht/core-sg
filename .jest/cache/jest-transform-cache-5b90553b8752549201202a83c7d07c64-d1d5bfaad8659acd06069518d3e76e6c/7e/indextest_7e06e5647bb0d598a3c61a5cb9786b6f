214b9797009be2c61c573ae6b6a0c93e
const _ = require('lodash');

const configs = require('../index');

const options = {};
const dir = process.cwd();
describe('Load configs', () => {
  test('Should return object has get set has', () => {
    const _configs = configs(dir, options);

    expect(Object.keys(_.pick(_configs, ['get', 'set', 'has']))).toEqual(['get', 'set', 'has']);
  });
  test('Should set a config', () => {
    let _configs = configs(dir, options);

    _configs = _configs.set('server.port', 3000);
    expect(_configs.server.port).toBe(3000);
  });
  test('Should get a config', () => {
    const _configs = configs(dir, options);

    const port = _configs.get('server.port');

    expect(port).toBe(4000);
  });
  test('Should has a config', () => {
    const _configs = configs(dir);

    const hasPort = _configs.has('server.port');

    expect(hasPort).toBe(true);
  });
  test('should create config without directory - will use current directory', () => {
    const _configs = configs();

    expect(_configs.appPath).toEqual(dir);
  });
  test('should create config with provided directory', () => {
    const _configs = configs(process.cwd());

    expect(_configs.appPath).toEqual(process.cwd());
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRlc3QuanMiXSwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJjb25maWdzIiwib3B0aW9ucyIsImRpciIsInByb2Nlc3MiLCJjd2QiLCJkZXNjcmliZSIsInRlc3QiLCJfY29uZmlncyIsImV4cGVjdCIsIk9iamVjdCIsImtleXMiLCJwaWNrIiwidG9FcXVhbCIsInNldCIsInNlcnZlciIsInBvcnQiLCJ0b0JlIiwiZ2V0IiwiaGFzUG9ydCIsImhhcyIsImFwcFBhdGgiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLENBQUMsR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBakI7O0FBQ0EsTUFBTUMsT0FBTyxHQUFHRCxPQUFPLENBQUMsVUFBRCxDQUF2Qjs7QUFFQSxNQUFNRSxPQUFPLEdBQUcsRUFBaEI7QUFDQSxNQUFNQyxHQUFHLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBUixFQUFaO0FBRUFDLFFBQVEsQ0FBQyxjQUFELEVBQWlCLE1BQU07QUFDN0JDLEVBQUFBLElBQUksQ0FBQyxzQ0FBRCxFQUF5QyxNQUFNO0FBQ2pELFVBQU1DLFFBQVEsR0FBR1AsT0FBTyxDQUFDRSxHQUFELEVBQU1ELE9BQU4sQ0FBeEI7O0FBQ0FPLElBQUFBLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDQyxJQUFQLENBQVlaLENBQUMsQ0FBQ2EsSUFBRixDQUFPSixRQUFQLEVBQWlCLENBQUMsS0FBRCxFQUFRLEtBQVIsRUFBZSxLQUFmLENBQWpCLENBQVosQ0FBRCxDQUFOLENBQTZESyxPQUE3RCxDQUFxRSxDQUNuRSxLQURtRSxFQUVuRSxLQUZtRSxFQUduRSxLQUhtRSxDQUFyRTtBQUtELEdBUEcsQ0FBSjtBQVNBTixFQUFBQSxJQUFJLENBQUMscUJBQUQsRUFBd0IsTUFBTTtBQUNoQyxRQUFJQyxRQUFRLEdBQUdQLE9BQU8sQ0FBQ0UsR0FBRCxFQUFNRCxPQUFOLENBQXRCOztBQUNBTSxJQUFBQSxRQUFRLEdBQUdBLFFBQVEsQ0FBQ00sR0FBVCxDQUFhLGFBQWIsRUFBNEIsSUFBNUIsQ0FBWDtBQUVBTCxJQUFBQSxNQUFNLENBQUNELFFBQVEsQ0FBQ08sTUFBVCxDQUFnQkMsSUFBakIsQ0FBTixDQUE2QkMsSUFBN0IsQ0FBa0MsSUFBbEM7QUFDRCxHQUxHLENBQUo7QUFPQVYsRUFBQUEsSUFBSSxDQUFDLHFCQUFELEVBQXdCLE1BQU07QUFDaEMsVUFBTUMsUUFBUSxHQUFHUCxPQUFPLENBQUNFLEdBQUQsRUFBTUQsT0FBTixDQUF4Qjs7QUFDQSxVQUFNYyxJQUFJLEdBQUdSLFFBQVEsQ0FBQ1UsR0FBVCxDQUFhLGFBQWIsQ0FBYjs7QUFFQVQsSUFBQUEsTUFBTSxDQUFDTyxJQUFELENBQU4sQ0FBYUMsSUFBYixDQUFrQixJQUFsQjtBQUNELEdBTEcsQ0FBSjtBQU9BVixFQUFBQSxJQUFJLENBQUMscUJBQUQsRUFBd0IsTUFBTTtBQUNoQyxVQUFNQyxRQUFRLEdBQUdQLE9BQU8sQ0FBQ0UsR0FBRCxDQUF4Qjs7QUFDQSxVQUFNZ0IsT0FBTyxHQUFHWCxRQUFRLENBQUNZLEdBQVQsQ0FBYSxhQUFiLENBQWhCOztBQUVBWCxJQUFBQSxNQUFNLENBQUNVLE9BQUQsQ0FBTixDQUFnQkYsSUFBaEIsQ0FBcUIsSUFBckI7QUFDRCxHQUxHLENBQUo7QUFPQVYsRUFBQUEsSUFBSSxDQUFDLHFFQUFELEVBQXdFLE1BQU07QUFDaEYsVUFBTUMsUUFBUSxHQUFHUCxPQUFPLEVBQXhCOztBQUNBUSxJQUFBQSxNQUFNLENBQUNELFFBQVEsQ0FBQ2EsT0FBVixDQUFOLENBQXlCUixPQUF6QixDQUFpQ1YsR0FBakM7QUFDRCxHQUhHLENBQUo7QUFLQUksRUFBQUEsSUFBSSxDQUFDLDhDQUFELEVBQWlELE1BQU07QUFDekQsVUFBTUMsUUFBUSxHQUFHUCxPQUFPLENBQUNHLE9BQU8sQ0FBQ0MsR0FBUixFQUFELENBQXhCOztBQUNBSSxJQUFBQSxNQUFNLENBQUNELFFBQVEsQ0FBQ2EsT0FBVixDQUFOLENBQXlCUixPQUF6QixDQUFpQ1QsT0FBTyxDQUFDQyxHQUFSLEVBQWpDO0FBQ0QsR0FIRyxDQUFKO0FBSUQsQ0F4Q08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbmNvbnN0IGNvbmZpZ3MgPSByZXF1aXJlKCcuLi9pbmRleCcpO1xuXG5jb25zdCBvcHRpb25zID0ge307XG5jb25zdCBkaXIgPSBwcm9jZXNzLmN3ZCgpO1xuXG5kZXNjcmliZSgnTG9hZCBjb25maWdzJywgKCkgPT4ge1xuICB0ZXN0KCdTaG91bGQgcmV0dXJuIG9iamVjdCBoYXMgZ2V0IHNldCBoYXMnLCAoKSA9PiB7XG4gICAgY29uc3QgX2NvbmZpZ3MgPSBjb25maWdzKGRpciwgb3B0aW9ucyk7XG4gICAgZXhwZWN0KE9iamVjdC5rZXlzKF8ucGljayhfY29uZmlncywgWydnZXQnLCAnc2V0JywgJ2hhcyddKSkpLnRvRXF1YWwoW1xuICAgICAgJ2dldCcsXG4gICAgICAnc2V0JyxcbiAgICAgICdoYXMnLFxuICAgIF0pO1xuICB9KTtcblxuICB0ZXN0KCdTaG91bGQgc2V0IGEgY29uZmlnJywgKCkgPT4ge1xuICAgIGxldCBfY29uZmlncyA9IGNvbmZpZ3MoZGlyLCBvcHRpb25zKTtcbiAgICBfY29uZmlncyA9IF9jb25maWdzLnNldCgnc2VydmVyLnBvcnQnLCAzMDAwKTtcblxuICAgIGV4cGVjdChfY29uZmlncy5zZXJ2ZXIucG9ydCkudG9CZSgzMDAwKTtcbiAgfSk7XG5cbiAgdGVzdCgnU2hvdWxkIGdldCBhIGNvbmZpZycsICgpID0+IHtcbiAgICBjb25zdCBfY29uZmlncyA9IGNvbmZpZ3MoZGlyLCBvcHRpb25zKTtcbiAgICBjb25zdCBwb3J0ID0gX2NvbmZpZ3MuZ2V0KCdzZXJ2ZXIucG9ydCcpO1xuXG4gICAgZXhwZWN0KHBvcnQpLnRvQmUoNDAwMCk7XG4gIH0pO1xuXG4gIHRlc3QoJ1Nob3VsZCBoYXMgYSBjb25maWcnLCAoKSA9PiB7XG4gICAgY29uc3QgX2NvbmZpZ3MgPSBjb25maWdzKGRpcik7XG4gICAgY29uc3QgaGFzUG9ydCA9IF9jb25maWdzLmhhcygnc2VydmVyLnBvcnQnKTtcblxuICAgIGV4cGVjdChoYXNQb3J0KS50b0JlKHRydWUpO1xuICB9KTtcblxuICB0ZXN0KCdzaG91bGQgY3JlYXRlIGNvbmZpZyB3aXRob3V0IGRpcmVjdG9yeSAtIHdpbGwgdXNlIGN1cnJlbnQgZGlyZWN0b3J5JywgKCkgPT4ge1xuICAgIGNvbnN0IF9jb25maWdzID0gY29uZmlncygpO1xuICAgIGV4cGVjdChfY29uZmlncy5hcHBQYXRoKS50b0VxdWFsKGRpcik7XG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBjcmVhdGUgY29uZmlnIHdpdGggcHJvdmlkZWQgZGlyZWN0b3J5JywgKCkgPT4ge1xuICAgIGNvbnN0IF9jb25maWdzID0gY29uZmlncyhwcm9jZXNzLmN3ZCgpKTtcbiAgICBleHBlY3QoX2NvbmZpZ3MuYXBwUGF0aCkudG9FcXVhbChwcm9jZXNzLmN3ZCgpKTtcbiAgfSk7XG59KTtcbiJdfQ==