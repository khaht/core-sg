{"version":3,"sources":["index.test.js"],"names":["_","require","configs","options","dir","process","cwd","describe","test","_configs","expect","Object","keys","pick","toEqual","set","server","port","toBe","get","hasPort","has","appPath"],"mappings":"AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AAEA,MAAME,OAAO,GAAG,EAAhB;AACA,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,EAAZ;AAEAC,QAAQ,CAAC,cAAD,EAAiB,MAAM;AAC7BC,EAAAA,IAAI,CAAC,sCAAD,EAAyC,MAAM;AACjD,UAAMC,QAAQ,GAAGP,OAAO,CAACE,GAAD,EAAMD,OAAN,CAAxB;;AACAO,IAAAA,MAAM,CAACC,MAAM,CAACC,IAAP,CAAYZ,CAAC,CAACa,IAAF,CAAOJ,QAAP,EAAiB,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAAjB,CAAZ,CAAD,CAAN,CAA6DK,OAA7D,CAAqE,CACnE,KADmE,EAEnE,KAFmE,EAGnE,KAHmE,CAArE;AAKD,GAPG,CAAJ;AASAN,EAAAA,IAAI,CAAC,qBAAD,EAAwB,MAAM;AAChC,QAAIC,QAAQ,GAAGP,OAAO,CAACE,GAAD,EAAMD,OAAN,CAAtB;;AACAM,IAAAA,QAAQ,GAAGA,QAAQ,CAACM,GAAT,CAAa,aAAb,EAA4B,IAA5B,CAAX;AAEAL,IAAAA,MAAM,CAACD,QAAQ,CAACO,MAAT,CAAgBC,IAAjB,CAAN,CAA6BC,IAA7B,CAAkC,IAAlC;AACD,GALG,CAAJ;AAOAV,EAAAA,IAAI,CAAC,qBAAD,EAAwB,MAAM;AAChC,UAAMC,QAAQ,GAAGP,OAAO,CAACE,GAAD,EAAMD,OAAN,CAAxB;;AACA,UAAMc,IAAI,GAAGR,QAAQ,CAACU,GAAT,CAAa,aAAb,CAAb;;AAEAT,IAAAA,MAAM,CAACO,IAAD,CAAN,CAAaC,IAAb,CAAkB,IAAlB;AACD,GALG,CAAJ;AAOAV,EAAAA,IAAI,CAAC,qBAAD,EAAwB,MAAM;AAChC,UAAMC,QAAQ,GAAGP,OAAO,CAACE,GAAD,CAAxB;;AACA,UAAMgB,OAAO,GAAGX,QAAQ,CAACY,GAAT,CAAa,aAAb,CAAhB;;AAEAX,IAAAA,MAAM,CAACU,OAAD,CAAN,CAAgBF,IAAhB,CAAqB,IAArB;AACD,GALG,CAAJ;AAOAV,EAAAA,IAAI,CAAC,qEAAD,EAAwE,MAAM;AAChF,UAAMC,QAAQ,GAAGP,OAAO,EAAxB;;AACAQ,IAAAA,MAAM,CAACD,QAAQ,CAACa,OAAV,CAAN,CAAyBR,OAAzB,CAAiCV,GAAjC;AACD,GAHG,CAAJ;AAKAI,EAAAA,IAAI,CAAC,8CAAD,EAAiD,MAAM;AACzD,UAAMC,QAAQ,GAAGP,OAAO,CAACG,OAAO,CAACC,GAAR,EAAD,CAAxB;;AACAI,IAAAA,MAAM,CAACD,QAAQ,CAACa,OAAV,CAAN,CAAyBR,OAAzB,CAAiCT,OAAO,CAACC,GAAR,EAAjC;AACD,GAHG,CAAJ;AAID,CAxCO,CAAR","sourcesContent":["const _ = require('lodash');\nconst configs = require('../index');\n\nconst options = {};\nconst dir = process.cwd();\n\ndescribe('Load configs', () => {\n  test('Should return object has get set has', () => {\n    const _configs = configs(dir, options);\n    expect(Object.keys(_.pick(_configs, ['get', 'set', 'has']))).toEqual([\n      'get',\n      'set',\n      'has',\n    ]);\n  });\n\n  test('Should set a config', () => {\n    let _configs = configs(dir, options);\n    _configs = _configs.set('server.port', 3000);\n\n    expect(_configs.server.port).toBe(3000);\n  });\n\n  test('Should get a config', () => {\n    const _configs = configs(dir, options);\n    const port = _configs.get('server.port');\n\n    expect(port).toBe(4000);\n  });\n\n  test('Should has a config', () => {\n    const _configs = configs(dir);\n    const hasPort = _configs.has('server.port');\n\n    expect(hasPort).toBe(true);\n  });\n\n  test('should create config without directory - will use current directory', () => {\n    const _configs = configs();\n    expect(_configs.appPath).toEqual(dir);\n  });\n\n  test('should create config with provided directory', () => {\n    const _configs = configs(process.cwd());\n    expect(_configs.appPath).toEqual(process.cwd());\n  });\n});\n"]}