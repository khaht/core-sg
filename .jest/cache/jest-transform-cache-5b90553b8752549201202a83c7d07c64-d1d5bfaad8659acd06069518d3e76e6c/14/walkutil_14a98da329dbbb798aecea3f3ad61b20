d8bb4d55d055c37249edcc478f1a5187
const assert = require('assert');

const path = require('path');

const fse = require('fs-extra');

module.exports = function walk(dir, {
  loader
} = {}) {
  assert(typeof loader === 'function', 'opts.loader must be a function');
  const root = {};
  const paths = fse.readdirSync(dir, {
    withFileTypes: true
  }); // eslint-disable-next-line

  for (let fd of paths) {
    const {
      name
    } = fd;
    const fullPath = dir + path.sep + name;

    if (fd.isDirectory()) {
      root[name] = walk(fullPath, {
        loader
      });
    } else {
      const ext = path.extname(name);
      const key = path.basename(name, ext);
      root[key] = loader(fullPath);
    }
  }

  return root;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndhbGsudXRpbC5qcyJdLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwicGF0aCIsImZzZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ3YWxrIiwiZGlyIiwibG9hZGVyIiwicm9vdCIsInBhdGhzIiwicmVhZGRpclN5bmMiLCJ3aXRoRmlsZVR5cGVzIiwiZmQiLCJuYW1lIiwiZnVsbFBhdGgiLCJzZXAiLCJpc0RpcmVjdG9yeSIsImV4dCIsImV4dG5hbWUiLCJrZXkiLCJiYXNlbmFtZSJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsTUFBTSxHQUFHQyxPQUFPLENBQUMsUUFBRCxDQUF0Qjs7QUFDQSxNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU1FLEdBQUcsR0FBR0YsT0FBTyxDQUFDLFVBQUQsQ0FBbkI7O0FBRUFHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxJQUFULENBQWNDLEdBQWQsRUFBbUI7QUFBRUMsRUFBQUE7QUFBRixJQUFhLEVBQWhDLEVBQW9DO0FBQ25EUixFQUFBQSxNQUFNLENBQUMsT0FBT1EsTUFBUCxLQUFrQixVQUFuQixFQUErQixnQ0FBL0IsQ0FBTjtBQUVBLFFBQU1DLElBQUksR0FBRyxFQUFiO0FBQ0EsUUFBTUMsS0FBSyxHQUFHUCxHQUFHLENBQUNRLFdBQUosQ0FBZ0JKLEdBQWhCLEVBQXFCO0FBQUVLLElBQUFBLGFBQWEsRUFBRTtBQUFqQixHQUFyQixDQUFkLENBSm1ELENBTW5EOztBQUNBLE9BQUssSUFBSUMsRUFBVCxJQUFlSCxLQUFmLEVBQXNCO0FBQ3BCLFVBQU07QUFBRUksTUFBQUE7QUFBRixRQUFXRCxFQUFqQjtBQUNBLFVBQU1FLFFBQVEsR0FBR1IsR0FBRyxHQUFHTCxJQUFJLENBQUNjLEdBQVgsR0FBaUJGLElBQWxDOztBQUVBLFFBQUlELEVBQUUsQ0FBQ0ksV0FBSCxFQUFKLEVBQXNCO0FBQ3BCUixNQUFBQSxJQUFJLENBQUNLLElBQUQsQ0FBSixHQUFhUixJQUFJLENBQUNTLFFBQUQsRUFBVztBQUFFUCxRQUFBQTtBQUFGLE9BQVgsQ0FBakI7QUFDRCxLQUZELE1BRU87QUFDTCxZQUFNVSxHQUFHLEdBQUdoQixJQUFJLENBQUNpQixPQUFMLENBQWFMLElBQWIsQ0FBWjtBQUNBLFlBQU1NLEdBQUcsR0FBR2xCLElBQUksQ0FBQ21CLFFBQUwsQ0FBY1AsSUFBZCxFQUFvQkksR0FBcEIsQ0FBWjtBQUNBVCxNQUFBQSxJQUFJLENBQUNXLEdBQUQsQ0FBSixHQUFZWixNQUFNLENBQUNPLFFBQUQsQ0FBbEI7QUFDRDtBQUNGOztBQUVELFNBQU9OLElBQVA7QUFDRCxDQXJCRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IGZzZSA9IHJlcXVpcmUoJ2ZzLWV4dHJhJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gd2FsayhkaXIsIHsgbG9hZGVyIH0gPSB7fSkge1xuICBhc3NlcnQodHlwZW9mIGxvYWRlciA9PT0gJ2Z1bmN0aW9uJywgJ29wdHMubG9hZGVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGNvbnN0IHJvb3QgPSB7fTtcbiAgY29uc3QgcGF0aHMgPSBmc2UucmVhZGRpclN5bmMoZGlyLCB7IHdpdGhGaWxlVHlwZXM6IHRydWUgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGZvciAobGV0IGZkIG9mIHBhdGhzKSB7XG4gICAgY29uc3QgeyBuYW1lIH0gPSBmZDtcbiAgICBjb25zdCBmdWxsUGF0aCA9IGRpciArIHBhdGguc2VwICsgbmFtZTtcblxuICAgIGlmIChmZC5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICByb290W25hbWVdID0gd2FsayhmdWxsUGF0aCwgeyBsb2FkZXIgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGV4dCA9IHBhdGguZXh0bmFtZShuYW1lKTtcbiAgICAgIGNvbnN0IGtleSA9IHBhdGguYmFzZW5hbWUobmFtZSwgZXh0KTtcbiAgICAgIHJvb3Rba2V5XSA9IGxvYWRlcihmdWxsUGF0aCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJvb3Q7XG59O1xuIl19