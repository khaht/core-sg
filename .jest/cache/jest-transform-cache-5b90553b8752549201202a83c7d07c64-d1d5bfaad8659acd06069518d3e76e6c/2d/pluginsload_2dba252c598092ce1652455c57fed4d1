33ca8a61c800829c7ea35ebc48d7131d
const {
  join
} = require('path');

const {
  existsSync
} = require('fs-extra');

const _ = require('lodash');

const findPackagePath = require('./package-path.load');

const loadFiles = require('./files.load');

const loadConfig = require('./config-files.load');

const loadLocalPlugins = async ({
  dir,
  config
}) => {
  const pluginsDir = join(dir, 'plugins');
  if (!existsSync(pluginsDir)) return {};
  const [files, configs] = await Promise.all([loadFiles(pluginsDir, '{*/!(config)/*.*(js|json),*/package.json}'), loadConfig(pluginsDir, '*/config/**/*.+(js|json)')]);
  const userConfigs = Object.keys(files).reduce((acc, plugin) => {
    acc[plugin] = {
      config: config.get(['plugins', plugin], {})
    };
    return acc;
  }, {});
  return _.merge(files, configs, userConfigs);
};

const loadPlugins = async ({
  installedPlugins,
  config
}) => {
  const plugins = {}; // eslint-disable-next-line no-restricted-syntax

  for (const plugin of installedPlugins) {
    const pluginPath = findPackagePath(`@social-gear/plugin-${plugin}`); // eslint-disable-next-line no-await-in-loop

    const files = await loadFiles(pluginPath, '{!(config|node_modules|tests)/*.*(js|json),package.json}'); // eslint-disable-next-line no-await-in-loop

    const {
      config: pluginConfig
    } = await loadConfig(pluginPath);
    const userConfig = config.get(['plugins', plugin], {});

    const mergedConfig = _.merge(pluginConfig, userConfig);

    _.set(plugins, plugin, _.assign({}, files, {
      config: mergedConfig
    }));
  }

  return plugins;
};

module.exports = async ({
  dir,
  config
}) => {
  const localPlugins = await loadLocalPlugins({
    dir,
    config
  });
  const plugins = await loadPlugins({
    installedPlugins: config.installedPlugins,
    config
  });

  const pluginsIntersection = _.intersection(Object.keys(localPlugins), Object.keys(plugins));

  if (pluginsIntersection.length > 0) {
    throw new Error(`You have some local plugins with the same name as npm installed plugins:\n${pluginsIntersection.map(p => `- ${p}`).join('\n')}`);
  } // check for conflicts


  return _.merge(plugins, localPlugins);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbnMubG9hZC5qcyJdLCJuYW1lcyI6WyJqb2luIiwicmVxdWlyZSIsImV4aXN0c1N5bmMiLCJfIiwiZmluZFBhY2thZ2VQYXRoIiwibG9hZEZpbGVzIiwibG9hZENvbmZpZyIsImxvYWRMb2NhbFBsdWdpbnMiLCJkaXIiLCJjb25maWciLCJwbHVnaW5zRGlyIiwiZmlsZXMiLCJjb25maWdzIiwiUHJvbWlzZSIsImFsbCIsInVzZXJDb25maWdzIiwiT2JqZWN0Iiwia2V5cyIsInJlZHVjZSIsImFjYyIsInBsdWdpbiIsImdldCIsIm1lcmdlIiwibG9hZFBsdWdpbnMiLCJpbnN0YWxsZWRQbHVnaW5zIiwicGx1Z2lucyIsInBsdWdpblBhdGgiLCJwbHVnaW5Db25maWciLCJ1c2VyQ29uZmlnIiwibWVyZ2VkQ29uZmlnIiwic2V0IiwiYXNzaWduIiwibW9kdWxlIiwiZXhwb3J0cyIsImxvY2FsUGx1Z2lucyIsInBsdWdpbnNJbnRlcnNlY3Rpb24iLCJpbnRlcnNlY3Rpb24iLCJsZW5ndGgiLCJFcnJvciIsIm1hcCIsInAiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFXQyxPQUFPLENBQUMsTUFBRCxDQUF4Qjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBaUJELE9BQU8sQ0FBQyxVQUFELENBQTlCOztBQUNBLE1BQU1FLENBQUMsR0FBR0YsT0FBTyxDQUFDLFFBQUQsQ0FBakI7O0FBQ0EsTUFBTUcsZUFBZSxHQUFHSCxPQUFPLENBQUMscUJBQUQsQ0FBL0I7O0FBQ0EsTUFBTUksU0FBUyxHQUFHSixPQUFPLENBQUMsY0FBRCxDQUF6Qjs7QUFDQSxNQUFNSyxVQUFVLEdBQUdMLE9BQU8sQ0FBQyxxQkFBRCxDQUExQjs7QUFFQSxNQUFNTSxnQkFBZ0IsR0FBRyxPQUFPO0FBQUVDLEVBQUFBLEdBQUY7QUFBT0MsRUFBQUE7QUFBUCxDQUFQLEtBQTJCO0FBQ2xELFFBQU1DLFVBQVUsR0FBR1YsSUFBSSxDQUFDUSxH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SCxtQkFBbUIsQ0FDN0ZJLEdBRDBFLENBQ3JFQyxDQUFELElBQVEsS0FBSUEsQ0FBRSxFQUR3RCxFQUUxRXhDLElBRjBFLENBRXJFLElBRnFFLENBRS9ELEVBSFYsQ0FBTjtBQUtELEdBbEJ5QyxDQW9CMUM7OztBQUNBLFNBQU9HLENBQUMsQ0FBQ21CLEtBQUYsQ0FBUUcsT0FBUixFQUFpQlMsWUFBakIsQ0FBUDtBQUNELENBdEJEIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBqb2luIH0gPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCB7IGV4aXN0c1N5bmMgfSA9IHJlcXVpcmUoJ2ZzLWV4dHJhJyk7XG5jb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5jb25zdCBmaW5kUGFja2FnZVBhdGggPSByZXF1aXJlKCcuL3BhY2thZ2UtcGF0aC5sb2FkJyk7XG5jb25zdCBsb2FkRmlsZXMgPSByZXF1aXJlKCcuL2ZpbGVzLmxvYWQnKTtcbmNvbnN0IGxvYWRDb25maWcgPSByZXF1aXJlKCcuL2NvbmZpZy1maWxlcy5sb2FkJyk7XG5cbmNvbnN0IGxvYWRMb2NhbFBsdWdpbnMgPSBhc3luYyAoeyBkaXIsIGNvbmZpZyB9KSA9PiB7XG4gIGNvbnN0IHBsdWdpbnNEaXIgPSBqb2luKGRpciwgJ3BsdWdpbnMnKTtcblxuICBpZiAoIWV4aXN0c1N5bmMocGx1Z2luc0RpcikpIHJldHVybiB7fTtcblxuICBjb25zdCBbZmlsZXMsIGNvbmZpZ3NdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgIGxvYWRGaWxlcyhwbHVnaW5zRGlyLCAneyovIShjb25maWcpLyouKihqc3xqc29uKSwqL3BhY2thZ2UuanNvbn0nKSxcbiAgICBsb2FkQ29uZmlnKHBsdWdpbnNEaXIsICcqL2NvbmZpZy8qKi8qLisoanN8anNvbiknKSxcbiAgXSk7XG4gIGNvbnN0IHVzZXJDb25maWdzID0gT2JqZWN0LmtleXMoZmlsZXMpLnJlZHVjZSgoYWNjLCBwbHVnaW4pID0+IHtcbiAgICBhY2NbcGx1Z2luXSA9IHsgY29uZmlnOiBjb25maWcuZ2V0KFsncGx1Z2lucycsIHBsdWdpbl0sIHt9KSB9O1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgcmV0dXJuIF8ubWVyZ2UoZmlsZXMsIGNvbmZpZ3MsIHVzZXJDb25maWdzKTtcbn07XG5cbmNvbnN0IGxvYWRQbHVnaW5zID0gYXN5bmMgKHsgaW5zdGFsbGVkUGx1Z2lucywgY29uZmlnIH0pID0+IHtcbiAgY29uc3QgcGx1Z2lucyA9IHt9O1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICBmb3IgKGNvbnN0IHBsdWdpbiBvZiBpbnN0YWxsZWRQbHVnaW5zKSB7XG4gICAgY29uc3QgcGx1Z2luUGF0aCA9IGZpbmRQYWNrYWdlUGF0aChgQHNvY2lhbC1nZWFyL3BsdWdpbi0ke3BsdWdpbn1gKTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hd2FpdC1pbi1sb29wXG4gICAgY29uc3QgZmlsZXMgPSBhd2FpdCBsb2FkRmlsZXMoXG4gICAgICBwbHVnaW5QYXRoLFxuICAgICAgJ3shKGNvbmZpZ3xub2RlX21vZHVsZXN8dGVzdHMpLyouKihqc3xqc29uKSxwYWNrYWdlLmpzb259JyxcbiAgICApO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWF3YWl0LWluLWxvb3BcbiAgICBjb25zdCB7IGNvbmZpZzogcGx1Z2luQ29uZmlnIH0gPSBhd2FpdCBsb2FkQ29uZmlnKHBsdWdpblBhdGgpO1xuXG4gICAgY29uc3QgdXNlckNvbmZpZyA9IGNvbmZpZy5nZXQoWydwbHVnaW5zJywgcGx1Z2luXSwge30pO1xuXG4gICAgY29uc3QgbWVyZ2VkQ29uZmlnID0gXy5tZXJnZShwbHVnaW5Db25maWcsIHVzZXJDb25maWcpO1xuXG4gICAgXy5zZXQocGx1Z2lucywgcGx1Z2luLCBfLmFzc2lnbih7fSwgZmlsZXMsIHsgY29uZmlnOiBtZXJnZWRDb25maWcgfSkpO1xuICB9XG5cbiAgcmV0dXJuIHBsdWdpbnM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jICh7IGRpciwgY29uZmlnIH0pID0+IHtcbiAgY29uc3QgbG9jYWxQbHVnaW5zID0gYXdhaXQgbG9hZExvY2FsUGx1Z2lucyh7IGRpciwgY29uZmlnIH0pO1xuICBjb25zdCBwbHVnaW5zID0gYXdhaXQgbG9hZFBsdWdpbnMoe1xuICAgIGluc3RhbGxlZFBsdWdpbnM6IGNvbmZpZy5pbnN0YWxsZWRQbHVnaW5zLFxuICAgIGNvbmZpZyxcbiAgfSk7XG5cbiAgY29uc3QgcGx1Z2luc0ludGVyc2VjdGlvbiA9IF8uaW50ZXJzZWN0aW9uKFxuICAgIE9iamVjdC5rZXlzKGxvY2FsUGx1Z2lucyksXG4gICAgT2JqZWN0LmtleXMocGx1Z2lucyksXG4gICk7XG5cbiAgaWYgKHBsdWdpbnNJbnRlcnNlY3Rpb24ubGVuZ3RoID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBZb3UgaGF2ZSBzb21lIGxvY2FsIHBsdWdpbnMgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG5wbSBpbnN0YWxsZWQgcGx1Z2luczpcXG4ke3BsdWdpbnNJbnRlcnNlY3Rpb25cbiAgICAgICAgLm1hcCgocCkgPT4gYC0gJHtwfWApXG4gICAgICAgIC5qb2luKCdcXG4nKX1gLFxuICAgICk7XG4gIH1cblxuICAvLyBjaGVjayBmb3IgY29uZmxpY3RzXG4gIHJldHVybiBfLm1lcmdlKHBsdWdpbnMsIGxvY2FsUGx1Z2lucyk7XG59O1xuIl19