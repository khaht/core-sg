b650203e6ef44be969ef191954b1c541
const {
  isString,
  isPlainObject
} = require('lodash');

const regex = /\$\{[^()]*\}/g;
const excludeConfigPaths = ['info.scripts'];
/**
 * Allow dynamic config values through the native ES6 template string function.
 */
// Allow values which looks like such as an ES6 literal string
// without parenthesis inside (aka function call).
// Exclude config with conflicting syntax (e.g. npm scripts).

const templateConfiguration = (obj, configPath = '') => Object.keys(obj).reduce((acc, key) => {
  if (isPlainObject(obj[key]) && !isString(obj[key])) {
    acc[key] = templateConfiguration(obj[key], `${configPath}.${key}`);
  } else if (isString(obj[key]) && !excludeConfigPaths.includes(configPath.substr(1)) && obj[key].match(regex) !== null) {
    // eslint-disable-next-line
    acc[key] = eval('`' + obj[key] + '`');
  } else {
    acc[key] = obj[key];
  }

  return acc;
}, {});

module.exports = templateConfiguration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlbXBsYXRlLWNvbmZpZ3VyYXRpb24udXRpbC5qcyJdLCJuYW1lcyI6WyJpc1N0cmluZyIsImlzUGxhaW5PYmplY3QiLCJyZXF1aXJlIiwicmVnZXgiLCJleGNsdWRlQ29uZmlnUGF0aHMiLCJ0ZW1wbGF0ZUNvbmZpZ3VyYXRpb24iLCJvYmoiLCJjb25maWdQYXRoIiwiT2JqZWN0Iiwia2V5cyIsInJlZHVjZSIsImFjYyIsImtleSIsImluY2x1ZGVzIiwic3Vic3RyIiwibWF0Y2giLCJldmFsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTTtBQUFFQSxFQUFBQSxRQUFGO0FBQVlDLEVBQUFBO0FBQVosSUFBOEJDLE9BQU8sQ0FBQyxRQUFELENBQTNDOztBQUVBLE1BQU1DLEtBQUssR0FBRyxlQUFkO0FBQ0EsTUFBTUMsa0JBQWtCLEdBQUcsQ0FBQyxjQUFELENBQTNCO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLE1BQU1DLHFCQUFxQixHQUFHLENBQUNDLEdBQUQsRUFBTUMsVUFBVSxHQUFHLEVBQW5CLEtBQTBCQyxNQUFNLENBQzNEQyxJQURxRCxDQUNoREgsR0FEZ0QsRUFFckRJLE1BRnFELENBRTlDLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQ3BCLE1BQUlYLGFBQWEsQ0FBQ0ssR0FBRyxDQUFDTSxHQUFELENBQUosQ0FBYixJQUEyQixDQUFDWixRQUFRLENBQUNNLEdBQUcsQ0FBQ00sR0FBRCxDQUFKLENBQXhDLEVBQW9EO0FBQ2xERCxJQUFBQSxHQUFHLENBQUNDLEdBQUQsQ0FBSCxHQUFXUCxxQkFBcUIsQ0FBQ0MsR0FBRyxDQUFDTSxHQUFELENBQUosRUFBWSxHQUFFTCxVQUFXLElBQUdLLEdBQUksRUFBaEMsQ0FBaEM7QUFDRCxHQUZELE1BRU8sSUFDTFosUUFBUSxDQUFDTSxHQUFHLENBQUNNLEdBQUQsQ0FBSixDQUFSLElBQ0csQ0FBQ1Isa0JBQWtCLENBQUNTLFFBQW5CLENBQTRCTixVQUFVLENBQUNPLE1BQVgsQ0FBa0IsQ0FBbEIsQ0FBNUIsQ0FESixJQUVHUixHQUFHLENBQUNNLEdBQUQsQ0FBSCxDQUFTRyxLQUFULENBQWVaLEtBQWYsTUFBMEIsSUFIeEIsRUFJTDtBQUNBO0FBQ0FRLElBQUFBLEdBQUcsQ0FBQ0MsR0FBRCxDQUFILEdBQVdJLElBQUksQ0FBQyxNQUFNVixHQUFHLENBQUNNLEdBQUQsQ0FBVCxHQUFpQixHQUFsQixDQUFmO0FBQ0QsR0FQTSxNQU9BO0FBQ0xELElBQUFBLEdBQUcsQ0FBQ0MsR0FBRCxDQUFILEdBQVdOLEdBQUcsQ0FBQ00sR0FBRCxDQUFkO0FBQ0Q7O0FBRUQsU0FBT0QsR0FBUDtBQUNELENBakJxRCxFQWlCbkQsRUFqQm1ELENBQXhEOztBQWtCQU0sTUFBTSxDQUFDQyxPQUFQLEdBQWlCYixxQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGlzU3RyaW5nLCBpc1BsYWluT2JqZWN0IH0gPSByZXF1aXJlKCdsb2Rhc2gnKTtcblxuY29uc3QgcmVnZXggPSAvXFwkXFx7W14oKV0qXFx9L2c7XG5jb25zdCBleGNsdWRlQ29uZmlnUGF0aHMgPSBbJ2luZm8uc2NyaXB0cyddO1xuXG4vKipcbiAqIEFsbG93IGR5bmFtaWMgY29uZmlnIHZhbHVlcyB0aHJvdWdoIHRoZSBuYXRpdmUgRVM2IHRlbXBsYXRlIHN0cmluZyBmdW5jdGlvbi5cbiAqL1xuLy8gQWxsb3cgdmFsdWVzIHdoaWNoIGxvb2tzIGxpa2Ugc3VjaCBhcyBhbiBFUzYgbGl0ZXJhbCBzdHJpbmdcbi8vIHdpdGhvdXQgcGFyZW50aGVzaXMgaW5zaWRlIChha2EgZnVuY3Rpb24gY2FsbCkuXG4vLyBFeGNsdWRlIGNvbmZpZyB3aXRoIGNvbmZsaWN0aW5nIHN5bnRheCAoZS5nLiBucG0gc2NyaXB0cykuXG5jb25zdCB0ZW1wbGF0ZUNvbmZpZ3VyYXRpb24gPSAob2JqLCBjb25maWdQYXRoID0gJycpID0+IE9iamVjdFxuICAua2V5cyhvYmopXG4gIC5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgaWYgKGlzUGxhaW5PYmplY3Qob2JqW2tleV0pICYmICFpc1N0cmluZyhvYmpba2V5XSkpIHtcbiAgICAgIGFjY1trZXldID0gdGVtcGxhdGVDb25maWd1cmF0aW9uKG9ialtrZXldLCBgJHtjb25maWdQYXRofS4ke2tleX1gKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgaXNTdHJpbmcob2JqW2tleV0pXG4gICAgICAmJiAhZXhjbHVkZUNvbmZpZ1BhdGhzLmluY2x1ZGVzKGNvbmZpZ1BhdGguc3Vic3RyKDEpKVxuICAgICAgJiYgb2JqW2tleV0ubWF0Y2gocmVnZXgpICE9PSBudWxsXG4gICAgKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGFjY1trZXldID0gZXZhbCgnYCcgKyBvYmpba2V5XSArICdgJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjY1trZXldID0gb2JqW2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xubW9kdWxlLmV4cG9ydHMgPSB0ZW1wbGF0ZUNvbmZpZ3VyYXRpb247XG4iXX0=