{"version":3,"sources":["worker-queue.js"],"names":["debug","require","noop","module","exports","WorkerQueue","constructor","logger","concurrency","worker","running","queue","subscribe","enqueue","payload","execute","unshift","pop","error"],"mappings":"AAAA;AACA;AACA;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,KAAjB,CAAd;;AAEA,SAASC,IAAT,GAAgB,CAAG;;AAEnBC,MAAM,CAACC,OAAP,GAAiB,MAAMC,WAAN,CAAkB;AACjCC,EAAAA,WAAW,CAAC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,WAAW,GAAG;AAAxB,MAA8B,EAA/B,EAAmC;AAC5CR,IAAAA,KAAK,CAAC,yBAAD,CAAL;AAEA,SAAKO,MAAL,GAAcA,MAAd;AACA,SAAKE,MAAL,GAAcP,IAAd;AAEA,SAAKM,WAAL,GAAmBA,WAAnB;AACA,SAAKE,OAAL,GAAe,CAAf;AACA,SAAKC,KAAL,GAAa,EAAb;AACD;;AAEDC,EAAAA,SAAS,CAACH,MAAD,EAAS;AAChBT,IAAAA,KAAK,CAAC,2BAAD,CAAL;AACA,SAAKS,MAAL,GAAcA,MAAd;AACD;;AAEDI,EAAAA,OAAO,CAACC,OAAD,EAAU;AACfd,IAAAA,KAAK,CAAC,+BAAD,CAAL;;AACA,QAAI,KAAKU,OAAL,GAAe,KAAKF,WAAxB,EAAqC;AACnC,WAAKE,OAAL,IAAgB,CAAhB;AACA,WAAKK,OAAL,CAAaD,OAAb;AACD,KAHD,MAGO;AACL,WAAKH,KAAL,CAAWK,OAAX,CAAmBF,OAAnB;AACD;AACF;;AAEDG,EAAAA,GAAG,GAAG;AACJjB,IAAAA,KAAK,CAAC,8BAAD,CAAL;AACA,UAAMc,OAAO,GAAG,KAAKH,KAAL,CAAWM,GAAX,EAAhB;;AAEA,QAAIH,OAAJ,EAAa;AACX,WAAKC,OAAL,CAAaD,OAAb;AACD,KAFD,MAEO;AACL,WAAKJ,OAAL,IAAgB,CAAhB;AACD;AACF;;AAEY,QAAPK,OAAO,CAACD,OAAD,EAAU;AACrBd,IAAAA,KAAK,CAAC,gBAAD,CAAL;;AACA,QAAI;AACF,YAAM,KAAKS,MAAL,CAAYK,OAAZ,CAAN;AACD,KAFD,CAEE,OAAOI,KAAP,EAAc;AACd,WAAKX,MAAL,CAAYW,KAAZ,CAAkBA,KAAlB;AACD,KAJD,SAIU;AACR,WAAKD,GAAL;AACD;AACF;;AA/CgC,CAAnC","sourcesContent":["/**\n * Simple worker queue in memory\n */\n\nconst debug = require('debug')('app');\n\nfunction noop() { }\n\nmodule.exports = class WorkerQueue {\n  constructor({ logger, concurrency = 5 } = {}) {\n    debug('Initialize worker queue');\n\n    this.logger = logger;\n    this.worker = noop;\n\n    this.concurrency = concurrency;\n    this.running = 0;\n    this.queue = [];\n  }\n\n  subscribe(worker) {\n    debug('Subscribe to worker queue');\n    this.worker = worker;\n  }\n\n  enqueue(payload) {\n    debug('Enqueue event in worker queue');\n    if (this.running < this.concurrency) {\n      this.running += 1;\n      this.execute(payload);\n    } else {\n      this.queue.unshift(payload);\n    }\n  }\n\n  pop() {\n    debug('Pop worker queue and execute');\n    const payload = this.queue.pop();\n\n    if (payload) {\n      this.execute(payload);\n    } else {\n      this.running -= 1;\n    }\n  }\n\n  async execute(payload) {\n    debug('Execute worker');\n    try {\n      await this.worker(payload);\n    } catch (error) {\n      this.logger.error(error);\n    } finally {\n      this.pop();\n    }\n  }\n};\n"]}