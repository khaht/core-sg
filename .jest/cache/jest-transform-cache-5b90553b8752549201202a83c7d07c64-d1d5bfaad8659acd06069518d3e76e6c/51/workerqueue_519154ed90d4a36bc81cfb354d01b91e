d91f6dad0bdf4affd204985f4f8a0f6f
/**
 * Simple worker queue in memory
 */
const debug = require('debug')('app');

function noop() {}

module.exports = class WorkerQueue {
  constructor({
    logger,
    concurrency = 5
  } = {}) {
    debug('Initialize worker queue');
    this.logger = logger;
    this.worker = noop;
    this.concurrency = concurrency;
    this.running = 0;
    this.queue = [];
  }

  subscribe(worker) {
    debug('Subscribe to worker queue');
    this.worker = worker;
  }

  enqueue(payload) {
    debug('Enqueue event in worker queue');

    if (this.running < this.concurrency) {
      this.running += 1;
      this.execute(payload);
    } else {
      this.queue.unshift(payload);
    }
  }

  pop() {
    debug('Pop worker queue and execute');
    const payload = this.queue.pop();

    if (payload) {
      this.execute(payload);
    } else {
      this.running -= 1;
    }
  }

  async execute(payload) {
    debug('Execute worker');

    try {
      await this.worker(payload);
    } catch (error) {
      this.logger.error(error);
    } finally {
      this.pop();
    }
  }

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndvcmtlci1xdWV1ZS5qcyJdLCJuYW1lcyI6WyJkZWJ1ZyIsInJlcXVpcmUiLCJub29wIiwibW9kdWxlIiwiZXhwb3J0cyIsIldvcmtlclF1ZXVlIiwiY29uc3RydWN0b3IiLCJsb2dnZXIiLCJjb25jdXJyZW5jeSIsIndvcmtlciIsInJ1bm5pbmciLCJxdWV1ZSIsInN1YnNjcmliZSIsImVucXVldWUiLCJwYXlsb2FkIiwiZXhlY3V0ZSIsInVuc2hpZnQiLCJwb3AiLCJlcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBRUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFQLENBQWlCLEtBQWpCLENBQWQ7O0FBRUEsU0FBU0MsSUFBVCxHQUFnQixDQUFHOztBQUVuQkMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLE1BQU1DLFdBQU4sQ0FBa0I7QUFDakNDLEVBQUFBLFdBQVcsQ0FBQztBQUFFQyxJQUFBQSxNQUFGO0FBQVVDLElBQUFBLFdBQVcsR0FBRztBQUF4QixNQUE4QixFQUEvQixFQUFtQztBQUM1Q1IsSUFBQUEsS0FBSyxDQUFDLHlCQUFELENBQUw7QUFFQSxTQUFLTyxNQUFMLEdBQWNBLE1BQWQ7QUFDQSxTQUFLRSxNQUFMLEdBQWNQLElBQWQ7QUFFQSxTQUFLTSxXQUFMLEdBQW1CQSxXQUFuQjtBQUNBLFNBQUtFLE9BQUwsR0FBZSxDQUFmO0FBQ0EsU0FBS0MsS0FBTCxHQUFhLEVBQWI7QUFDRDs7QUFFREMsRUFBQUEsU0FBUyxDQUFDSCxNQUFELEVBQVM7QUFDaEJULElBQUFBLEtBQUssQ0FBQywyQkFBRCxDQUFMO0FBQ0EsU0FBS1MsTUFBTCxHQUFjQSxNQUFkO0FBQ0Q7O0FBRURJLEVBQUFBLE9BQU8sQ0FBQ0MsT0FBRCxFQUFVO0FBQ2ZkLElBQUFBLEtBQUssQ0FBQywrQkFBRCxDQUFMOztBQUNBLFFBQUksS0FBS1UsT0FBTCxHQUFlLEtBQUtGLFdBQXhCLEVBQXFDO0FBQ25DLFdBQUtFLE9BQUwsSUFBZ0IsQ0FBaEI7QUFDQSxXQUFLSyxPQUFMLENBQWFELE9BQWI7QUFDRCxLQUhELE1BR087QUFDTCxXQUFLSCxLQUFMLENBQVdLLE9BQVgsQ0FBbUJGLE9BQW5CO0FBQ0Q7QUFDRjs7QUFFREcsRUFBQUEsR0FBRyxHQUFHO0FBQ0pqQixJQUFBQSxLQUFLLENBQUMsOEJBQUQsQ0FBTDtBQUNBLFVBQU1jLE9BQU8sR0FBRyxLQUFLSCxLQUFMLENBQVdNLEdBQVgsRUFBaEI7O0FBRUEsUUFBSUgsT0FBSixFQUFhO0FBQ1gsV0FBS0MsT0FBTCxDQUFhRCxPQUFiO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsV0FBS0osT0FBTCxJQUFnQixDQUFoQjtBQUNEO0FBQ0Y7O0FBRVksUUFBUEssT0FBTyxDQUFDRCxPQUFELEVBQVU7QUFDckJkLElBQUFBLEtBQUssQ0FBQyxnQkFBRCxDQUFMOztBQUNBLFFBQUk7QUFDRixZQUFNLEtBQUtTLE1BQUwsQ0FBWUssT0FBWixDQUFOO0FBQ0QsS0FGRCxDQUVFLE9BQU9JLEtBQVAsRUFBYztBQUNkLFdBQUtYLE1BQUwsQ0FBWVcsS0FBWixDQUFrQkEsS0FBbEI7QUFDRCxLQUpELFNBSVU7QUFDUixXQUFLRCxHQUFMO0FBQ0Q7QUFDRjs7QUEvQ2dDLENBQW5DIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTaW1wbGUgd29ya2VyIHF1ZXVlIGluIG1lbW9yeVxuICovXG5cbmNvbnN0IGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnYXBwJyk7XG5cbmZ1bmN0aW9uIG5vb3AoKSB7IH1cblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBXb3JrZXJRdWV1ZSB7XG4gIGNvbnN0cnVjdG9yKHsgbG9nZ2VyLCBjb25jdXJyZW5jeSA9IDUgfSA9IHt9KSB7XG4gICAgZGVidWcoJ0luaXRpYWxpemUgd29ya2VyIHF1ZXVlJyk7XG5cbiAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICB0aGlzLndvcmtlciA9IG5vb3A7XG5cbiAgICB0aGlzLmNvbmN1cnJlbmN5ID0gY29uY3VycmVuY3k7XG4gICAgdGhpcy5ydW5uaW5nID0gMDtcbiAgICB0aGlzLnF1ZXVlID0gW107XG4gIH1cblxuICBzdWJzY3JpYmUod29ya2VyKSB7XG4gICAgZGVidWcoJ1N1YnNjcmliZSB0byB3b3JrZXIgcXVldWUnKTtcbiAgICB0aGlzLndvcmtlciA9IHdvcmtlcjtcbiAgfVxuXG4gIGVucXVldWUocGF5bG9hZCkge1xuICAgIGRlYnVnKCdFbnF1ZXVlIGV2ZW50IGluIHdvcmtlciBxdWV1ZScpO1xuICAgIGlmICh0aGlzLnJ1bm5pbmcgPCB0aGlzLmNvbmN1cnJlbmN5KSB7XG4gICAgICB0aGlzLnJ1bm5pbmcgKz0gMTtcbiAgICAgIHRoaXMuZXhlY3V0ZShwYXlsb2FkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5xdWV1ZS51bnNoaWZ0KHBheWxvYWQpO1xuICAgIH1cbiAgfVxuXG4gIHBvcCgpIHtcbiAgICBkZWJ1ZygnUG9wIHdvcmtlciBxdWV1ZSBhbmQgZXhlY3V0ZScpO1xuICAgIGNvbnN0IHBheWxvYWQgPSB0aGlzLnF1ZXVlLnBvcCgpO1xuXG4gICAgaWYgKHBheWxvYWQpIHtcbiAgICAgIHRoaXMuZXhlY3V0ZShwYXlsb2FkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ydW5uaW5nIC09IDE7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZXhlY3V0ZShwYXlsb2FkKSB7XG4gICAgZGVidWcoJ0V4ZWN1dGUgd29ya2VyJyk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMud29ya2VyKHBheWxvYWQpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihlcnJvcik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMucG9wKCk7XG4gICAgfVxuICB9XG59O1xuIl19