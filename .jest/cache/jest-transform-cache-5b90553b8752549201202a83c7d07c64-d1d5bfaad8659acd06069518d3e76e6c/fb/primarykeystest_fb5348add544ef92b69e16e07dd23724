a89cb4fab998900b4cedc3a1ed5cc283
const {
  replaceIdByPrimaryKey
} = require('../primary-key');

describe('Primary Key', () => {
  describe('replaceIdByPrimaryKey', () => {
    const defaultPostgresModel = {
      primaryKey: 'id'
    };
    const defaultMongooseModel = {
      primaryKey: '_id'
    };
    const customModel = {
      primaryKey: 'aRandomPrimaryKey'
    };
    describe('Model primary key is "id"', () => {
      test('Params has "id"', () => {
        const result = replaceIdByPrimaryKey({
          id: '123',
          color: 'red'
        }, defaultPostgresModel);
        expect(result).toEqual({
          id: '123',
          color: 'red'
        });
      });
      test('Params doesn\'t have "id"', () => {
        const result = replaceIdByPrimaryKey({
          color: 'red'
        }, defaultPostgresModel);
        expect(result).toEqual({
          color: 'red'
        });
      });
    });
    describe('Model primary key is "_id"', () => {
      test('Params has "_id"', () => {
        const result = replaceIdByPrimaryKey({
          _id: '123',
          color: 'red'
        }, defaultMongooseModel);
        expect(result).toEqual({
          _id: '123',
          color: 'red'
        });
      });
      test('Params has "id"', () => {
        const result = replaceIdByPrimaryKey({
          id: '123',
          color: 'red'
        }, defaultMongooseModel);
        expect(result).toEqual({
          _id: '123',
          color: 'red'
        });
      });
      test('Params doesn\'t have "id" nor "_id"', () => {
        const result = replaceIdByPrimaryKey({
          color: 'red'
        }, defaultMongooseModel);
        expect(result).toEqual({
          color: 'red'
        });
      });
    });
    describe('Model primary key is "aRandomPrimaryKey"', () => {
      test('Params has "id"', () => {
        const result = replaceIdByPrimaryKey({
          id: '123',
          color: 'red'
        }, customModel);
        expect(result).toEqual({
          aRandomPrimaryKey: '123',
          color: 'red'
        });
      });
      test('Params has "aRandomPrimaryKey"', () => {
        const result = replaceIdByPrimaryKey({
          aRandomPrimaryKey: '123',
          color: 'red'
        }, customModel);
        expect(result).toEqual({
          aRandomPrimaryKey: '123',
          color: 'red'
        });
      });
      test('Params doesn\'t have "id" nor "aRandomPrimaryKey"', () => {
        const result = replaceIdByPrimaryKey({
          color: 'red'
        }, customModel);
        expect(result).toEqual({
          color: 'red'
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByaW1hcnkta2V5cy50ZXN0LmpzIl0sIm5hbWVzIjpbInJlcGxhY2VJZEJ5UHJpbWFyeUtleSIsInJlcXVpcmUiLCJkZXNjcmliZSIsImRlZmF1bHRQb3N0Z3Jlc01vZGVsIiwicHJpbWFyeUtleSIsImRlZmF1bHRNb25nb29zZU1vZGVsIiwiY3VzdG9tTW9kZWwiLCJ0ZXN0IiwicmVzdWx0IiwiaWQiLCJjb2xvciIsImV4cGVjdCIsInRvRXF1YWwiLCJfaWQiLCJhUmFuZG9tUHJpbWFyeUtleSJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQTRCQyxPQUFPLENBQUMsZ0JBQUQsQ0FBekM7O0FBRUFDLFFBQVEsQ0FBQyxhQUFELEVBQWdCLE1BQU07QUFDNUJBLEVBQUFBLFFBQVEsQ0FBQyx1QkFBRCxFQUEwQixNQUFNO0FBQ3RDLFVBQU1DLG9CQUFvQixHQUFHO0FBQUVDLE1BQUFBLFVBQVUsRUFBRTtBQUFkLEtBQTdCO0FBQ0EsVUFBTUMsb0JBQW9CLEdBQUc7QUFBRUQsTUFBQUEsVUFBVSxFQUFFO0FBQWQsS0FBN0I7QUFDQSxVQUFNRSxXQUFXLEdBQUc7QUFBRUYsTUFBQUEsVUFBVSxFQUFFO0FBQWQsS0FBcEI7QUFFQUYsSUFBQUEsUUFBUSxDQUFDLDJCQUFELEVBQThCLE1BQU07QUFDMUNLLE1BQUFBLElBQUksQ0FBQyxpQkFBRCxFQUFvQixNQUFNO0FBQzVCLGNBQU1DLE1BQU0sR0FBR1IscUJBQXFCLENBQUM7QUFBRVMsVUFBQUEsRUFBRSxFQUFFLEtBQU47QUFBYUMsVUFBQUEsS0FBSyxFQUFFO0FBQXBCLFNBQUQsRUFBOEJQLG9CQUE5QixDQUFwQztBQUNBUSxRQUFBQSxNQUFNLENBQUNILE1BQUQsQ0FBTixDQUFlSSxPQUFmLENBQXVCO0FBQUVILFVBQUFBLEVBQUUsRUFBRSxLQUFOO0FBQWFDLFVBQUFBLEtBQUssRUFBRTtBQUFwQixTQUF2QjtBQUNELE9BSEcsQ0FBSjtBQUlBSCxNQUFBQSxJQUFJLENBQUMs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QUFBQSxNQUFNLENBQUNILE1BQUQsQ0FBTixDQUFlSSxPQUFmLENBQXVCO0FBQUVGLFVBQUFBLEtBQUssRUFBRTtBQUFULFNBQXZCO0FBQ0QsT0FIRyxDQUFKO0FBSUQsS0FoQk8sQ0FBUjtBQWlCRCxHQWhETyxDQUFSO0FBaURELENBbERPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IHJlcGxhY2VJZEJ5UHJpbWFyeUtleSB9ID0gcmVxdWlyZSgnLi4vcHJpbWFyeS1rZXknKTtcblxuZGVzY3JpYmUoJ1ByaW1hcnkgS2V5JywgKCkgPT4ge1xuICBkZXNjcmliZSgncmVwbGFjZUlkQnlQcmltYXJ5S2V5JywgKCkgPT4ge1xuICAgIGNvbnN0IGRlZmF1bHRQb3N0Z3Jlc01vZGVsID0geyBwcmltYXJ5S2V5OiAnaWQnIH07XG4gICAgY29uc3QgZGVmYXVsdE1vbmdvb3NlTW9kZWwgPSB7IHByaW1hcnlLZXk6ICdfaWQnIH07XG4gICAgY29uc3QgY3VzdG9tTW9kZWwgPSB7IHByaW1hcnlLZXk6ICdhUmFuZG9tUHJpbWFyeUtleScgfTtcblxuICAgIGRlc2NyaWJlKCdNb2RlbCBwcmltYXJ5IGtleSBpcyBcImlkXCInLCAoKSA9PiB7XG4gICAgICB0ZXN0KCdQYXJhbXMgaGFzIFwiaWRcIicsICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVwbGFjZUlkQnlQcmltYXJ5S2V5KHsgaWQ6ICcxMjMnLCBjb2xvcjogJ3JlZCcgfSwgZGVmYXVsdFBvc3RncmVzTW9kZWwpO1xuICAgICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHsgaWQ6ICcxMjMnLCBjb2xvcjogJ3JlZCcgfSk7XG4gICAgICB9KTtcbiAgICAgIHRlc3QoJ1BhcmFtcyBkb2VzblxcJ3QgaGF2ZSBcImlkXCInLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlcGxhY2VJZEJ5UHJpbWFyeUtleSh7IGNvbG9yOiAncmVkJyB9LCBkZWZhdWx0UG9zdGdyZXNNb2RlbCk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoeyBjb2xvcjogJ3JlZCcgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdNb2RlbCBwcmltYXJ5IGtleSBpcyBcIl9pZFwiJywgKCkgPT4ge1xuICAgICAgdGVzdCgnUGFyYW1zIGhhcyBcIl9pZFwiJywgKCkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSByZXBsYWNlSWRCeVByaW1hcnlLZXkoeyBfaWQ6ICcxMjMnLCBjb2xvcjogJ3JlZCcgfSwgZGVmYXVsdE1vbmdvb3NlTW9kZWwpO1xuICAgICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHsgX2lkOiAnMTIzJywgY29sb3I6ICdyZWQnIH0pO1xuICAgICAgfSk7XG4gICAgICB0ZXN0KCdQYXJhbXMgaGFzIFwiaWRcIicsICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVwbGFjZUlkQnlQcmltYXJ5S2V5KHsgaWQ6ICcxMjMnLCBjb2xvcjogJ3JlZCcgfSwgZGVmYXVsdE1vbmdvb3NlTW9kZWwpO1xuICAgICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHsgX2lkOiAnMTIzJywgY29sb3I6ICdyZWQnIH0pO1xuICAgICAgfSk7XG4gICAgICB0ZXN0KCdQYXJhbXMgZG9lc25cXCd0IGhhdmUgXCJpZFwiIG5vciBcIl9pZFwiJywgKCkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSByZXBsYWNlSWRCeVByaW1hcnlLZXkoeyBjb2xvcjogJ3JlZCcgfSwgZGVmYXVsdE1vbmdvb3NlTW9kZWwpO1xuICAgICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHsgY29sb3I6ICdyZWQnIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnTW9kZWwgcHJpbWFyeSBrZXkgaXMgXCJhUmFuZG9tUHJpbWFyeUtleVwiJywgKCkgPT4ge1xuICAgICAgdGVzdCgnUGFyYW1zIGhhcyBcImlkXCInLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlcGxhY2VJZEJ5UHJpbWFyeUtleSh7IGlkOiAnMTIzJywgY29sb3I6ICdyZWQnIH0sIGN1c3RvbU1vZGVsKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7IGFSYW5kb21QcmltYXJ5S2V5OiAnMTIzJywgY29sb3I6ICdyZWQnIH0pO1xuICAgICAgfSk7XG4gICAgICB0ZXN0KCdQYXJhbXMgaGFzIFwiYVJhbmRvbVByaW1hcnlLZXlcIicsICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVwbGFjZUlkQnlQcmltYXJ5S2V5KFxuICAgICAgICAgIHsgYVJhbmRvbVByaW1hcnlLZXk6ICcxMjMnLCBjb2xvcjogJ3JlZCcgfSxcbiAgICAgICAgICBjdXN0b21Nb2RlbCxcbiAgICAgICAgKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7IGFSYW5kb21QcmltYXJ5S2V5OiAnMTIzJywgY29sb3I6ICdyZWQnIH0pO1xuICAgICAgfSk7XG4gICAgICB0ZXN0KCdQYXJhbXMgZG9lc25cXCd0IGhhdmUgXCJpZFwiIG5vciBcImFSYW5kb21QcmltYXJ5S2V5XCInLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlcGxhY2VJZEJ5UHJpbWFyeUtleSh7IGNvbG9yOiAncmVkJyB9LCBjdXN0b21Nb2RlbCk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoeyBjb2xvcjogJ3JlZCcgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==