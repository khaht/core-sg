{"version":3,"sources":["primary-keys.test.js"],"names":["replaceIdByPrimaryKey","require","describe","defaultPostgresModel","primaryKey","defaultMongooseModel","customModel","test","result","id","color","expect","toEqual","_id","aRandomPrimaryKey"],"mappings":"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","sourcesContent":["const { replaceIdByPrimaryKey } = require('../primary-key');\n\ndescribe('Primary Key', () => {\n  describe('replaceIdByPrimaryKey', () => {\n    const defaultPostgresModel = { primaryKey: 'id' };\n    const defaultMongooseModel = { primaryKey: '_id' };\n    const customModel = { primaryKey: 'aRandomPrimaryKey' };\n\n    describe('Model primary key is \"id\"', () => {\n      test('Params has \"id\"', () => {\n        const result = replaceIdByPrimaryKey({ id: '123', color: 'red' }, defaultPostgresModel);\n        expect(result).toEqual({ id: '123', color: 'red' });\n      });\n      test('Params doesn\\'t have \"id\"', () => {\n        const result = replaceIdByPrimaryKey({ color: 'red' }, defaultPostgresModel);\n        expect(result).toEqual({ color: 'red' });\n      });\n    });\n\n    describe('Model primary key is \"_id\"', () => {\n      test('Params has \"_id\"', () => {\n        const result = replaceIdByPrimaryKey({ _id: '123', color: 'red' }, defaultMongooseModel);\n        expect(result).toEqual({ _id: '123', color: 'red' });\n      });\n      test('Params has \"id\"', () => {\n        const result = replaceIdByPrimaryKey({ id: '123', color: 'red' }, defaultMongooseModel);\n        expect(result).toEqual({ _id: '123', color: 'red' });\n      });\n      test('Params doesn\\'t have \"id\" nor \"_id\"', () => {\n        const result = replaceIdByPrimaryKey({ color: 'red' }, defaultMongooseModel);\n        expect(result).toEqual({ color: 'red' });\n      });\n    });\n\n    describe('Model primary key is \"aRandomPrimaryKey\"', () => {\n      test('Params has \"id\"', () => {\n        const result = replaceIdByPrimaryKey({ id: '123', color: 'red' }, customModel);\n        expect(result).toEqual({ aRandomPrimaryKey: '123', color: 'red' });\n      });\n      test('Params has \"aRandomPrimaryKey\"', () => {\n        const result = replaceIdByPrimaryKey(\n          { aRandomPrimaryKey: '123', color: 'red' },\n          customModel,\n        );\n        expect(result).toEqual({ aRandomPrimaryKey: '123', color: 'red' });\n      });\n      test('Params doesn\\'t have \"id\" nor \"aRandomPrimaryKey\"', () => {\n        const result = replaceIdByPrimaryKey({ color: 'red' }, customModel);\n        expect(result).toEqual({ color: 'red' });\n      });\n    });\n  });\n});\n"]}