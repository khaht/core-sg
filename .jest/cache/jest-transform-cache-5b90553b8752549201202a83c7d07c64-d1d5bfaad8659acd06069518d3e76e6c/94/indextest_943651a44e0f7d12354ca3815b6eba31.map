{"version":3,"sources":["index.test.js"],"names":["invalidToken","internalError","requestRejected","requestSkipped","validationError","retryAbleError","serviceNotFound","requestTimeout","forbidden","unAuthorized","badRequest","require","describe","res","status","jest","fn","json","test","expect","toEqual","headersSent","message"],"mappings":"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","sourcesContent":["const {\n  invalidToken,\n  internalError,\n  requestRejected,\n  requestSkipped,\n  validationError,\n  retryAbleError,\n  serviceNotFound,\n  requestTimeout,\n  forbidden,\n  unAuthorized,\n  badRequest,\n} = require('../index');\n\ndescribe('Error', () => {\n  const res = {\n    status: jest.fn(() => ({\n      json: jest.fn(),\n    })),\n  };\n\n  test('Should return invalid token error', () => {\n    expect(invalidToken(res)).toEqual({ headersSent: true });\n  });\n\n  test('Should return internal error', () => {\n    expect(internalError(res)).toEqual({ headersSent: true });\n  });\n\n  test('Should return request rejected', () => {\n    expect(requestRejected(res)).toEqual({ headersSent: true });\n  });\n\n  test('Should return request skipped', () => {\n    expect(requestSkipped(res)).toEqual({ headersSent: true });\n  });\n\n  test('Should return validation error', () => {\n    expect(validationError(res, { message: 'validation error' })).toEqual({ headersSent: true });\n  });\n\n  test('Should return validation error with message by statusCode', () => {\n    expect(validationError(res, {})).toEqual({ headersSent: true });\n  });\n\n  test('Should return retry able error', () => {\n    expect(retryAbleError(res, {})).toEqual({ headersSent: true });\n  });\n\n  test('Should return service not found', () => {\n    expect(serviceNotFound(res)).toEqual({ headersSent: true });\n  });\n\n  test('Should return request timeout', () => {\n    expect(requestTimeout(res)).toEqual({ headersSent: true });\n  });\n\n  test('Should return forbidden', () => {\n    expect(forbidden(res)).toEqual({ headersSent: true });\n  });\n\n  test('Should return unAuthorized', () => {\n    expect(unAuthorized(res)).toEqual({ headersSent: true });\n  });\n\n  test('Should return badRequest', () => {\n    expect(badRequest(res)).toEqual({ headersSent: true });\n  });\n});\n"]}