3fe974427349b2790bad3df6f69a86d1
const {
  invalidToken,
  internalError,
  requestRejected,
  requestSkipped,
  validationError,
  retryAbleError,
  serviceNotFound,
  requestTimeout,
  forbidden,
  unAuthorized,
  badRequest
} = require('../index');

describe('Error', () => {
  const res = {
    status: jest.fn(() => ({
      json: jest.fn()
    }))
  };
  test('Should return invalid token error', () => {
    expect(invalidToken(res)).toEqual({
      headersSent: true
    });
  });
  test('Should return internal error', () => {
    expect(internalError(res)).toEqual({
      headersSent: true
    });
  });
  test('Should return request rejected', () => {
    expect(requestRejected(res)).toEqual({
      headersSent: true
    });
  });
  test('Should return request skipped', () => {
    expect(requestSkipped(res)).toEqual({
      headersSent: true
    });
  });
  test('Should return validation error', () => {
    expect(validationError(res, {
      message: 'validation error'
    })).toEqual({
      headersSent: true
    });
  });
  test('Should return validation error with message by statusCode', () => {
    expect(validationError(res, {})).toEqual({
      headersSent: true
    });
  });
  test('Should return retry able error', () => {
    expect(retryAbleError(res, {})).toEqual({
      headersSent: true
    });
  });
  test('Should return service not found', () => {
    expect(serviceNotFound(res)).toEqual({
      headersSent: true
    });
  });
  test('Should return request timeout', () => {
    expect(requestTimeout(res)).toEqual({
      headersSent: true
    });
  });
  test('Should return forbidden', () => {
    expect(forbidden(res)).toEqual({
      headersSent: true
    });
  });
  test('Should return unAuthorized', () => {
    expect(unAuthorized(res)).toEqual({
      headersSent: true
    });
  });
  test('Should return badRequest', () => {
    expect(badRequest(res)).toEqual({
      headersSent: true
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRlc3QuanMiXSwibmFtZXMiOlsiaW52YWxpZFRva2VuIiwiaW50ZXJuYWxFcnJvciIsInJlcXVlc3RSZWplY3RlZCIsInJlcXVlc3RTa2lwcGVkIiwidmFsaWRhdGlvbkVycm9yIiwicmV0cnlBYmxlRXJyb3IiLCJzZXJ2aWNlTm90Rm91bmQiLCJyZXF1ZXN0VGltZW91dCIsImZvcmJpZGRlbiIsInVuQXV0aG9yaXplZCIsImJhZFJlcXVlc3QiLCJyZXF1aXJlIiwiZGVzY3JpYmUiLCJyZXMiLCJzdGF0dXMiLCJqZXN0IiwiZm4iLCJqc29uIiwidGVzdCIsImV4cGVjdCIsInRvRXF1YWwiLCJoZWFkZXJzU2VudCIsIm1lc3NhZ2UiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU07QUFDSkEsRUFBQUEsWUFESTtBQUVKQyxFQUFBQSxhQUZJO0FBR0pDLEVBQUFBLGVBSEk7QUFJSkMsRUFBQUEsY0FKSTtBQUtKQyxFQUFBQSxlQUxJO0FBTUpDLEVBQUFBLGNBTkk7QUFPSkMsRUFBQUEsZUFQSTtBQVFKQyxFQUFBQSxjQVJJO0FBU0pDLEVBQUFBLFNBVEk7QUFVSkMsRUFBQUEsWUFWSTtBQVdKQyxFQUFBQTtBQVhJLElBWUZDLE9BQU8sQ0FBQyxVQUFELENBWlg7O0FBY0FDLFFBQVEsQ0FBQyxPQUFELEVBQVUsTUFBTTtBQUN0QixRQUFNQyxHQUFHLEdBQUc7QUFDVkMsSUFBQUEsTUFBTSxFQUFFQyxJQUFJLENBQUNDLEVBQUwsQ0FBUSxPQUFPO0FBQ3JCQyxNQUFBQSxJQUFJLEVBQUVGLElBQUksQ0FBQ0MsRUFBTDtBQURlLEtBQVAsQ0FBUjtBQURFLEdBQVo7QUFNQUUsRUFBQUEsSUFBSSxDQUFDLG1DQUFELEVBQXNDLE1BQU07QUFDOUNDLElBQUFBLE1BQU0sQ0FBQ25CLFlBQVksQ0FBQ2EsR0FBRCxDQUFiLENBQU4sQ0FBMEJPLE9BQTFCLENBQWtDO0FBQUVDLE1BQUFBLFdBQVcsRUFBRTtBQUFmLEtBQWxDO0FBQ0QsR0FGRyxDQUFKO0FBSUFILEVB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dGVudCI6WyJjb25zdCB7XG4gIGludmFsaWRUb2tlbixcbiAgaW50ZXJuYWxFcnJvcixcbiAgcmVxdWVzdFJlamVjdGVkLFxuICByZXF1ZXN0U2tpcHBlZCxcbiAgdmFsaWRhdGlvbkVycm9yLFxuICByZXRyeUFibGVFcnJvcixcbiAgc2VydmljZU5vdEZvdW5kLFxuICByZXF1ZXN0VGltZW91dCxcbiAgZm9yYmlkZGVuLFxuICB1bkF1dGhvcml6ZWQsXG4gIGJhZFJlcXVlc3QsXG59ID0gcmVxdWlyZSgnLi4vaW5kZXgnKTtcblxuZGVzY3JpYmUoJ0Vycm9yJywgKCkgPT4ge1xuICBjb25zdCByZXMgPSB7XG4gICAgc3RhdHVzOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICBqc29uOiBqZXN0LmZuKCksXG4gICAgfSkpLFxuICB9O1xuXG4gIHRlc3QoJ1Nob3VsZCByZXR1cm4gaW52YWxpZCB0b2tlbiBlcnJvcicsICgpID0+IHtcbiAgICBleHBlY3QoaW52YWxpZFRva2VuKHJlcykpLnRvRXF1YWwoeyBoZWFkZXJzU2VudDogdHJ1ZSB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnU2hvdWxkIHJldHVybiBpbnRlcm5hbCBlcnJvcicsICgpID0+IHtcbiAgICBleHBlY3QoaW50ZXJuYWxFcnJvcihyZXMpKS50b0VxdWFsKHsgaGVhZGVyc1NlbnQ6IHRydWUgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ1Nob3VsZCByZXR1cm4gcmVxdWVzdCByZWplY3RlZCcsICgpID0+IHtcbiAgICBleHBlY3QocmVxdWVzdFJlamVjdGVkKHJlcykpLnRvRXF1YWwoeyBoZWFkZXJzU2VudDogdHJ1ZSB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnU2hvdWxkIHJldHVybiByZXF1ZXN0IHNraXBwZWQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHJlcXVlc3RTa2lwcGVkKHJlcykpLnRvRXF1YWwoeyBoZWFkZXJzU2VudDogdHJ1ZSB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnU2hvdWxkIHJldHVybiB2YWxpZGF0aW9uIGVycm9yJywgKCkgPT4ge1xuICAgIGV4cGVjdCh2YWxpZGF0aW9uRXJyb3IocmVzLCB7IG1lc3NhZ2U6ICd2YWxpZGF0aW9uIGVycm9yJyB9KSkudG9FcXVhbCh7IGhlYWRlcnNTZW50OiB0cnVlIH0pO1xuICB9KTtcblxuICB0ZXN0KCdTaG91bGQgcmV0dXJuIHZhbGlkYXRpb24gZXJyb3Igd2l0aCBtZXNzYWdlIGJ5IHN0YXR1c0NvZGUnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHZhbGlkYXRpb25FcnJvcihyZXMsIHt9KSkudG9FcXVhbCh7IGhlYWRlcnNTZW50OiB0cnVlIH0pO1xuICB9KTtcblxuICB0ZXN0KCdTaG91bGQgcmV0dXJuIHJldHJ5IGFibGUgZXJyb3InLCAoKSA9PiB7XG4gICAgZXhwZWN0KHJldHJ5QWJsZUVycm9yKHJlcywge30pKS50b0VxdWFsKHsgaGVhZGVyc1NlbnQ6IHRydWUgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ1Nob3VsZCByZXR1cm4gc2VydmljZSBub3QgZm91bmQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHNlcnZpY2VOb3RGb3VuZChyZXMpKS50b0VxdWFsKHsgaGVhZGVyc1NlbnQ6IHRydWUgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ1Nob3VsZCByZXR1cm4gcmVxdWVzdCB0aW1lb3V0JywgKCkgPT4ge1xuICAgIGV4cGVjdChyZXF1ZXN0VGltZW91dChyZXMpKS50b0VxdWFsKHsgaGVhZGVyc1NlbnQ6IHRydWUgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ1Nob3VsZCByZXR1cm4gZm9yYmlkZGVuJywgKCkgPT4ge1xuICAgIGV4cGVjdChmb3JiaWRkZW4ocmVzKSkudG9FcXVhbCh7IGhlYWRlcnNTZW50OiB0cnVlIH0pO1xuICB9KTtcblxuICB0ZXN0KCdTaG91bGQgcmV0dXJuIHVuQXV0aG9yaXplZCcsICgpID0+IHtcbiAgICBleHBlY3QodW5BdXRob3JpemVkKHJlcykpLnRvRXF1YWwoeyBoZWFkZXJzU2VudDogdHJ1ZSB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnU2hvdWxkIHJldHVybiBiYWRSZXF1ZXN0JywgKCkgPT4ge1xuICAgIGV4cGVjdChiYWRSZXF1ZXN0KHJlcykpLnRvRXF1YWwoeyBoZWFkZXJzU2VudDogdHJ1ZSB9KTtcbiAgfSk7XG59KTtcbiJdfQ==