{"version":3,"sources":["index.js"],"names":["HttpStatusCode","require","FORBIDDEN","INTERNAL_ERROR","UN_AUTHORIZED","INVALID_TOKEN","SERVICE_NOT_FOUND","REQUEST_SKIPPED","REQUEST_REJECTED","REQUEST_TIMEOUT","VALIDATION_ERROR","BAD_REQUEST","getHttpMsg","statusCode","getMessage","getAnyMsg","anyMsg","message","resStatus","res","options","type","status","json","headersSent","internalError","forbidden","unAuthorized","invalidToken","serviceNotFound","requestTimeout","requestSkipped","requestRejected","validationError","badRequest","retryAbleError","module","exports"],"mappings":"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","sourcesContent":["const HttpStatusCode = require('http-status-code');\nconst {\n  FORBIDDEN,\n  INTERNAL_ERROR,\n  UN_AUTHORIZED,\n  INVALID_TOKEN,\n  SERVICE_NOT_FOUND,\n  REQUEST_SKIPPED,\n  REQUEST_REJECTED,\n  REQUEST_TIMEOUT,\n  VALIDATION_ERROR,\n  BAD_REQUEST,\n} = require('../constants');\n\nconst getHttpMsg = (statusCode) => HttpStatusCode.getMessage(statusCode);\n\nconst getAnyMsg = (anyMsg, statusCode = 400) => {\n  let message = anyMsg;\n  if (typeof anyMsg === 'object') {\n    message = anyMsg.message || getHttpMsg(statusCode);\n  }\n  return !!message ? message : getHttpMsg(statusCode);\n};\n\nconst resStatus = (\n  res,\n  options = { type: INTERNAL_ERROR, statusCode: 500, message: getHttpMsg(500) }\n) => {\n  const { type, statusCode, message } = options;\n  res.status(statusCode).json({\n    message,\n    type,\n    statusCode,\n  });\n  return {\n    headersSent: true,\n  };\n};\n\nconst internalError = (res) => resStatus(res);\n\nconst forbidden = (res) =>\n  resStatus(res, {\n    type: FORBIDDEN,\n    statusCode: 403,\n    message: getHttpMsg(403),\n  });\n\nconst unAuthorized = (res) =>\n  resStatus(res, {\n    type: UN_AUTHORIZED,\n    statusCode: 401,\n    message: getHttpMsg(401),\n  });\n\nconst invalidToken = (res) =>\n  resStatus(res, {\n    type: INVALID_TOKEN,\n    statusCode: 401,\n    message: getHttpMsg(401),\n  });\n\nconst serviceNotFound = (res) =>\n  resStatus(res, {\n    type: SERVICE_NOT_FOUND,\n    statusCode: 404,\n    message: getHttpMsg(404),\n  });\n\nconst requestTimeout = (res) =>\n  resStatus(res, {\n    type: REQUEST_TIMEOUT,\n    statusCode: 504,\n    message: getHttpMsg(504),\n  });\n\nconst requestSkipped = (res) =>\n  resStatus(res, {\n    type: REQUEST_SKIPPED,\n    statusCode: 514,\n    message: getHttpMsg(514),\n  });\n\nconst requestRejected = (res) =>\n  resStatus(res, {\n    type: REQUEST_REJECTED,\n    statusCode: 503,\n    message: getHttpMsg(503),\n  });\n\nconst validationError = (res, options) =>\n  resStatus(res, {\n    type: VALIDATION_ERROR,\n    statusCode: 422,\n    message: getAnyMsg(options, 422),\n  });\n\nconst badRequest = (res, options) =>\n  resStatus(res, {\n    type: BAD_REQUEST,\n    statusCode: 400,\n    message: getAnyMsg(options),\n  });\n\nconst retryAbleError = (res, options) =>\n  resStatus(res, {\n    type: options.type || INTERNAL_ERROR,\n    statusCode: options.statusCode || 500,\n    message: options.message || getHttpMsg(500),\n  });\n\nmodule.exports = {\n  invalidToken,\n  internalError,\n  requestRejected,\n  requestSkipped,\n  validationError,\n  retryAbleError,\n  serviceNotFound,\n  requestTimeout,\n  forbidden,\n  unAuthorized,\n  badRequest,\n};\n"]}