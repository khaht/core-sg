{"version":3,"sources":["database-manager.test.js"],"names":["_","require","logger","createDatabaseManager","describe","config","database","connections","default","connector","settings","client","serviceAccount","process","env","SERVICE_ACCOUNT_PATH","options","useNullAsDefault","defaultConnection","global","sgApp","log","get","path","defaultValue","set","val","has","DatabaseManager","test","expect","initialized","toBeFalsy","initialize","toBeTruthy","catch","e","message","toBe","db","collection","jest","fn","mockImplementation","resp","query","toHaveBeenCalled","toThrow","find","conditions","email","findOne","create","name","update","delete"],"mappings":"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","sourcesContent":["const _ = require('lodash');\nconst logger = require('utils/logger.util');\nconst { createDatabaseManager } = require('../database-manager');\n\ndescribe('Create database manager', () => {\n  const config = {\n    database: {\n      connections: {\n        default: {\n          connector: 'firebase',\n          settings: {\n            client: 'cloudfirestore',\n            serviceAccount:\n              process.env.SERVICE_ACCOUNT_PATH ||\n              '../firebase/serviceaccount.json',\n          },\n          options: {\n            useNullAsDefault: true,\n          },\n        },\n      },\n      defaultConnection: 'default',\n    },\n  };\n  global.sgApp = {\n    log: logger,\n    config: {\n      ...config,\n      get(path, defaultValue) {\n        return _.get(config, path, defaultValue);\n      },\n\n      set(path, val) {\n        _.set(config, path, val);\n        return this;\n      },\n\n      has(path) {\n        return _.has(config, path);\n      },\n    },\n  };\n\n  const DatabaseManager = createDatabaseManager(sgApp);\n\n  test('Should return initialize=flase', () => {\n    expect(DatabaseManager.initialized).toBeFalsy();\n  });\n\n  describe('Database manager initialize', () => {\n    test('Should return initialize=true', async () => {\n      await DatabaseManager.initialize();\n      expect(DatabaseManager.initialized).toBeTruthy();\n    });\n\n    test('Should return error if call initialize function again', async () => {\n      await DatabaseManager.initialize().catch((e) => {\n        expect(e.message).toBe('Database manager already initialized');\n      });\n    });\n  });\n\n  describe('Query DB', () => {\n    test('Should call query function', () => {\n      DatabaseManager.connector.db.collection = jest\n        .fn()\n        .mockImplementation(() => 'users');\n      const resp = DatabaseManager.query('users');\n      expect(DatabaseManager.connector.db.collection).toHaveBeenCalled();\n      expect(resp).toBe('users');\n    });\n\n    test('Should call query function and throw error when entity is null', () => {\n      expect(() => DatabaseManager.query()).toThrow();\n    });\n\n    test('Should call query function and throw error when model is null', () => {\n      DatabaseManager.connector.db.collection = jest\n        .fn()\n        .mockImplementation(() => '');\n      expect(() => DatabaseManager.query('users')).toThrow();\n    });\n\n    test('Should call find function', () => {\n      DatabaseManager.connector.find = jest.fn();\n      DatabaseManager.find('users', {\n        conditions: { email: 'test@gmail.com' },\n      });\n      expect(DatabaseManager.connector.find).toHaveBeenCalled();\n    });\n\n    test('Should call findOne function', () => {\n      DatabaseManager.connector.findOne = jest.fn();\n      DatabaseManager.findOne('users', '123456789');\n      expect(DatabaseManager.connector.findOne).toHaveBeenCalled();\n    });\n\n    test('Should call create function', () => {\n      DatabaseManager.connector.create = jest.fn();\n      DatabaseManager.create('users', { name: 'ABC' }, '123456789');\n      expect(DatabaseManager.connector.create).toHaveBeenCalled();\n    });\n\n    test('Should call update function', () => {\n      DatabaseManager.connector.update = jest.fn();\n      DatabaseManager.update('users', { name: 'DEF' }, '123456789');\n      expect(DatabaseManager.connector.update).toHaveBeenCalled();\n    });\n\n    test('Should call delete function', () => {\n      DatabaseManager.connector.delete = jest.fn();\n      DatabaseManager.delete('users', '123456789');\n      expect(DatabaseManager.connector.delete).toHaveBeenCalled();\n    });\n  });\n});\n"]}