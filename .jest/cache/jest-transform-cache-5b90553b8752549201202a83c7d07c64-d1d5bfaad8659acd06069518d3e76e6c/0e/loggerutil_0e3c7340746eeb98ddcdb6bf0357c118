6b5909a671da39bbe88edfa5cc2b4028
/**
 * Logger.
 */
const pino = require('pino');

const _ = require('lodash');

const env = require('@ltv/env');

const logLevels = Object.keys(pino.levels.values);

function getLogLevel() {
  if (!_.isString(process.env.LOG_LEVEL)) {
    return 'debug';
  }

  const logLevel = process.env.LOG_LEVEL.toLowerCase();

  if (!_.includes(logLevels, logLevel)) {
    const acceptedLogs = logLevels.join("', '");
    throw new Error(`Invalid log level set in LOG_LEVEL environment variable. Accepted values are: '${acceptedLogs}'.`);
  }

  return logLevel;
}

const level = getLogLevel();
let loggerConfig = {
  level,
  timestamp: env.bool('LOG_TIMESTAMP', true),
  forceColor: env.bool('LOG_FORCE_COLOR', true),
  enabled: env.bool('LOG_ENABLED', true)
};

if (env.bool('LOG_PRETTY_PRINT', true)) {
  loggerConfig = { ...loggerConfig,
    prettyPrint: {
      levelFirst: true,
      colorize: true,
      translateTime: true
    }
  };
}

const logger = pino(loggerConfig);
module.exports = logger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ2dlci51dGlsLmpzIl0sIm5hbWVzIjpbInBpbm8iLCJyZXF1aXJlIiwiXyIsImVudiIsImxvZ0xldmVscyIsIk9iamVjdCIsImtleXMiLCJsZXZlbHMiLCJ2YWx1ZXMiLCJnZXRMb2dMZXZlbCIsImlzU3RyaW5nIiwicHJvY2VzcyIsIkxPR19MRVZFTCIsImxvZ0xldmVsIiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsImFjY2VwdGVkTG9ncyIsImpvaW4iLCJFcnJvciIsImxldmVsIiwibG9nZ2VyQ29uZmlnIiwidGltZXN0YW1wIiwiYm9vbCIsImZvcmNlQ29sb3IiLCJlbmFibGVkIiwicHJldHR5UHJpbnQiLCJsZXZlbEZpcnN0IiwiY29sb3JpemUiLCJ0cmFuc2xhdGVUaW1lIiwibG9nZ2VyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNQyxDQUFDLEdBQUdELE9BQU8sQ0FBQyxRQUFELENBQWpCOztBQUNBLE1BQU1FLEdBQUcsR0FBR0YsT0FBTyxDQUFDLFVBQUQsQ0FBbkI7O0FBRUEsTUFBTUcsU0FBUyxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWU4sSUFBSSxDQUFDTyxNQUFMLENBQVlDLE1BQXhCLENBQWxCOztBQUVBLFNBQVNDLFdBQVQsR0FBdUI7QUFDckIsTUFBSSxDQUFDUCxDQUFDLENBQUNRLFFBQUYsQ0FBV0MsT0FBTyxDQUFDUixHQUFSLENBQVlTLFNBQXZCLENBQUwsRUFBd0M7QUFDdEMsV0FBTyxPQUFQO0FBQ0Q7O0FBRUQsUUFBTUMsUUFBUSxHQUFHRixPQUFPLENBQUNSLEdBQVIsQ0FBWVMsU0FBWixDQUFzQkUsV0FBdEIsRUFBakI7O0FBRUEsTUFBSSxDQUFDWixDQUFDLENBQUNhLFFBQUYsQ0FBV1gsU0FBWCxFQUFzQlMsUUFBdEIsQ0FBTCxFQUFzQztBQUNwQyxVQUFNRyxZQUFZLEdBQUdaLFNBQVMsQ0FBQ2EsSUFBVixDQUFlLE1BQWYsQ0FBckI7QUFDQSxVQUFNLElBQUlDLEtBQUosQ0FDSCxrRkFBaUZGLFlBQWEsSUFEM0YsQ0FBTjtBQUdEOztBQUVELFNBQU9ILFFBQVA7QUFDRDs7QUFFRCxNQUFNTSxLQUFLLEdBQUdWLFdBQVcsRUFBekI7QUFDQSxJQUFJVyxZQUFZLEdBQUc7QUFDakJELEVBQUFBLEtBRGlCO0FBRWpCRSxFQUFBQSxTQUFTLEVBQUVsQixHQUFHLENBQUNtQixJQUFKLENBQVMsZUFBVCxFQUEwQixJQUExQixDQUZNO0FBR2pCQyxFQUFBQSxVQUFVLEVBQUVwQixHQUFHLENBQUNtQixJQUFKLENBQVMsaUJBQVQsRUFBNEIsSUFBNUIsQ0FISztBQUlqQkUsRUFBQUEsT0FBTyxFQUFFckIsR0FBRyxDQUFDbUIsSUFBSixDQUFTLGFBQVQsRUFBd0IsSUFBeEI7QUFKUSxDQUFuQjs7QUFPQSxJQUFJbkIsR0FBRyxDQUFDbUIsSUFBSixDQUFTLGtCQUFULEVBQTZCLElBQTdCLENBQUosRUFBd0M7QUFDdENGLEVBQUFBLFlBQVksR0FBRyxFQUNiLEdBQUdBLFlBRFU7QUFFYkssSUFBQUEsV0FBVyxFQUFFO0FBQ1hDLE1BQUFBLFVBQVUsRUFBRSxJQUREO0FBRVhDLE1BQUFBLFFBQVEsRUFBRSxJQUZDO0FBR1hDLE1BQUFBLGFBQWEsRUFBRTtBQUhKO0FBRkEsR0FBZjtBQVFEOztBQUVELE1BQU1DLE1BQU0sR0FBRzdCLElBQUksQ0FBQ29CLFlBQUQsQ0FBbkI7QUFFQVUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCRixNQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTG9nZ2VyLlxuICovXG5cbmNvbnN0IHBpbm8gPSByZXF1aXJlKCdwaW5vJyk7XG5jb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5jb25zdCBlbnYgPSByZXF1aXJlKCdAbHR2L2VudicpO1xuXG5jb25zdCBsb2dMZXZlbHMgPSBPYmplY3Qua2V5cyhwaW5vLmxldmVscy52YWx1ZXMpO1xuXG5mdW5jdGlvbiBnZXRMb2dMZXZlbCgpIHtcbiAgaWYgKCFfLmlzU3RyaW5nKHByb2Nlc3MuZW52LkxPR19MRVZFTCkpIHtcbiAgICByZXR1cm4gJ2RlYnVnJztcbiAgfVxuXG4gIGNvbnN0IGxvZ0xldmVsID0gcHJvY2Vzcy5lbnYuTE9HX0xFVkVMLnRvTG93ZXJDYXNlKCk7XG5cbiAgaWYgKCFfLmluY2x1ZGVzKGxvZ0xldmVscywgbG9nTGV2ZWwpKSB7XG4gICAgY29uc3QgYWNjZXB0ZWRMb2dzID0gbG9nTGV2ZWxzLmpvaW4oXCInLCAnXCIpO1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBJbnZhbGlkIGxvZyBsZXZlbCBzZXQgaW4gTE9HX0xFVkVMIGVudmlyb25tZW50IHZhcmlhYmxlLiBBY2NlcHRlZCB2YWx1ZXMgYXJlOiAnJHthY2NlcHRlZExvZ3N9Jy5gXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBsb2dMZXZlbDtcbn1cblxuY29uc3QgbGV2ZWwgPSBnZXRMb2dMZXZlbCgpO1xubGV0IGxvZ2dlckNvbmZpZyA9IHtcbiAgbGV2ZWwsXG4gIHRpbWVzdGFtcDogZW52LmJvb2woJ0xPR19USU1FU1RBTVAnLCB0cnVlKSxcbiAgZm9yY2VDb2xvcjogZW52LmJvb2woJ0xPR19GT1JDRV9DT0xPUicsIHRydWUpLFxuICBlbmFibGVkOiBlbnYuYm9vbCgnTE9HX0VOQUJMRUQnLCB0cnVlKSxcbn07XG5cbmlmIChlbnYuYm9vbCgnTE9HX1BSRVRUWV9QUklOVCcsIHRydWUpKSB7XG4gIGxvZ2dlckNvbmZpZyA9IHtcbiAgICAuLi5sb2dnZXJDb25maWcsXG4gICAgcHJldHR5UHJpbnQ6IHtcbiAgICAgIGxldmVsRmlyc3Q6IHRydWUsXG4gICAgICBjb2xvcml6ZTogdHJ1ZSxcbiAgICAgIHRyYW5zbGF0ZVRpbWU6IHRydWUsXG4gICAgfSxcbiAgfTtcbn1cblxuY29uc3QgbG9nZ2VyID0gcGlubyhsb2dnZXJDb25maWcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvZ2dlcjtcbiJdfQ==