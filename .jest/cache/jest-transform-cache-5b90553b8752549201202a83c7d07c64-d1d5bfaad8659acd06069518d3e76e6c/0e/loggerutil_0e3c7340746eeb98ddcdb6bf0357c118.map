{"version":3,"sources":["logger.util.js"],"names":["pino","require","_","env","logLevels","Object","keys","levels","values","getLogLevel","isString","process","LOG_LEVEL","logLevel","toLowerCase","includes","acceptedLogs","join","Error","level","loggerConfig","timestamp","bool","forceColor","enabled","prettyPrint","levelFirst","colorize","translateTime","logger","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,UAAD,CAAnB;;AAEA,MAAMG,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYN,IAAI,CAACO,MAAL,CAAYC,MAAxB,CAAlB;;AAEA,SAASC,WAAT,GAAuB;AACrB,MAAI,CAACP,CAAC,CAACQ,QAAF,CAAWC,OAAO,CAACR,GAAR,CAAYS,SAAvB,CAAL,EAAwC;AACtC,WAAO,OAAP;AACD;;AAED,QAAMC,QAAQ,GAAGF,OAAO,CAACR,GAAR,CAAYS,SAAZ,CAAsBE,WAAtB,EAAjB;;AAEA,MAAI,CAACZ,CAAC,CAACa,QAAF,CAAWX,SAAX,EAAsBS,QAAtB,CAAL,EAAsC;AACpC,UAAMG,YAAY,GAAGZ,SAAS,CAACa,IAAV,CAAe,MAAf,CAArB;AACA,UAAM,IAAIC,KAAJ,CACH,kFAAiFF,YAAa,IAD3F,CAAN;AAGD;;AAED,SAAOH,QAAP;AACD;;AAED,MAAMM,KAAK,GAAGV,WAAW,EAAzB;AACA,IAAIW,YAAY,GAAG;AACjBD,EAAAA,KADiB;AAEjBE,EAAAA,SAAS,EAAElB,GAAG,CAACmB,IAAJ,CAAS,eAAT,EAA0B,IAA1B,CAFM;AAGjBC,EAAAA,UAAU,EAAEpB,GAAG,CAACmB,IAAJ,CAAS,iBAAT,EAA4B,IAA5B,CAHK;AAIjBE,EAAAA,OAAO,EAAErB,GAAG,CAACmB,IAAJ,CAAS,aAAT,EAAwB,IAAxB;AAJQ,CAAnB;;AAOA,IAAInB,GAAG,CAACmB,IAAJ,CAAS,kBAAT,EAA6B,IAA7B,CAAJ,EAAwC;AACtCF,EAAAA,YAAY,GAAG,EACb,GAAGA,YADU;AAEbK,IAAAA,WAAW,EAAE;AACXC,MAAAA,UAAU,EAAE,IADD;AAEXC,MAAAA,QAAQ,EAAE,IAFC;AAGXC,MAAAA,aAAa,EAAE;AAHJ;AAFA,GAAf;AAQD;;AAED,MAAMC,MAAM,GAAG7B,IAAI,CAACoB,YAAD,CAAnB;AAEAU,MAAM,CAACC,OAAP,GAAiBF,MAAjB","sourcesContent":["/**\n * Logger.\n */\n\nconst pino = require('pino');\nconst _ = require('lodash');\nconst env = require('@ltv/env');\n\nconst logLevels = Object.keys(pino.levels.values);\n\nfunction getLogLevel() {\n  if (!_.isString(process.env.LOG_LEVEL)) {\n    return 'debug';\n  }\n\n  const logLevel = process.env.LOG_LEVEL.toLowerCase();\n\n  if (!_.includes(logLevels, logLevel)) {\n    const acceptedLogs = logLevels.join(\"', '\");\n    throw new Error(\n      `Invalid log level set in LOG_LEVEL environment variable. Accepted values are: '${acceptedLogs}'.`\n    );\n  }\n\n  return logLevel;\n}\n\nconst level = getLogLevel();\nlet loggerConfig = {\n  level,\n  timestamp: env.bool('LOG_TIMESTAMP', true),\n  forceColor: env.bool('LOG_FORCE_COLOR', true),\n  enabled: env.bool('LOG_ENABLED', true),\n};\n\nif (env.bool('LOG_PRETTY_PRINT', true)) {\n  loggerConfig = {\n    ...loggerConfig,\n    prettyPrint: {\n      levelFirst: true,\n      colorize: true,\n      translateTime: true,\n    },\n  };\n}\n\nconst logger = pino(loggerConfig);\n\nmodule.exports = logger;\n"]}