{"version":3,"sources":["files.load.js"],"names":["path","require","_","fse","glob","filePathToPath","loadFiles","dir","pattern","requireFn","shouldUseFileNameAsKey","globArgs","root","files","cwd","file","absolutePath","resolve","cache","mod","extname","readJson","Object","defineProperty","enumerable","configurable","writable","value","basename","propPath","length","merge","setWith","module","exports"],"mappings":"AAAA;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,UAAD,CAAnB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,aAAD,CAApB;;AACA,MAAMI,cAAc,GAAGJ,OAAO,CAAC,yBAAD,CAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMK,SAAS,GAAG,OAChBC,GADgB,EAEhBC,OAFgB,EAGhB;AAAEC,EAAAA,SAAS,GAAGR,OAAd;AAAuBS,EAAAA,sBAAsB,GAAG,MAAM,IAAtD;AAA4DC,EAAAA,QAAQ,GAAG;AAAvE,IAA8E,EAH9D,KAIb;AACH,QAAMC,IAAI,GAAG,EAAb;AACA,QAAMC,KAAK,GAAG,MAAMT,IAAI,CAACI,OAAD,EAAU;AAAEM,IAAAA,GAAG,EAAEP,GAAP;AAAY,OAAGI;AAAf,GAAV,CAAxB,CAFG,CAIH;;AACA,OAAK,MAAMI,IAAX,IAAmBF,KAAnB,EAA0B;AACxB,UAAMG,YAAY,GAAGhB,IAAI,CAACiB,OAAL,CAAaV,GAAb,EAAkBQ,IAAlB,CAArB,CADwB,CAGxB;;AACA,WAAOd,OAAO,CAACiB,KAAR,CAAcF,YAAd,CAAP;AACA,QAAIG,GAAJ;;AAEA,QAAInB,IAAI,CAACoB,OAAL,CAAaJ,YAAb,MAA+B,OAAnC,EAA4C;AAC1CG,MAAAA,GAAG,GAAG,MAAMhB,GAAG,CAACkB,QAAJ,CAAaL,YAAb,CAAZ;AACD,KAFD,MAEO;AACLG,MAAAA,GAAG,GAAGV,SAAS,CAACO,YAAD,CAAf;AACD;;AAEDM,IAAAA,MAAM,CAACC,cAAP,CAAsBJ,GAAtB,EAA2B,cAA3B,EAA2C;AACzCK,MAAAA,UAAU,EAAE,IAD6B;AAEzCC,MAAAA,YAAY,EAAE,KAF2B;AAGzCC,MAAAA,QAAQ,EAAE,KAH+B;AAIzCC,MAAAA,KAAK,EAAE3B,IAAI,CAAC4B,QAAL,CAAcb,IAAd;AAJkC,KAA3C;AAOA,UAAMc,QAAQ,GAAGxB,cAAc,CAACU,IAAD,EAAOL,sBAAsB,CAACK,IAAD,CAA7B,CAA/B;AAEA,QAAIc,QAAQ,CAACC,MAAT,KAAoB,CAAxB,EAA2B5B,CAAC,CAAC6B,KAAF,CAAQnB,IAAR,EAAcO,GAAd;;AAC3BjB,IAAAA,CAAC,CAAC6B,KAAF,CAAQnB,IAAR,EAAcV,CAAC,CAAC8B,OAAF,CAAU,EAAV,EAAcH,QAAd,EAAwBV,GAAxB,EAA6BG,MAA7B,CAAd;AACD;;AAED,SAAOV,IAAP;AACD,CApCD;;AAsCAqB,MAAM,CAACC,OAAP,GAAiB5B,SAAjB","sourcesContent":["/* eslint-disable no-await-in-loop */\nconst path = require('path');\nconst _ = require('lodash');\nconst fse = require('fs-extra');\nconst glob = require('./glob.load');\nconst filePathToPath = require('./filepath-to-prop-path');\n\n/**\n * Returns an Object build from a list of files matching a glob pattern in a directory\n * It builds a tree structure resembling the folder structure in dir\n * @param {string} dir - Directory to load\n * @param {string} pattern - Glob pattern to search for\n * @param {Object} options - Options\n * @param {Function} options.requireFn - Function that will require the matches files\n * @param {Function} options.shouldUseFileNameAsKey - Weather to use the filename as a\n *                                          key in the Object path or not\n * @param {Object} options.globArgs - extra glob function arguments\n */\nconst loadFiles = async (\n  dir,\n  pattern,\n  { requireFn = require, shouldUseFileNameAsKey = () => true, globArgs = {} } = {},\n) => {\n  const root = {};\n  const files = await glob(pattern, { cwd: dir, ...globArgs });\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const file of files) {\n    const absolutePath = path.resolve(dir, file);\n\n    // load module\n    delete require.cache[absolutePath];\n    let mod;\n\n    if (path.extname(absolutePath) === '.json') {\n      mod = await fse.readJson(absolutePath);\n    } else {\n      mod = requireFn(absolutePath);\n    }\n\n    Object.defineProperty(mod, '__filename__', {\n      enumerable: true,\n      configurable: false,\n      writable: false,\n      value: path.basename(file),\n    });\n\n    const propPath = filePathToPath(file, shouldUseFileNameAsKey(file));\n\n    if (propPath.length === 0) _.merge(root, mod);\n    _.merge(root, _.setWith({}, propPath, mod, Object));\n  }\n\n  return root;\n};\n\nmodule.exports = loadFiles;\n"]}