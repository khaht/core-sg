{"version":3,"sources":["policies.load.test.js"],"names":["join","require","loadPolicies","getConfigDir","removeDir","createFile","isAuthenticatedContent","testConfigDir","describe","policyAuthPath","beforeAll","afterAll","test","resp","expect","isauthenticated","toBeInstanceOf","Function","toThrowError","toEqual"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAWC,OAAO,CAAC,MAAD,CAAxB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,kBAAD,CAA5B;;AACA,MAAM;AACJE,EAAAA,YADI;AAEJC,EAAAA,SAFI;AAGJC,EAAAA;AAHI,IAIFJ,OAAO,CAAC,uBAAD,CAJX;;AAMA,MAAMK,sBAAsB,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AASA,MAAMC,aAAa,GAAGJ,YAAY,CAAC,eAAD,CAAlC,C,CACA;;AAEAK,QAAQ,CAAC,eAAD,EAAkB,MAAM;AAC9B,QAAMC,cAAc,GAAGT,IAAI,CAACO,aAAD,EAAgB,oBAAhB,CAA3B;AAEAG,EAAAA,SAAS,CAAC,MAAM;AACdL,IAAAA,UAAU,CAACI,cAAD,EAAiBH,sBAAjB,CAAV;AACD,GAFQ,CAAT;AAGAK,EAAAA,QAAQ,CAAC,MAAM;AACbP,IAAAA,SAAS,CAACG,aAAD,CAAT;AACD,GAFO,CAAR;AAIAK,EAAAA,IAAI,CAAC,sBAAD,EAAyB,MAAM;AACjC,UAAMC,IAAI,GAAGX,YAAY,CAACK,aAAD,CAAzB;AACAO,IAAAA,MAAM,CAACD,IAAI,CAACE,eAAN,CAAN,CAA6BC,cAA7B,CAA4CC,QAA5C;AACD,GAHG,CAAJ;AAKAL,EAAAA,IAAI,CAAC,qDAAD,EAAwD,MAAM;AAChEP,IAAAA,UAAU,CAACL,IAAI,CAACO,aAAD,EAAgB,YAAhB,CAAL,EAAoC,qBAApC,CAAV;AACAO,IAAAA,MAAM,CAAC,MAAMZ,YAAY,CAACK,aAAD,CAAnB,CAAN,CAA0CW,YAA1C;AACD,GAHG,CAAJ;AAKAN,EAAAA,IAAI,CAAC,8DAAD,EAAiE,MAAM;AACzE,UAAMC,IAAI,GAAGX,YAAY,CAACK,aAAa,GAAG,eAAjB,CAAzB;AACAO,IAAAA,MAAM,CAACD,IAAD,CAAN,CAAaM,OAAb,CAAqB,EAArB;AACD,GAHG,CAAJ;AAID,CAxBO,CAAR","sourcesContent":["const { join } = require('path');\nconst loadPolicies = require('../policies.load');\nconst {\n  getConfigDir,\n  removeDir,\n  createFile,\n} = require('../../../tests/helper');\n\nconst isAuthenticatedContent = `\nmodule.exports = (req, res, next) => {\n  if (!req.meta.isAuthenticated) {\n    return res.forbidden();\n  }\n  return next();\n};\n`;\n\nconst testConfigDir = getConfigDir('test-policies');\n// const configDir = getConfigDir();\n\ndescribe('Load policies', () => {\n  const policyAuthPath = join(testConfigDir, 'isAuthenticated.js');\n\n  beforeAll(() => {\n    createFile(policyAuthPath, isAuthenticatedContent);\n  });\n  afterAll(() => {\n    removeDir(testConfigDir);\n  });\n\n  test('Should load policies', () => {\n    const resp = loadPolicies(testConfigDir);\n    expect(resp.isauthenticated).toBeInstanceOf(Function);\n  });\n\n  test('Should throw error if policy file is not a function', () => {\n    createFile(join(testConfigDir, 'invalid.js'), 'module.exports = {}');\n    expect(() => loadPolicies(testConfigDir)).toThrowError();\n  });\n\n  test(\"should return empty object if policy directory doesn't exist\", () => {\n    const resp = loadPolicies(testConfigDir + 'not-exist-dir');\n    expect(resp).toEqual({});\n  });\n});\n"]}