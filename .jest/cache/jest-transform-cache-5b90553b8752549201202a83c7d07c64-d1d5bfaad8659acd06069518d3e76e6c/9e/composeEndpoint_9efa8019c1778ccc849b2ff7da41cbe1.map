{"version":3,"sources":["composeEndpoint.js"],"names":["_","require","createRouteChecker","module","exports","app","routerChecker","sgApp","route","plugin","router","isEmpty","get","checker","method","endpoint","policies","action","isUndefined","isFunction","log","warn","path","req","res","next","resp","headersSent","json","data"],"mappings":"AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,iBAAD,CAAlC;;AAEAE,MAAM,CAACC,OAAP,GAAkBC,GAAD,IAAS;AACxB,QAAMC,aAAa,GAAGJ,kBAAkB,CAACK,KAAD,CAAxC;AAEA,SAAO,CAACC,KAAD,EAAQ;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAR,KAA+B;AACpC,QAAIV,CAAC,CAACW,OAAF,CAAUX,CAAC,CAACY,GAAF,CAAMJ,KAAN,EAAa,QAAb,CAAV,KAAqCR,CAAC,CAACW,OAAF,CAAUX,CAAC,CAACY,GAAF,CAAMJ,KAAN,EAAa,MAAb,CAAV,CAAzC,EAA0E;AACxE;AACD;;AAED,UAAMK,OAAO,GAAGP,aAAa,CAACE,KAAD,EAAQC,MAAR,CAA7B;AACA,UAAM;AAAEK,MAAAA,MAAF;AAAUC,MAAAA,QAAV;AAAoBC,MAAAA,QAApB;AAA8BC,MAAAA;AAA9B,QAAyCJ,OAA/C;;AAEA,QAAIb,CAAC,CAACkB,WAAF,CAAcD,MAAd,KAAyB,CAACjB,CAAC,CAACmB,UAAF,CAAaF,MAAb,CAA9B,EAAoD;AAClD;AACA,aAAOZ,GAAG,CAACe,GAAJ,CAAQC,IAAR,CACJ,kCAAiCb,KAAK,CAACM,MAAO,IAAGN,KAAK,CAACc,IAAK,iCADxD,CAAP;AAGD;;AAEDZ,IAAAA,MAAM,CAACI,MAAD,CAAN,CAAeC,QAAf,EAAyBC,QAAzB,EAAmC,OAAOO,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AAC3D,YAAMC,IAAI,GAAG,MAAMT,MAAM,CAACM,GAAD,EAAMC,GAAN,EAAWC,IAAX,CAAzB;;AACA,UAAIC,IAAI,IAAIA,IAAI,CAACC,WAAjB,EAA8B;AAC5B,eAAOD,IAAP;AACD;;AACD,aAAOF,GAAG,CAACI,IAAJ,CAAS;AAAEC,QAAAA,IAAI,EAAEH;AAAR,OAAT,CAAP;AACD,KAND;AAOD,GAtBD;AAuBD,CA1BD","sourcesContent":["const _ = require('lodash');\nconst createRouteChecker = require('./routerChecker');\n\nmodule.exports = (app) => {\n  const routerChecker = createRouteChecker(sgApp);\n\n  return (route, { plugin, router }) => {\n    if (_.isEmpty(_.get(route, 'method')) || _.isEmpty(_.get(route, 'path'))) {\n      return;\n    }\n\n    const checker = routerChecker(route, plugin);\n    const { method, endpoint, policies, action } = checker;\n\n    if (_.isUndefined(action) || !_.isFunction(action)) {\n      // eslint-disable-next-line consistent-return\n      return app.log.warn(\n        `Ignored attempt to bind route '${route.method} ${route.path}' to unknown controller/action.`\n      );\n    }\n\n    router[method](endpoint, policies, async (req, res, next) => {\n      const resp = await action(req, res, next);\n      if (resp && resp.headersSent) {\n        return resp;\n      }\n      return res.json({ data: resp });\n    });\n  };\n};\n"]}