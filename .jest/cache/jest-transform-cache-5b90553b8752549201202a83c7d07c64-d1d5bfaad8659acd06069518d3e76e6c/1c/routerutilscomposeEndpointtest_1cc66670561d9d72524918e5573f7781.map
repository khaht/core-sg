{"version":3,"sources":["router.utils.composeEndpoint.test.js"],"names":["mock","composeEndpoint","require","logger","describe","global","sgApp","log","stopWithError","jest","fn","controllers","auth","login","identity","api","config","routes","method","path","handler","policies","validator","test","createRouteChecker","mockReturnValueOnce","endpoint","req","res","next","action","route","router","post","expect","toHaveBeenCalledTimes","toBeUndefined","undefined","checker","express","mRouter","spyOn","mockImplementationOnce","json","mockImplementation","callback","headersSent"],"mappings":"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","sourcesContent":["const composeEndpoint = require('../router/utils/composeEndpoint');\nconst logger = require('utils/logger.util');\n\njest.mock('../router/utils/routerChecker');\n\ndescribe('Compose endpoint', () => {\n  global.sgApp = {\n    log: logger,\n    stopWithError: jest.fn(),\n    controllers: { auth: { login: jest.fn(), identity: 'Auth' } },\n    api: {\n      auth: {\n        controllers: {\n          auth: {\n            identity: 'Auth',\n            log: {},\n          },\n        },\n        config: {\n          routes: [\n            {\n              method: 'POST',\n              path: '/login',\n              handler: 'auth.login',\n              config: {\n                policies: ['global::validator'],\n                validator: 'validateLoginUserInput',\n              },\n            },\n          ],\n        },\n      },\n    },\n  };\n\n  // afterEach(() => {\n  //   jest.resetModules();\n  //   jest.restoreAllMocks();\n  // });\n\n  test('should compose endpoint', () => {\n    const createRouteChecker = require('../router/utils/routerChecker');\n    createRouteChecker.mockReturnValueOnce(\n      jest.fn(() => ({\n        method: 'post',\n        endpoint: '/login',\n        policies: jest.fn((req, res, next) => next()),\n        action: jest.fn(),\n      }))\n    );\n\n    const route = {\n      method: 'POST',\n      path: '/login',\n      handler: 'auth.login',\n      config: {\n        policies: ['global::validator'],\n        validator: 'validateLoginUserInput',\n      },\n    };\n\n    const router = {\n      post: jest.fn(),\n    };\n\n    composeEndpoint({ log: logger })(route, { router });\n    expect(router.post).toHaveBeenCalledTimes(1);\n  });\n\n  test('should return undefined when method is empty', () => {\n    const route = {\n      path: '/login',\n      handler: 'auth.login',\n      config: {\n        policies: ['global::validator'],\n        validator: 'validateLoginUserInput',\n      },\n    };\n\n    const router = {\n      post: jest.fn(),\n    };\n\n    expect(composeEndpoint({ log: logger })(route, { router })).toBeUndefined();\n  });\n\n  test('should return undefined when path is empty', () => {\n    const route = {\n      method: 'POST',\n      handler: 'auth.login',\n      config: {\n        policies: ['global::validator'],\n        validator: 'validateLoginUserInput',\n      },\n    };\n\n    const router = {\n      post: jest.fn(),\n    };\n\n    expect(composeEndpoint({ log: logger })(route, { router })).toBeUndefined();\n  });\n\n  test('should return warn log when action is undefined', () => {\n    const createRouteChecker = require('../router/utils/routerChecker');\n    createRouteChecker.mockReturnValueOnce(\n      jest.fn(() => ({\n        method: 'post',\n        endpoint: '/login',\n        policies: jest.fn((req, res, next) => next()),\n        action: undefined,\n      }))\n    );\n\n    const route = {\n      method: 'POST',\n      path: '/login',\n      handler: 'auth.login',\n      config: {\n        policies: ['global::validator'],\n        validator: 'validateLoginUserInput',\n      },\n    };\n\n    const router = {\n      post: jest.fn(),\n    };\n\n    expect(composeEndpoint({ log: logger })(route, { router })).toBeUndefined();\n  });\n\n  test('should return warn log when action is not function', () => {\n    const createRouteChecker = require('../router/utils/routerChecker');\n    createRouteChecker.mockReturnValueOnce(\n      jest.fn(() => ({\n        method: 'post',\n        endpoint: '/login',\n        policies: jest.fn((req, res, next) => next()),\n        action: 'action',\n      }))\n    );\n\n    const route = {\n      method: 'POST',\n      path: '/login',\n      handler: 'auth.login',\n      config: {\n        policies: ['global::validator'],\n        validator: 'validateLoginUserInput',\n      },\n    };\n\n    const router = {\n      post: jest.fn(),\n    };\n\n    expect(composeEndpoint({ log: logger })(route, { router })).toBeUndefined();\n  });\n\n  test('should call router and response json data', () => {\n    const checker = {\n      method: 'post',\n      endpoint: '/login',\n      policies: jest.fn((req, res, next) => next()),\n      action: jest.fn(),\n    };\n    const createRouteChecker = require('../router/utils/routerChecker');\n    createRouteChecker.mockReturnValueOnce(jest.fn(() => checker));\n\n    const route = {\n      method: 'POST',\n      path: '/login',\n      handler: 'auth.login',\n      config: {\n        policies: ['global::validator'],\n        validator: 'validateLoginUserInput',\n      },\n    };\n\n    const express = require('express');\n    const mRouter = { post: jest.fn() };\n    jest.spyOn(express, 'Router').mockImplementationOnce(() => mRouter);\n    const req = {};\n    const res = { json: jest.fn() };\n    const next = jest.fn();\n    mRouter.post.mockImplementation((path, policies, callback) => {\n      if (path === '/login') {\n        callback(req, res, next);\n      }\n    });\n\n    composeEndpoint({ log: logger })(route, { router: mRouter });\n    expect(checker.action).toHaveBeenCalledTimes(1);\n  });\n\n  test('should call router and response with headersSent', () => {\n    const checker = {\n      method: 'post',\n      endpoint: '/login',\n      policies: jest.fn((req, res, next) => next()),\n      action: jest.fn(() => ({ headersSent: true })),\n    };\n    const createRouteChecker = require('../router/utils/routerChecker');\n    createRouteChecker.mockReturnValueOnce(jest.fn(() => checker));\n\n    const route = {\n      method: 'POST',\n      path: '/login',\n      handler: 'auth.login',\n      config: {\n        policies: ['global::validator'],\n        validator: 'validateLoginUserInput',\n      },\n    };\n\n    const express = require('express');\n    const mRouter = { post: jest.fn() };\n    jest.spyOn(express, 'Router').mockImplementationOnce(() => mRouter);\n    const req = {};\n    const res = { json: jest.fn() };\n    const next = jest.fn();\n    mRouter.post.mockImplementation((path, policies, callback) => {\n      if (path === '/login') {\n        callback(req, res, next);\n      }\n    });\n\n    composeEndpoint({ log: logger })(route, { router: mRouter });\n    expect(checker.action).toHaveBeenCalledTimes(1);\n  });\n});\n"]}