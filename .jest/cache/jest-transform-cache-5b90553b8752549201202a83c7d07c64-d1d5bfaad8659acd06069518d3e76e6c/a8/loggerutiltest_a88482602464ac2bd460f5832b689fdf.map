{"version":3,"sources":["logger.util.test.js"],"names":["_","require","describe","OLD_ENV","process","env","beforeEach","jest","resetModules","test","LOG_LEVEL","undefined","LOG_ENABLED","logger","expect","level","toEqual","v","pick","levels","any","Object","silent","Function","trace","debug","info","warn","error","fatal","toThrowError"],"mappings":"AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AAEAC,QAAQ,CAAC,aAAD,EAAgB,MAAM;AAC5B,QAAMC,OAAO,GAAGC,OAAO,CAACC,GAAxB;AAEAC,EAAAA,UAAU,CAAC,MAAM;AACfC,IAAAA,IAAI,CAACC,YAAL;AACAJ,IAAAA,OAAO,CAACC,GAAR,GAAc,EAAE,GAAGF;AAAL,KAAd;AACD,GAHS,CAAV;AAKAM,EAAAA,IAAI,CAAC,+DAAD,EAAkE,MAAM;AAC1EL,IAAAA,OAAO,CAACC,GAAR,CAAYK,SAAZ,GAAwBC,SAAxB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYO,WAAZ,GAA0B,MAA1B;;AACA,UAAMC,MAAM,GAAGZ,OAAO,CAAC,gBAAD,CAAtB;;AAEAa,IAAAA,MAAM,CAACD,MAAM,CAACE,KAAR,CAAN,CAAqBC,OAArB,CAA6B,OAA7B;AACD,GANG,CAAJ;AAQAP,EAAAA,IAAI,CAAC,yBAAD,EAA4B,MAAM;AACpC,UAAMI,MAAM,GAAGZ,OAAO,CAAC,gBAAD,CAAtB;;AACA,UAAMgB,CAAC,GAAGjB,CAAC,CAACkB,IAAF,CAAOL,MAAP,EAAe,CACvB,QADuB,EAEvB,QAFuB,EAGvB,OAHuB,EAIvB,OAJuB,EAKvB,MALuB,EAMvB,MANuB,EAOvB,OAPuB,EAQvB,OARuB,CAAf,CAAV;;AAUAC,IAAAA,MAAM,CAACG,CAAD,CAAN,CAAUD,OAAV,CAAkB;AAChBG,MAAAA,MAAM,EAAEL,MAAM,CAACM,GAAP,CAAWC,MAAX,CADQ;AAEhBC,MAAAA,MAAM,EAAER,MAAM,CAACM,GAAP,CAAWG,QAAX,CAFQ;AAGhBC,MAAAA,KAAK,EAAEV,MAAM,CAACM,GAAP,CAAWG,QAAX,CAHS;AAIhBE,MAAAA,KAAK,EAAEX,MAAM,CAACM,GAAP,CAAWG,QAAX,CAJS;AAKhBG,MAAAA,IAAI,EAAEZ,MAAM,CAACM,GAAP,CAAWG,QAAX,CALU;AAMhBI,MAAAA,IAAI,EAAEb,MAAM,CAACM,GAAP,CAAWG,QAAX,CANU;AAOhBK,MAAAA,KAAK,EAAEd,MAAM,CAACM,GAAP,CAAWG,QAAX,CAPS;AAQhBM,MAAAA,KAAK,EAAEf,MAAM,CAACM,GAAP,CAAWG,QAAX;AARS,KAAlB;AAUD,GAtBG,CAAJ;AAwBAd,EAAAA,IAAI,CAAC,gDAAD,EAAmD,MAAM;AAC3DL,IAAAA,OAAO,CAACC,GAAR,CAAYK,SAAZ,GAAwBC,SAAxB;;AACA,UAAME,MAAM,GAAGZ,OAAO,CAAC,gBAAD,CAAtB;;AACA,UAAMgB,CAAC,GAAGjB,CAAC,CAACkB,IAAF,CAAOL,MAAP,EAAe,CACvB,QADuB,EAEvB,QAFuB,EAGvB,OAHuB,EAIvB,OAJuB,EAKvB,MALuB,EAMvB,MANuB,EAOvB,OAPuB,EAQvB,OARuB,CAAf,CAAV;;AAUAC,IAAAA,MAAM,CAACG,CAAD,CAAN,CAAUD,OAAV,CAAkB;AAChBG,MAAAA,MAAM,EAAEL,MAAM,CAACM,GAAP,CAAWC,MAAX,CADQ;AAEhBC,MAAAA,MAAM,EAAER,MAAM,CAACM,GAAP,CAAWG,QAAX,CAFQ;AAGhBC,MAAAA,KAAK,EAAEV,MAAM,CAACM,GAAP,CAAWG,QAAX,CAHS;AAIhBE,MAAAA,KAAK,EAAEX,MAAM,CAACM,GAAP,CAAWG,QAAX,CAJS;AAKhBG,MAAAA,IAAI,EAAEZ,MAAM,CAACM,GAAP,CAAWG,QAAX,CALU;AAMhBI,MAAAA,IAAI,EAAEb,MAAM,CAACM,GAAP,CAAWG,QAAX,CANU;AAOhBK,MAAAA,KAAK,EAAEd,MAAM,CAACM,GAAP,CAAWG,QAAX,CAPS;AAQhBM,MAAAA,KAAK,EAAEf,MAAM,CAACM,GAAP,CAAWG,QAAX;AARS,KAAlB;AAUD,GAvBG,CAAJ;AAyBAd,EAAAA,IAAI,CAAC,2CAAD,EAA8C,MAAM;AACtDL,IAAAA,OAAO,CAACC,GAAR,CAAYK,SAAZ,GAAwB,MAAxB;AACAI,IAAAA,MAAM,CAAC,MAAMb,OAAO,CAAC,gBAAD,CAAd,CAAN,CAAwC6B,YAAxC;AACD,GAHG,CAAJ;AAID,CArEO,CAAR","sourcesContent":["const _ = require('lodash');\n\ndescribe('Logger Util', () => {\n  const OLD_ENV = process.env;\n\n  beforeEach(() => {\n    jest.resetModules();\n    process.env = { ...OLD_ENV };\n  });\n\n  test('log level should be debug if LOG_LEVEL environment is not set', () => {\n    process.env.LOG_LEVEL = undefined;\n    process.env.LOG_ENABLED = 'true';\n    const logger = require('../logger.util');\n\n    expect(logger.level).toEqual('debug');\n  });\n\n  test('should load logger pino', () => {\n    const logger = require('../logger.util');\n    const v = _.pick(logger, [\n      'levels',\n      'silent',\n      'trace',\n      'debug',\n      'info',\n      'warn',\n      'error',\n      'fatal',\n    ]);\n    expect(v).toEqual({\n      levels: expect.any(Object),\n      silent: expect.any(Function),\n      trace: expect.any(Function),\n      debug: expect.any(Function),\n      info: expect.any(Function),\n      warn: expect.any(Function),\n      error: expect.any(Function),\n      fatal: expect.any(Function),\n    });\n  });\n\n  test('should load logger pino with LOG_LEVEL default', () => {\n    process.env.LOG_LEVEL = undefined;\n    const logger = require('../logger.util');\n    const v = _.pick(logger, [\n      'levels',\n      'silent',\n      'trace',\n      'debug',\n      'info',\n      'warn',\n      'error',\n      'fatal',\n    ]);\n    expect(v).toEqual({\n      levels: expect.any(Object),\n      silent: expect.any(Function),\n      trace: expect.any(Function),\n      debug: expect.any(Function),\n      info: expect.any(Function),\n      warn: expect.any(Function),\n      error: expect.any(Function),\n      fatal: expect.any(Function),\n    });\n  });\n\n  test('should throw error when invalid log level', () => {\n    process.env.LOG_LEVEL = 'test';\n    expect(() => require('../logger.util')).toThrowError();\n  });\n});\n"]}