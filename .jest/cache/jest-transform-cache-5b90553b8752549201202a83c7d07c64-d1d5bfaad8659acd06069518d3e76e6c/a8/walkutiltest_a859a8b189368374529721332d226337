2329b2f5f6973046fdc431f15180e5b1
const walk = require('../walk.util');

const path = require('path');

describe('Walk util', () => {
  test('Should Walk util', () => {
    const dir = path.resolve(process.cwd(), 'config', 'functions');

    const _loadder = jest.fn().mockImplementation(file => {
      try {
        return require(file);
      } catch (error) {
        throw new Error(`Could not load function ${file}: ${error.message}`);
      }
    });

    const resp = walk(dir, {
      loader: _loadder
    });
    expect(Object.keys(resp)).toEqual(['bootstrap', 'cron', 'responses', 'validator.load']);
  });
  test('Should throw error if loader must not be a function', () => {
    const dir = path.resolve(process.cwd(), 'config', 'functions');
    expect(() => walk(dir)).toThrow();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndhbGsudXRpbC50ZXN0LmpzIl0sIm5hbWVzIjpbIndhbGsiLCJyZXF1aXJlIiwicGF0aCIsImRlc2NyaWJlIiwidGVzdCIsImRpciIsInJlc29sdmUiLCJwcm9jZXNzIiwiY3dkIiwiX2xvYWRkZXIiLCJqZXN0IiwiZm4iLCJtb2NrSW1wbGVtZW50YXRpb24iLCJmaWxlIiwiZXJyb3IiLCJFcnJvciIsIm1lc3NhZ2UiLCJyZXNwIiwibG9hZGVyIiwiZXhwZWN0IiwiT2JqZWN0Iiwia2V5cyIsInRvRXF1YWwiLCJ0b1Rocm93Il0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxjQUFELENBQXBCOztBQUNBLE1BQU1DLElBQUksR0FBR0QsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBRUFFLFFBQVEsQ0FBQyxXQUFELEVBQWMsTUFBTTtBQUMxQkMsRUFBQUEsSUFBSSxDQUFDLGtCQUFELEVBQXFCLE1BQU07QUFDN0IsVUFBTUMsR0FBRyxHQUFHSCxJQUFJLENBQUNJLE9BQUwsQ0FBYUMsT0FBTyxDQUFDQyxHQUFSLEVBQWIsRUFBNEIsUUFBNUIsRUFBc0MsV0FBdEMsQ0FBWjs7QUFDQSxVQUFNQyxRQUFRLEdBQUdDLElBQUksQ0FBQ0MsRUFBTCxHQUFVQyxrQkFBVixDQUE4QkMsSUFBRCxJQUFVO0FBQ3RELFVBQUk7QUFDRixlQUFPWixPQUFPLENBQUNZLElBQUQsQ0FBZDtBQUNELE9BRkQsQ0FFRSxPQUFPQyxLQUFQLEVBQWM7QUFDZCxjQUFNLElBQUlDLEtBQUosQ0FBVywyQkFBMEJGLElBQUssS0FBSUMsS0FBSyxDQUFDRSxPQUFRLEVBQTVELENBQU47QUFDRDtBQUNGLEtBTmdCLENBQWpCOztBQVFBLFVBQU1DLElBQUksR0FBR2pCLElBQUksQ0FBQ0ssR0FBRCxFQUFNO0FBQUVhLE1BQUFBLE1BQU0sRUFBRVQ7QUFBVixLQUFOLENBQWpCO0FBQ0FVLElBQUFBLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDQyxJQUFQLENBQVlKLElBQVosQ0FBRCxDQUFOLENBQTBCSyxPQUExQixDQUFrQyxDQUFDLFdBQUQsRUFBYyxNQUFkLEVBQXNCLFdBQXRCLEVBQW1DLGdCQUFuQyxDQUFsQztBQUNELEdBWkcsQ0FBSjtBQWNBbEIsRUFBQUEsSUFBSSxDQUFDLHFEQUFELEVBQXdELE1BQU07QUFDaEUsVUFBTUMsR0FBRyxHQUFHSCxJQUFJLENBQUNJLE9BQUwsQ0FBYUMsT0FBTyxDQUFDQyxHQUFSLEVBQWIsRUFBNEIsUUFBNUIsRUFBc0MsV0FBdEMsQ0FBWjtBQUNBVyxJQUFBQSxNQUFNLENBQUMsTUFBTW5CLElBQUksQ0FBQ0ssR0FBRCxDQUFYLENBQU4sQ0FBd0JrQixPQUF4QjtBQUNELEdBSEcsQ0FBSjtBQUlELENBbkJPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB3YWxrID0gcmVxdWlyZSgnLi4vd2Fsay51dGlsJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG5kZXNjcmliZSgnV2FsayB1dGlsJywgKCkgPT4ge1xuICB0ZXN0KCdTaG91bGQgV2FsayB1dGlsJywgKCkgPT4ge1xuICAgIGNvbnN0IGRpciA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCAnY29uZmlnJywgJ2Z1bmN0aW9ucycpO1xuICAgIGNvbnN0IF9sb2FkZGVyID0gamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoZmlsZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoZmlsZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBsb2FkIGZ1bmN0aW9uICR7ZmlsZX06ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc3AgPSB3YWxrKGRpciwgeyBsb2FkZXI6IF9sb2FkZGVyIH0pO1xuICAgIGV4cGVjdChPYmplY3Qua2V5cyhyZXNwKSkudG9FcXVhbChbJ2Jvb3RzdHJhcCcsICdjcm9uJywgJ3Jlc3BvbnNlcycsICd2YWxpZGF0b3IubG9hZCddKTtcbiAgfSk7XG5cbiAgdGVzdCgnU2hvdWxkIHRocm93IGVycm9yIGlmIGxvYWRlciBtdXN0IG5vdCBiZSBhIGZ1bmN0aW9uJywgKCkgPT4ge1xuICAgIGNvbnN0IGRpciA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCAnY29uZmlnJywgJ2Z1bmN0aW9ucycpO1xuICAgIGV4cGVjdCgoKSA9PiB3YWxrKGRpcikpLnRvVGhyb3coKVxuICB9KTtcbn0pO1xuIl19