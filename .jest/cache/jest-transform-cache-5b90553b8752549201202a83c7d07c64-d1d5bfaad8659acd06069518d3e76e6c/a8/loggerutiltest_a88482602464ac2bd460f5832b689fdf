451902fbf8328bccd8d35d7e063c26b6
const _ = require('lodash');

describe('Logger Util', () => {
  const OLD_ENV = process.env;
  beforeEach(() => {
    jest.resetModules();
    process.env = { ...OLD_ENV
    };
  });
  test('log level should be debug if LOG_LEVEL environment is not set', () => {
    process.env.LOG_LEVEL = undefined;
    process.env.LOG_ENABLED = 'true';

    const logger = require('../logger.util');

    expect(logger.level).toEqual('debug');
  });
  test('should load logger pino', () => {
    const logger = require('../logger.util');

    const v = _.pick(logger, ['levels', 'silent', 'trace', 'debug', 'info', 'warn', 'error', 'fatal']);

    expect(v).toEqual({
      levels: expect.any(Object),
      silent: expect.any(Function),
      trace: expect.any(Function),
      debug: expect.any(Function),
      info: expect.any(Function),
      warn: expect.any(Function),
      error: expect.any(Function),
      fatal: expect.any(Function)
    });
  });
  test('should load logger pino with LOG_LEVEL default', () => {
    process.env.LOG_LEVEL = undefined;

    const logger = require('../logger.util');

    const v = _.pick(logger, ['levels', 'silent', 'trace', 'debug', 'info', 'warn', 'error', 'fatal']);

    expect(v).toEqual({
      levels: expect.any(Object),
      silent: expect.any(Function),
      trace: expect.any(Function),
      debug: expect.any(Function),
      info: expect.any(Function),
      warn: expect.any(Function),
      error: expect.any(Function),
      fatal: expect.any(Function)
    });
  });
  test('should throw error when invalid log level', () => {
    process.env.LOG_LEVEL = 'test';
    expect(() => require('../logger.util')).toThrowError();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ2dlci51dGlsLnRlc3QuanMiXSwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJkZXNjcmliZSIsIk9MRF9FTlYiLCJwcm9jZXNzIiwiZW52IiwiYmVmb3JlRWFjaCIsImplc3QiLCJyZXNldE1vZHVsZXMiLCJ0ZXN0IiwiTE9HX0xFVkVMIiwidW5kZWZpbmVkIiwiTE9HX0VOQUJMRUQiLCJsb2dnZXIiLCJleHBlY3QiLCJsZXZlbCIsInRvRXF1YWwiLCJ2IiwicGljayIsImxldmVscyIsImFueSIsIk9iamVjdCIsInNpbGVudCIsIkZ1bmN0aW9uIiwidHJhY2UiLCJkZWJ1ZyIsImluZm8iLCJ3YXJuIiwiZXJyb3IiLCJmYXRhbCIsInRvVGhyb3dFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsQ0FBQyxHQUFHQyxPQUFPLENBQUMsUUFBRCxDQUFqQjs7QUFFQUMsUUFBUSxDQUFDLGFBQUQsRUFBZ0IsTUFBTTtBQUM1QixRQUFNQyxPQUFPLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBeEI7QUFFQUMsRUFBQUEsVUFBVSxDQUFDLE1BQU07QUFDZkMsSUFBQUEsSUFBSSxDQUFDQyxZQUFMO0FBQ0FKLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixHQUFjLEVBQUUsR0FBR0Y7QUFBTCxLQUFkO0FBQ0QsR0FIUyxDQUFWO0FBS0FNLEVBQUFBLElBQUksQ0FBQywrREFBRCxFQUFrRSxNQUFNO0FBQzFFTCxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUssU0FBWixHQUF3QkMsU0FBeEI7QUFDQVAsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlPLFdBQVosR0FBMEIsTUFBMUI7O0FBQ0EsVUFBTUMsTUFBTSxHQUFHWixPQUFPLENBQUMsZ0JBQUQsQ0FBdEI7O0FBRUFhLElBQUFBLE1BQU0sQ0FBQ0QsTUFBTSxDQUFDRSxLQUFSLENBQU4sQ0FBcUJDLE9BQXJCLENBQTZCLE9BQTdCO0FBQ0QsR0FORyxDQUFKO0FBUUFQLEVBQUFBLElBQUksQ0FBQyx5QkFBRCxFQUE0QixN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ZGVzY3JpYmUoJ0xvZ2dlciBVdGlsJywgKCkgPT4ge1xuICBjb25zdCBPTERfRU5WID0gcHJvY2Vzcy5lbnY7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5yZXNldE1vZHVsZXMoKTtcbiAgICBwcm9jZXNzLmVudiA9IHsgLi4uT0xEX0VOViB9O1xuICB9KTtcblxuICB0ZXN0KCdsb2cgbGV2ZWwgc2hvdWxkIGJlIGRlYnVnIGlmIExPR19MRVZFTCBlbnZpcm9ubWVudCBpcyBub3Qgc2V0JywgKCkgPT4ge1xuICAgIHByb2Nlc3MuZW52LkxPR19MRVZFTCA9IHVuZGVmaW5lZDtcbiAgICBwcm9jZXNzLmVudi5MT0dfRU5BQkxFRCA9ICd0cnVlJztcbiAgICBjb25zdCBsb2dnZXIgPSByZXF1aXJlKCcuLi9sb2dnZXIudXRpbCcpO1xuXG4gICAgZXhwZWN0KGxvZ2dlci5sZXZlbCkudG9FcXVhbCgnZGVidWcnKTtcbiAgfSk7XG5cbiAgdGVzdCgnc2hvdWxkIGxvYWQgbG9nZ2VyIHBpbm8nLCAoKSA9PiB7XG4gICAgY29uc3QgbG9nZ2VyID0gcmVxdWlyZSgnLi4vbG9nZ2VyLnV0aWwnKTtcbiAgICBjb25zdCB2ID0gXy5waWNrKGxvZ2dlciwgW1xuICAgICAgJ2xldmVscycsXG4gICAgICAnc2lsZW50JyxcbiAgICAgICd0cmFjZScsXG4gICAgICAnZGVidWcnLFxuICAgICAgJ2luZm8nLFxuICAgICAgJ3dhcm4nLFxuICAgICAgJ2Vycm9yJyxcbiAgICAgICdmYXRhbCcsXG4gICAgXSk7XG4gICAgZXhwZWN0KHYpLnRvRXF1YWwoe1xuICAgICAgbGV2ZWxzOiBleHBlY3QuYW55KE9iamVjdCksXG4gICAgICBzaWxlbnQ6IGV4cGVjdC5hbnkoRnVuY3Rpb24pLFxuICAgICAgdHJhY2U6IGV4cGVjdC5hbnkoRnVuY3Rpb24pLFxuICAgICAgZGVidWc6IGV4cGVjdC5hbnkoRnVuY3Rpb24pLFxuICAgICAgaW5mbzogZXhwZWN0LmFueShGdW5jdGlvbiksXG4gICAgICB3YXJuOiBleHBlY3QuYW55KEZ1bmN0aW9uKSxcbiAgICAgIGVycm9yOiBleHBlY3QuYW55KEZ1bmN0aW9uKSxcbiAgICAgIGZhdGFsOiBleHBlY3QuYW55KEZ1bmN0aW9uKSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnc2hvdWxkIGxvYWQgbG9nZ2VyIHBpbm8gd2l0aCBMT0dfTEVWRUwgZGVmYXVsdCcsICgpID0+IHtcbiAgICBwcm9jZXNzLmVudi5MT0dfTEVWRUwgPSB1bmRlZmluZWQ7XG4gICAgY29uc3QgbG9nZ2VyID0gcmVxdWlyZSgnLi4vbG9nZ2VyLnV0aWwnKTtcbiAgICBjb25zdCB2ID0gXy5waWNrKGxvZ2dlciwgW1xuICAgICAgJ2xldmVscycsXG4gICAgICAnc2lsZW50JyxcbiAgICAgICd0cmFjZScsXG4gICAgICAnZGVidWcnLFxuICAgICAgJ2luZm8nLFxuICAgICAgJ3dhcm4nLFxuICAgICAgJ2Vycm9yJyxcbiAgICAgICdmYXRhbCcsXG4gICAgXSk7XG4gICAgZXhwZWN0KHYpLnRvRXF1YWwoe1xuICAgICAgbGV2ZWxzOiBleHBlY3QuYW55KE9iamVjdCksXG4gICAgICBzaWxlbnQ6IGV4cGVjdC5hbnkoRnVuY3Rpb24pLFxuICAgICAgdHJhY2U6IGV4cGVjdC5hbnkoRnVuY3Rpb24pLFxuICAgICAgZGVidWc6IGV4cGVjdC5hbnkoRnVuY3Rpb24pLFxuICAgICAgaW5mbzogZXhwZWN0LmFueShGdW5jdGlvbiksXG4gICAgICB3YXJuOiBleHBlY3QuYW55KEZ1bmN0aW9uKSxcbiAgICAgIGVycm9yOiBleHBlY3QuYW55KEZ1bmN0aW9uKSxcbiAgICAgIGZhdGFsOiBleHBlY3QuYW55KEZ1bmN0aW9uKSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnc2hvdWxkIHRocm93IGVycm9yIHdoZW4gaW52YWxpZCBsb2cgbGV2ZWwnLCAoKSA9PiB7XG4gICAgcHJvY2Vzcy5lbnYuTE9HX0xFVkVMID0gJ3Rlc3QnO1xuICAgIGV4cGVjdCgoKSA9PiByZXF1aXJlKCcuLi9sb2dnZXIudXRpbCcpKS50b1Rocm93RXJyb3IoKTtcbiAgfSk7XG59KTtcbiJdfQ==