{"version":3,"sources":["walk.util.test.js"],"names":["walk","require","path","describe","test","dir","resolve","process","cwd","_loadder","jest","fn","mockImplementation","file","error","Error","message","resp","loader","expect","Object","keys","toEqual","toThrow"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,cAAD,CAApB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAEAE,QAAQ,CAAC,WAAD,EAAc,MAAM;AAC1BC,EAAAA,IAAI,CAAC,kBAAD,EAAqB,MAAM;AAC7B,UAAMC,GAAG,GAAGH,IAAI,CAACI,OAAL,CAAaC,OAAO,CAACC,GAAR,EAAb,EAA4B,QAA5B,EAAsC,WAAtC,CAAZ;;AACA,UAAMC,QAAQ,GAAGC,IAAI,CAACC,EAAL,GAAUC,kBAAV,CAA8BC,IAAD,IAAU;AACtD,UAAI;AACF,eAAOZ,OAAO,CAACY,IAAD,CAAd;AACD,OAFD,CAEE,OAAOC,KAAP,EAAc;AACd,cAAM,IAAIC,KAAJ,CAAW,2BAA0BF,IAAK,KAAIC,KAAK,CAACE,OAAQ,EAA5D,CAAN;AACD;AACF,KANgB,CAAjB;;AAQA,UAAMC,IAAI,GAAGjB,IAAI,CAACK,GAAD,EAAM;AAAEa,MAAAA,MAAM,EAAET;AAAV,KAAN,CAAjB;AACAU,IAAAA,MAAM,CAACC,MAAM,CAACC,IAAP,CAAYJ,IAAZ,CAAD,CAAN,CAA0BK,OAA1B,CAAkC,CAAC,WAAD,EAAc,MAAd,EAAsB,WAAtB,EAAmC,gBAAnC,CAAlC;AACD,GAZG,CAAJ;AAcAlB,EAAAA,IAAI,CAAC,qDAAD,EAAwD,MAAM;AAChE,UAAMC,GAAG,GAAGH,IAAI,CAACI,OAAL,CAAaC,OAAO,CAACC,GAAR,EAAb,EAA4B,QAA5B,EAAsC,WAAtC,CAAZ;AACAW,IAAAA,MAAM,CAAC,MAAMnB,IAAI,CAACK,GAAD,CAAX,CAAN,CAAwBkB,OAAxB;AACD,GAHG,CAAJ;AAID,CAnBO,CAAR","sourcesContent":["const walk = require('../walk.util');\nconst path = require('path');\n\ndescribe('Walk util', () => {\n  test('Should Walk util', () => {\n    const dir = path.resolve(process.cwd(), 'config', 'functions');\n    const _loadder = jest.fn().mockImplementation((file) => {\n      try {\n        return require(file);\n      } catch (error) {\n        throw new Error(`Could not load function ${file}: ${error.message}`);\n      }\n    });\n\n    const resp = walk(dir, { loader: _loadder });\n    expect(Object.keys(resp)).toEqual(['bootstrap', 'cron', 'responses', 'validator.load']);\n  });\n\n  test('Should throw error if loader must not be a function', () => {\n    const dir = path.resolve(process.cwd(), 'config', 'functions');\n    expect(() => walk(dir)).toThrow()\n  });\n});\n"]}