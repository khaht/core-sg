{"version":3,"sources":["config.util.test.js"],"names":["getAbsoluteServerUrl","require","lodash","describe","test","config","environment","server","host","port","url","expect","toEqual","trim","jest","fn","data","path","toThrow","mockImplementationOnce","Error"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAA2BC,OAAO,CAAC,gBAAD,CAAxC;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AAEAE,QAAQ,CAAC,yBAAD,EAA4B,MAAM;AACxCC,EAAAA,IAAI,CAAC,yBAAD,EAA4B,MAAM;AACpC,UAAMC,MAAM,GAAG;AACbC,MAAAA,WAAW,EAAE,aADA;AAEbC,MAAAA,MAAM,EAAE;AACNC,QAAAA,IAAI,EAAE,WADA;AAENC,QAAAA,IAAI,EAAE;AAFA;AAFK,KAAf;AAQA,UAAMC,GAAG,GAAGV,oBAAoB,CAACK,MAAD,CAAhC;AACAM,IAAAA,MAAM,CAACD,GAAD,CAAN,CAAYE,OAAZ,CAAoB,uBAApB;AACD,GAXG,CAAJ;AAaAR,EAAAA,IAAI,CAAC,6BAAD,EAAgC,MAAM;AACxC,UAAMC,MAAM,GAAG;AACbE,MAAAA,MAAM,EAAE;AACNC,QAAAA,IAAI,EAAE,UADA;AAENC,QAAAA,IAAI,EAAE;AAFA;AADK,KAAf;AAOA,UAAMC,GAAG,GAAGV,oBAAoB,CAACK,MAAD,CAAhC;AACAM,IAAAA,MAAM,CAACD,GAAD,CAAN,CAAYE,OAAZ,CAAoB,sBAApB;AACD,GAVG,CAAJ;AAYAR,EAAAA,IAAI,CAAC,mBAAD,EAAsB,MAAM;AAC9B,UAAMC,MAAM,GAAG;AACbE,MAAAA,MAAM,EAAE;AACNG,QAAAA,GAAG,EAAE;AADC;AADK,KAAf;AAMA,UAAMA,GAAG,GAAGV,oBAAoB,CAACK,MAAD,CAAhC;AACAM,IAAAA,MAAM,CAACD,GAAD,CAAN,CAAYE,OAAZ,CAAoB,iBAApB;AACD,GATG,CAAJ;AAWAR,EAAAA,IAAI,CAAC,6BAAD,EAAgC,MAAM;AACxC,UAAMC,MAAM,GAAG;AACbC,MAAAA,WAAW,EAAE,aADA;AAEbC,MAAAA,MAAM,EAAE;AACNG,QAAAA,GAAG,EAAE,MADC;AAENF,QAAAA,IAAI,EAAE,WAFA;AAGNC,QAAAA,IAAI,EAAE;AAHA;AAFK,KAAf;AASA,UAAMC,GAAG,GAAGV,oBAAoB,CAACK,MAAD,CAAhC;AACAM,IAAAA,MAAM,CAACD,GAAD,CAAN,CAAYE,OAAZ,CAAoB,4BAApB;AACD,GAZG,CAAJ;AAcAR,EAAAA,IAAI,CAAC,8CAAD,EAAiD,MAAM;AACzDF,IAAAA,MAAM,CAACW,IAAP,GAAcC,IAAI,CAACC,EAAL,CAASC,IAAD,IAAUA,IAAlB,CAAd;AAEA,UAAMX,MAAM,GAAG;AACbC,MAAAA,WAAW,EAAE,aADA;AAEbC,MAAAA,MAAM,EAAE;AACNG,QAAAA,GAAG,EAAE;AAAEO,UAAAA,IAAI,EAAE;AAAR,SADC;AAENT,QAAAA,IAAI,EAAE,WAFA;AAGNC,QAAAA,IAAI,EAAE;AAHA;AAFK,KAAf;AASAE,IAAAA,MAAM,CAAC,MAAMX,oBAAoB,CAACK,MAAD,CAA3B,CAAN,CAA2Ca,OAA3C;AACD,GAbG,CAAJ;AAeAd,EAAAA,IAAI,CAAC,8CAAD,EAAiD,MAAM;AACzDF,IAAAA,MAAM,CAACW,IAAP,GAAcC,IAAI,CACfC,EADW,GAEXI,sBAFW,CAEaH,IAAD,IAAUA,IAFtB,EAGXG,sBAHW,CAGY,MAAM;AAC5B,YAAM,IAAIC,KAAJ,CAAU,6EAAV,CAAN;AACD,KALW,CAAd;AAOA,UAAMf,MAAM,GAAG;AACbE,MAAAA,MAAM,EAAE;AACNG,QAAAA,GAAG,EAAE;AADC;AADK,KAAf;AAMAC,IAAAA,MAAM,CAAC,MAAMX,oBAAoB,CAACK,MAAD,CAA3B,CAAN,CAA2Ca,OAA3C;AACD,GAfG,CAAJ;AAgBD,CAlFO,CAAR","sourcesContent":["const { getAbsoluteServerUrl } = require('../config.util');\nconst lodash = require('lodash');\n\ndescribe('Get absolute server url', () => {\n  test('Should return localhost', () => {\n    const config = {\n      environment: 'development',\n      server: {\n        host: '127.0.0.1',\n        port: '3000',\n      },\n    };\n\n    const url = getAbsoluteServerUrl(config);\n    expect(url).toEqual('http://localhost:3000');\n  });\n\n  test('Should return with hostName', () => {\n    const config = {\n      server: {\n        host: 'demo.com',\n        port: '3000',\n      },\n    };\n\n    const url = getAbsoluteServerUrl(config);\n    expect(url).toEqual('http://demo.com:3000');\n  });\n\n  test('Should return url', () => {\n    const config = {\n      server: {\n        url: 'http://test.com',\n      },\n    };\n\n    const url = getAbsoluteServerUrl(config);\n    expect(url).toEqual('http://test.com');\n  });\n\n  test('Should return url with path', () => {\n    const config = {\n      environment: 'development',\n      server: {\n        url: 'test',\n        host: '127.0.0.1',\n        port: 4000,\n      },\n    };\n\n    const url = getAbsoluteServerUrl(config);\n    expect(url).toEqual('http://localhost:4000/test');\n  });\n\n  test('Should throw error if url have not to string', () => {\n    lodash.trim = jest.fn((data) => data);\n\n    const config = {\n      environment: 'development',\n      server: {\n        url: { path: 'test' },\n        host: '127.0.0.1',\n        port: 4000,\n      },\n    };\n\n    expect(() => getAbsoluteServerUrl(config)).toThrow();\n  });\n\n  test('Should throw error if url have not to string', () => {\n    lodash.trim = jest\n      .fn()\n      .mockImplementationOnce((data) => data)\n      .mockImplementationOnce(() => {\n        throw new Error('Invalid server url config. Make sure the url defined in server.js is valid.')\n      });\n\n    const config = {\n      server: {\n        url: 'http://test.com',\n      },\n    };\n\n    expect(() => getAbsoluteServerUrl(config)).toThrow();\n  });\n});\n"]}