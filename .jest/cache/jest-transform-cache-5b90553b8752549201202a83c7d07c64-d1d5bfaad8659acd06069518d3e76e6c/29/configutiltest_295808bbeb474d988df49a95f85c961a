cbed19ad59d94a90a9897511e2a7a7da
const {
  getAbsoluteServerUrl
} = require('../config.util');

const lodash = require('lodash');

describe('Get absolute server url', () => {
  test('Should return localhost', () => {
    const config = {
      environment: 'development',
      server: {
        host: '127.0.0.1',
        port: '3000'
      }
    };
    const url = getAbsoluteServerUrl(config);
    expect(url).toEqual('http://localhost:3000');
  });
  test('Should return with hostName', () => {
    const config = {
      server: {
        host: 'demo.com',
        port: '3000'
      }
    };
    const url = getAbsoluteServerUrl(config);
    expect(url).toEqual('http://demo.com:3000');
  });
  test('Should return url', () => {
    const config = {
      server: {
        url: 'http://test.com'
      }
    };
    const url = getAbsoluteServerUrl(config);
    expect(url).toEqual('http://test.com');
  });
  test('Should return url with path', () => {
    const config = {
      environment: 'development',
      server: {
        url: 'test',
        host: '127.0.0.1',
        port: 4000
      }
    };
    const url = getAbsoluteServerUrl(config);
    expect(url).toEqual('http://localhost:4000/test');
  });
  test('Should throw error if url have not to string', () => {
    lodash.trim = jest.fn(data => data);
    const config = {
      environment: 'development',
      server: {
        url: {
          path: 'test'
        },
        host: '127.0.0.1',
        port: 4000
      }
    };
    expect(() => getAbsoluteServerUrl(config)).toThrow();
  });
  test('Should throw error if url have not to string', () => {
    lodash.trim = jest.fn().mockImplementationOnce(data => data).mockImplementationOnce(() => {
      throw new Error('Invalid server url config. Make sure the url defined in server.js is valid.');
    });
    const config = {
      server: {
        url: 'http://test.com'
      }
    };
    expect(() => getAbsoluteServerUrl(config)).toThrow();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy51dGlsLnRlc3QuanMiXSwibmFtZXMiOlsiZ2V0QWJzb2x1dGVTZXJ2ZXJVcmwiLCJyZXF1aXJlIiwibG9kYXNoIiwiZGVzY3JpYmUiLCJ0ZXN0IiwiY29uZmlnIiwiZW52aXJvbm1lbnQiLCJzZXJ2ZXIiLCJob3N0IiwicG9ydCIsInVybCIsImV4cGVjdCIsInRvRXF1YWwiLCJ0cmltIiwiamVzdCIsImZuIiwiZGF0YSIsInBhdGgiLCJ0b1Rocm93IiwibW9ja0ltcGxlbWVudGF0aW9uT25jZSIsIkVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBMkJDLE9BQU8sQ0FBQyxnQkFBRCxDQUF4Qzs7QUFDQSxNQUFNQyxNQUFNLEdBQUdELE9BQU8sQ0FBQyxRQUFELENBQXRCOztBQUVBRSxRQUFRLENBQUMseUJBQUQsRUFBNEIsTUFBTTtBQUN4Q0MsRUFBQUEsSUFBSSxDQUFDLHlCQUFELEVBQTRCLE1BQU07QUFDcEMsVUFBTUMsTUFBTSxHQUFHO0FBQ2JDLE1BQUFBLFdBQVcsRUFBRSxhQURBO0FBRWJDLE1BQUFBLE1BQU0sRUFBRTtBQUNOQyxRQUFBQSxJQUFJLEVBQUUsV0FEQTtBQUVOQyxRQUFBQSxJQUFJLEVBQUU7QUFGQTtBQUZLLEtBQWY7QUFRQSxVQUFNQyxHQUFHLEdBQUdWLG9CQUFvQixDQUFDSyxNQUFELENBQWhDO0FBQ0FNLElBQUFBLE1BQU0sQ0FBQ0QsR0FBRCxDQUFOLENBQVlFLE9BQVosQ0FBb0IsdUJBQXBCO0FBQ0QsR0FYRyxDQUFKO0FBYUFSLEVBQUFBLElBQUksQ0FBQyw2QkFBRCxFQUFnQyxNQUFNO0FBQ3hDLFVBQU1DLE1BQU0sR0FBRztBQUNiRSxNQUFBQSxNQUFNLEVBQUU7QUFDTkMsUUFBQUEsSUFBSSxFQUFFLFVBREE7QUFFTkMsUUFBQUEsSUFBSSxFQUFFO0FBRkE7QUFESyxLQUFmO0FBT0EsVUFBTUMsR0FBRyxHQUFHVixvQkFBb0IsQ0FBQ0ssTUFBRCxDQUFoQztBQUNBTSxJQUFBQSxNQUFNLENBQUNELEdBQUQsQ0FBTixDQUFZRSxPQUFaLENBQW9CLHNCQUFwQjtBQUNELEdBVkcsQ0FBSjtBQVlBUixFQUFBQSxJQUFJLENBQUMsbUJBQUQsRUFBc0IsTUFBTTtBQUM5QixVQUFNQyxNQUFNLEdBQUc7QUFDYkUsTUFBQUEsTUFBTSxFQUFFO0FBQ05HLFFBQUFBLEdBQUcsRUFBRTtBQURDO0FBREssS0FBZjtBQU1BLFVBQU1BLEdBQUcsR0FBR1Ysb0JBQW9CLENBQUNLLE1BQUQsQ0FBaEM7QUFDQU0sSUFBQUEsTUFBTSxDQUFDRCxHQUFELENBQU4sQ0FBWUUsT0FBWixDQUFvQixpQkFBcEI7QUFDRCxHQVRHLENBQUo7QUFXQVIsRUFBQUEsSUFBSSxDQUFDLDZCQUFELEVBQWdDLE1BQU07QUFDeEMsVUFBTUMsTUFBTSxHQUFHO0FBQ2JDLE1BQUFBLFdBQVcsRUFBRSxhQURBO0FBRWJDLE1BQUFBLE1BQU0sRUFBRTtBQUNORyxRQUFBQSxHQUFHLEVBQUUsTUFEQztBQUVORixRQUFBQSxJQUFJLEVBQUUsV0FGQTtBQUdOQyxRQUFBQSxJQUFJLEVBQUU7QUFIQTtBQUZLLEtBQWY7QUFTQSxVQUFNQyxHQUFHLEdBQUdWLG9CQUFvQixDQUFDSyxNQUFELENBQWhDO0FBQ0FNLElBQUFBLE1BQU0sQ0FBQ0QsR0FBRCxDQUFOLENBQVlFLE9BQVosQ0FBb0IsNEJBQXBCO0FBQ0QsR0FaRyxDQUFKO0FBY0FSLEVBQUFBLElBQUksQ0FBQyw4Q0FBRCxFQUFpRCxNQUFNO0FBQ3pERixJQUFBQSxNQUFNLENBQUNXLElBQVAsR0FBY0MsSUFBSSxDQUFDQyxFQUFMLENBQVNDLElBQUQsSUFBVUEsSUFBbEIsQ0FBZDtBQUVBLFVBQU1YLE1BQU0sR0FBRztBQUNiQyxNQUFBQSxXQUFXLEVBQUUsYUFEQTtBQUViQyxNQUFBQSxNQUFNLEVBQUU7QUFDTkcsUUFBQUEsR0FBRyxFQUFFO0FBQUVPLFVBQUFBLElBQUksRUFBRTtBQUFSLFNBREM7QUFFTlQsUUFBQUEsSUFBSSxFQUFFLFdBRkE7QUFHTkMsUUFBQUEsSUFBSSxFQUFFO0FBSEE7QUFGSyxLQUFmO0FBU0FFLElBQUFBLE1BQU0sQ0FBQyxNQUFNWCxvQkFBb0IsQ0FBQ0ssTUFBRCxDQUEzQixDQUFOLENBQTJDYSxPQUEzQztBQUNELEdBYkcsQ0FBSjtBQWVBZCxFQUFBQSxJQUFJLENBQUMsOENBQUQsRUFBaUQsTUFBTTtBQUN6REYsSUFBQUEsTUFBTSxDQUFDVyxJQUFQLEdBQWNDLElBQUksQ0FDZkMsRUFEVyxHQUVYSSxzQkFGVyxDQUVhSCxJQUFELElBQVVBLElBRnRCLEVBR1hHLHNCQUhXLENBR1ksTUFBTTtBQUM1QixZQUFNLElBQUlDLEtBQUosQ0FBVSw2RUFBVixDQUFOO0FBQ0QsS0FMVyxDQUFkO0FBT0EsVUFBTWYsTUFBTSxHQUFHO0FBQ2JFLE1BQUFBLE1BQU0sRUFBRTtBQUNORyxRQUFBQSxHQUFHLEVBQUU7QUFEQztBQURLLEtBQWY7QUFNQUMsSUFBQUEsTUFBTSxDQUFDLE1BQU1YLG9CQUFvQixDQUFDSyxNQUFELENBQTNCLENBQU4sQ0FBMkNhLE9BQTNDO0FBQ0QsR0FmRyxDQUFKO0FBZ0JELENBbEZPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGdldEFic29sdXRlU2VydmVyVXJsIH0gPSByZXF1aXJlKCcuLi9jb25maWcudXRpbCcpO1xuY29uc3QgbG9kYXNoID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5cbmRlc2NyaWJlKCdHZXQgYWJzb2x1dGUgc2VydmVyIHVybCcsICgpID0+IHtcbiAgdGVzdCgnU2hvdWxkIHJldHVybiBsb2NhbGhvc3QnLCAoKSA9PiB7XG4gICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgZW52aXJvbm1lbnQ6ICdkZXZlbG9wbWVudCcsXG4gICAgICBzZXJ2ZXI6IHtcbiAgICAgICAgaG9zdDogJzEyNy4wLjAuMScsXG4gICAgICAgIHBvcnQ6ICczMDAwJyxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGNvbnN0IHVybCA9IGdldEFic29sdXRlU2VydmVyVXJsKGNvbmZpZyk7XG4gICAgZXhwZWN0KHVybCkudG9FcXVhbCgnaHR0cDovL2xvY2FsaG9zdDozMDAwJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ1Nob3VsZCByZXR1cm4gd2l0aCBob3N0TmFtZScsICgpID0+IHtcbiAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICBzZXJ2ZXI6IHtcbiAgICAgICAgaG9zdDogJ2RlbW8uY29tJyxcbiAgICAgICAgcG9ydDogJzMwMDAnLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgY29uc3QgdXJsID0gZ2V0QWJzb2x1dGVTZXJ2ZXJVcmwoY29uZmlnKTtcbiAgICBleHBlY3QodXJsKS50b0VxdWFsKCdodHRwOi8vZGVtby5jb206MzAwMCcpO1xuICB9KTtcblxuICB0ZXN0KCdTaG91bGQgcmV0dXJuIHVybCcsICgpID0+IHtcbiAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICBzZXJ2ZXI6IHtcbiAgICAgICAgdXJsOiAnaHR0cDovL3Rlc3QuY29tJyxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGNvbnN0IHVybCA9IGdldEFic29sdXRlU2VydmVyVXJsKGNvbmZpZyk7XG4gICAgZXhwZWN0KHVybCkudG9FcXVhbCgnaHR0cDovL3Rlc3QuY29tJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ1Nob3VsZCByZXR1cm4gdXJsIHdpdGggcGF0aCcsICgpID0+IHtcbiAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICBlbnZpcm9ubWVudDogJ2RldmVsb3BtZW50JyxcbiAgICAgIHNlcnZlcjoge1xuICAgICAgICB1cmw6ICd0ZXN0JyxcbiAgICAgICAgaG9zdDogJzEyNy4wLjAuMScsXG4gICAgICAgIHBvcnQ6IDQwMDAsXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBjb25zdCB1cmwgPSBnZXRBYnNvbHV0ZVNlcnZlclVybChjb25maWcpO1xuICAgIGV4cGVjdCh1cmwpLnRvRXF1YWwoJ2h0dHA6Ly9sb2NhbGhvc3Q6NDAwMC90ZXN0Jyk7XG4gIH0pO1xuXG4gIHRlc3QoJ1Nob3VsZCB0aHJvdyBlcnJvciBpZiB1cmwgaGF2ZSBub3QgdG8gc3RyaW5nJywgKCkgPT4ge1xuICAgIGxvZGFzaC50cmltID0gamVzdC5mbigoZGF0YSkgPT4gZGF0YSk7XG5cbiAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICBlbnZpcm9ubWVudDogJ2RldmVsb3BtZW50JyxcbiAgICAgIHNlcnZlcjoge1xuICAgICAgICB1cmw6IHsgcGF0aDogJ3Rlc3QnIH0sXG4gICAgICAgIGhvc3Q6ICcxMjcuMC4wLjEnLFxuICAgICAgICBwb3J0OiA0MDAwLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgZXhwZWN0KCgpID0+IGdldEFic29sdXRlU2VydmVyVXJsKGNvbmZpZykpLnRvVGhyb3coKTtcbiAgfSk7XG5cbiAgdGVzdCgnU2hvdWxkIHRocm93IGVycm9yIGlmIHVybCBoYXZlIG5vdCB0byBzdHJpbmcnLCAoKSA9PiB7XG4gICAgbG9kYXNoLnRyaW0gPSBqZXN0XG4gICAgICAuZm4oKVxuICAgICAgLm1vY2tJbXBsZW1lbnRhdGlvbk9uY2UoKGRhdGEpID0+IGRhdGEpXG4gICAgICAubW9ja0ltcGxlbWVudGF0aW9uT25jZSgoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzZXJ2ZXIgdXJsIGNvbmZpZy4gTWFrZSBzdXJlIHRoZSB1cmwgZGVmaW5lZCBpbiBzZXJ2ZXIuanMgaXMgdmFsaWQuJylcbiAgICAgIH0pO1xuXG4gICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgc2VydmVyOiB7XG4gICAgICAgIHVybDogJ2h0dHA6Ly90ZXN0LmNvbScsXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBleHBlY3QoKCkgPT4gZ2V0QWJzb2x1dGVTZXJ2ZXJVcmwoY29uZmlnKSkudG9UaHJvdygpO1xuICB9KTtcbn0pO1xuIl19