{"version":3,"sources":["fs.util.test.js"],"names":["path","require","fse","fsutil","describe","app","dir","process","cwd","resp","test","expect","Object","keys","toEqual","optPath","content","writeAppFile","getContent","readFile","resolve","pluginName","writePluginFile","optPluginPath","removeAppFile","existsSync","toBeFalsy"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,UAAD,CAAnB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,YAAD,CAAtB;;AAEAG,QAAQ,CAAC,SAAD,EAAY,MAAM;AACxB,QAAMC,GAAG,GAAG;AAAEC,IAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR;AAAP,GAAZ;AACA,QAAMC,IAAI,GAAGN,MAAM,CAACE,GAAD,CAAnB;AAEAK,EAAAA,IAAI,CAAC,qBAAD,EAAwB,MAAM;AAChCC,IAAAA,MAAM,CAACC,MAAM,CAACC,IAAP,CAAYJ,IAAZ,CAAD,CAAN,CAA0BK,OAA1B,CAAkC,CAChC,cADgC,EAEhC,iBAFgC,EAGhC,eAHgC,CAAlC;AAKD,GANG,CAAJ;AAQAJ,EAAAA,IAAI,CAAC,uBAAD,EAA0B,YAAY;AACxC,UAAMK,OAAO,GAAG,CAAC,aAAD,EAAgB,UAAhB,CAAhB;AACA,UAAMC,OAAO,GAAG,gBAAhB;AACA,UAAMP,IAAI,CAACQ,YAAL,CAAkBF,OAAlB,EAA2BC,OAA3B,CAAN;AACA,UAAME,UAAU,GAAG,MAAMhB,GAAG,CAACiB,QAAJ,CACvBnB,IAAI,CAACoB,OAAL,CAAab,OAAO,CAACC,GAAR,EAAb,EAA4B,aAA5B,EAA2C,UAA3C,CADuB,EAEvB,MAFuB,CAAzB;AAIAG,IAAAA,MAAM,CAACO,UAAD,CAAN,CAAmBJ,OAAnB,CAA2BE,OAA3B;AACD,GATG,CAAJ;AAWAN,EAAAA,IAAI,CAAC,8BAAD,EAAiC,YAAY;AAC/C,UAAMW,UAAU,GAAG,aAAnB;AACA,UAAMN,OAAO,GAAG,CAAC,UAAD,CAAhB;AACA,UAAMC,OAAO,GAAG,gBAAhB;AACA,UAAMP,IAAI,CAACa,eAAL,CAAqBD,UAArB,EAAiCN,OAAjC,EAA0CC,OAA1C,CAAN;AACA,UAAME,UAAU,GAAG,MAAMhB,GAAG,CAACiB,QAAJ,CACvBnB,IAAI,CAACoB,OAAL,CAAab,OAAO,CAACC,GAAR,EAAb,EAA4B,YAA5B,EAA0C,aAA1C,EAAyD,UAAzD,CADuB,EAEvB,MAFuB,CAAzB;AAIAG,IAAAA,MAAM,CAACO,UAAD,CAAN,CAAmBJ,OAAnB,CAA2BE,OAA3B;AACD,GAVG,CAAJ;AAYAN,EAAAA,IAAI,CAAC,wBAAD,EAA2B,YAAY;AACzC,UAAMK,OAAO,GAAG,CAAC,aAAD,CAAhB;AACA,UAAMQ,aAAa,GAAG,CAAC,YAAD,EAAe,aAAf,CAAtB;AACA,UAAMd,IAAI,CAACe,aAAL,CAAmBT,OAAnB,CAAN;AACA,UAAMN,IAAI,CAACe,aAAL,CAAmBD,aAAnB,CAAN;AACAZ,IAAAA,MAAM,CACJT,GAAG,CAACuB,UAAJ,CAAezB,IAAI,CAACoB,OAAL,CAAab,OAAO,CAACC,GAAR,EAAb,EAA4B,aAA5B,CAAf,CADI,CAAN,CAEEkB,SAFF;AAGAf,IAAAA,MAAM,CACJT,GAAG,CAACuB,UAAJ,CAAezB,IAAI,CAACoB,OAAL,CAAab,OAAO,CAACC,GAAR,EAAb,EAA4B,YAA5B,EAA0C,aAA1C,CAAf,CADI,CAAN,CAEEkB,SAFF;AAGD,GAXG,CAAJ;AAYD,CA/CO,CAAR","sourcesContent":["const path = require('path');\nconst fse = require('fs-extra');\nconst fsutil = require('../fs.util');\n\ndescribe('Fs util', () => {\n  const app = { dir: process.cwd() };\n  const resp = fsutil(app);\n\n  test('Should return appFs', () => {\n    expect(Object.keys(resp)).toEqual([\n      'writeAppFile',\n      'writePluginFile',\n      'removeAppFile',\n    ]);\n  });\n\n  test('Should write app file', async () => {\n    const optPath = ['app-fs-test', 'test.txt'];\n    const content = 'Hello World!!!';\n    await resp.writeAppFile(optPath, content);\n    const getContent = await fse.readFile(\n      path.resolve(process.cwd(), 'app-fs-test', 'test.txt'),\n      'utf8'\n    );\n    expect(getContent).toEqual(content);\n  });\n\n  test('Should write app plugin file', async () => {\n    const pluginName = 'app-fs-test';\n    const optPath = ['test.txt'];\n    const content = 'Hello World!!!';\n    await resp.writePluginFile(pluginName, optPath, content);\n    const getContent = await fse.readFile(\n      path.resolve(process.cwd(), 'extensions', 'app-fs-test', 'test.txt'),\n      'utf8'\n    );\n    expect(getContent).toEqual(content);\n  });\n\n  test('Should delete app file', async () => {\n    const optPath = ['app-fs-test'];\n    const optPluginPath = ['extensions', 'app-fs-test'];\n    await resp.removeAppFile(optPath);\n    await resp.removeAppFile(optPluginPath);\n    expect(\n      fse.existsSync(path.resolve(process.cwd(), 'app-fs-test'))\n    ).toBeFalsy();\n    expect(\n      fse.existsSync(path.resolve(process.cwd(), 'extensions', 'app-fs-test'))\n    ).toBeFalsy();\n  });\n});\n"]}