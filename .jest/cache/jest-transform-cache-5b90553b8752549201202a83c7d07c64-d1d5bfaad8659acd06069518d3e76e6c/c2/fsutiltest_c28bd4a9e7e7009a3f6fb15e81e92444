f31429779b93c370a81d048ec2e5c2df
const path = require('path');

const fse = require('fs-extra');

const fsutil = require('../fs.util');

describe('Fs util', () => {
  const app = {
    dir: process.cwd()
  };
  const resp = fsutil(app);
  test('Should return appFs', () => {
    expect(Object.keys(resp)).toEqual(['writeAppFile', 'writePluginFile', 'removeAppFile']);
  });
  test('Should write app file', async () => {
    const optPath = ['app-fs-test', 'test.txt'];
    const content = 'Hello World!!!';
    await resp.writeAppFile(optPath, content);
    const getContent = await fse.readFile(path.resolve(process.cwd(), 'app-fs-test', 'test.txt'), 'utf8');
    expect(getContent).toEqual(content);
  });
  test('Should write app plugin file', async () => {
    const pluginName = 'app-fs-test';
    const optPath = ['test.txt'];
    const content = 'Hello World!!!';
    await resp.writePluginFile(pluginName, optPath, content);
    const getContent = await fse.readFile(path.resolve(process.cwd(), 'extensions', 'app-fs-test', 'test.txt'), 'utf8');
    expect(getContent).toEqual(content);
  });
  test('Should delete app file', async () => {
    const optPath = ['app-fs-test'];
    const optPluginPath = ['extensions', 'app-fs-test'];
    await resp.removeAppFile(optPath);
    await resp.removeAppFile(optPluginPath);
    expect(fse.existsSync(path.resolve(process.cwd(), 'app-fs-test'))).toBeFalsy();
    expect(fse.existsSync(path.resolve(process.cwd(), 'extensions', 'app-fs-test'))).toBeFalsy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZzLnV0aWwudGVzdC5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsImZzZSIsImZzdXRpbCIsImRlc2NyaWJlIiwiYXBwIiwiZGlyIiwicHJvY2VzcyIsImN3ZCIsInJlc3AiLCJ0ZXN0IiwiZXhwZWN0IiwiT2JqZWN0Iiwia2V5cyIsInRvRXF1YWwiLCJvcHRQYXRoIiwiY29udGVudCIsIndyaXRlQXBwRmlsZSIsImdldENvbnRlbnQiLCJyZWFkRmlsZSIsInJlc29sdmUiLCJwbHVnaW5OYW1lIiwid3JpdGVQbHVnaW5GaWxlIiwib3B0UGx1Z2luUGF0aCIsInJlbW92ZUFwcEZpbGUiLCJleGlzdHNTeW5jIiwidG9CZUZhbHN5Il0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU1DLEdBQUcsR0FBR0QsT0FBTyxDQUFDLFVBQUQsQ0FBbkI7O0FBQ0EsTUFBTUUsTUFBTSxHQUFHRixPQUFPLENBQUMsWUFBRCxDQUF0Qjs7QUFFQUcsUUFBUSxDQUFDLFNBQUQsRUFBWSxNQUFNO0FBQ3hCLFFBQU1DLEdBQUcsR0FBRztBQUFFQyxJQUFBQSxHQUFHLEVBQUVDLE9BQU8sQ0FBQ0MsR0FBUjtBQUFQLEdBQVo7QUFDQSxRQUFNQyxJQUFJLEdBQUdOLE1BQU0sQ0FBQ0UsR0FBRCxDQUFuQjtBQUVBSyxFQUFBQSxJQUFJLENBQUMscUJBQUQsRUFBd0IsTUFBTTtBQUNoQ0MsSUFBQUEsTUFBTSxDQUFDQyxNQUFNLENBQUNDLElBQVAsQ0FBWUosSUFBWixDQUFELENBQU4sQ0FBMEJLLE9BQTFCLENBQWtDLENBQ2hDLGNBRGdDLEVBRWhDLGlCQUZnQyxFQUdoQyxlQUhnQyxDQUFsQztBQUtELEdBTkcsQ0FBSjtBQVFBSixFQUFBQSxJQUFJLENBQUMsdUJBQUQsRUFBMEIsWUFBWTtBQUN4QyxVQUFNSyxPQUFPLEdBQUcsQ0FBQyxhQUFELEVBQWdCLFVBQWhCLENBQWhCO0FBQ0EsVUFBTUMsT0FBTyxHQUFHLGdCQUFoQjtBQUNBLFVBQU1QLElBQUksQ0FBQ1EsWUFBTCxDQUFrQkYsT0FBbEIsRUFBMkJDLE9BQTNCLENBQU47QUFDQSxVQUFNRSxVQUFVLEdBQUcsTUFBTWhCLEdBQUcsQ0FBQ2lCLFFBQUosQ0FDdkJuQixJQUFJLENBQUNvQixPQUFMLENBQWFiLE9BQU8sQ0FBQ0MsR0FBUixFQUFiLEVBQTRCLGFBQTVCLEVBQTJDLFVBQTNDLENBRHVCLEVBRXZCLE1BRnVCLENBQXpCO0FBSUFHLElBQUFBLE1BQU0sQ0FBQ08sVUFBRCxDQUFOLENBQW1CSixPQUFuQixDQUEyQkUsT0FBM0I7QUFDRCxHQVRHLENBQUo7QUFXQU4sRUFBQUEsSUFBSSxDQUFDLDhCQUFELEVBQWlDLFlBQVk7QUFDL0MsVUFBTVcsVUFBVSxHQUFHLGFBQW5CO0FBQ0EsVUFBTU4sT0FBTyxHQUFHLENBQUMsVUFBRCxDQUFoQjtBQUNBLFVBQU1DLE9BQU8sR0FBRyxnQkFBaEI7QUFDQSxVQUFNUCxJQUFJLENBQUNhLGVBQUwsQ0FBcUJELFVBQXJCLEVBQWlDTixPQUFqQyxFQUEwQ0MsT0FBMUMsQ0FBTjtBQUNBLFVBQU1FLFVBQVUsR0FBRyxNQUFNaEIsR0FBRyxDQUFDaUIsUUFBSixDQUN2Qm5CLElBQUksQ0FBQ29CLE9BQUwsQ0FBYWIsT0FBTyxDQUFDQyxHQUFSLEVBQWIsRUFBNEIsWUFBNUIsRUFBMEMsYUFBMUMsRUFBeUQsVUFBekQsQ0FEdUIsRUFFdkIsTUFGdUIsQ0FBekI7QUFJQUcsSUFBQUEsTUFBTSxDQUFDTyxVQUFELENBQU4sQ0FBbUJKLE9BQW5CLENBQTJCRSxPQUEzQjtBQUNELEdBVkcsQ0FBSjtBQVlBTixFQUFBQSxJQUFJLENBQUMsd0JBQUQsRUFBMkIsWUFBWTtBQUN6QyxVQUFNSyxPQUFPLEdBQUcsQ0FBQyxhQUFELENBQWhCO0FBQ0EsVUFBTVEsYUFBYSxHQUFHLENBQUMsWUFBRCxFQUFlLGFBQWYsQ0FBdEI7QUFDQSxVQUFNZCxJQUFJLENBQUNlLGFBQUwsQ0FBbUJULE9BQW5CLENBQU47QUFDQSxVQUFNTixJQUFJLENBQUNlLGFBQUwsQ0FBbUJELGFBQW5CLENBQU47QUFDQVosSUFBQUEsTUFBTSxDQUNKVCxHQUFHLENBQUN1QixVQUFKLENBQWV6QixJQUFJLENBQUNvQixPQUFMLENBQWFiLE9BQU8sQ0FBQ0MsR0FBUixFQUFiLEVBQTRCLGFBQTVCLENBQWYsQ0FESSxDQUFOLENBRUVrQixTQUZGO0FBR0FmLElBQUFBLE1BQU0sQ0FDSlQsR0FBRyxDQUFDdUIsVUFBSixDQUFlekIsSUFBSSxDQUFDb0IsT0FBTCxDQUFhYixPQUFPLENBQUNDLEdBQVIsRUFBYixFQUE0QixZQUE1QixFQUEwQyxhQUExQyxDQUFmLENBREksQ0FBTixDQUVFa0IsU0FGRjtBQUdELEdBWEcsQ0FBSjtBQVlELENBL0NPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgZnNlID0gcmVxdWlyZSgnZnMtZXh0cmEnKTtcbmNvbnN0IGZzdXRpbCA9IHJlcXVpcmUoJy4uL2ZzLnV0aWwnKTtcblxuZGVzY3JpYmUoJ0ZzIHV0aWwnLCAoKSA9PiB7XG4gIGNvbnN0IGFwcCA9IHsgZGlyOiBwcm9jZXNzLmN3ZCgpIH07XG4gIGNvbnN0IHJlc3AgPSBmc3V0aWwoYXBwKTtcblxuICB0ZXN0KCdTaG91bGQgcmV0dXJuIGFwcEZzJywgKCkgPT4ge1xuICAgIGV4cGVjdChPYmplY3Qua2V5cyhyZXNwKSkudG9FcXVhbChbXG4gICAgICAnd3JpdGVBcHBGaWxlJyxcbiAgICAgICd3cml0ZVBsdWdpbkZpbGUnLFxuICAgICAgJ3JlbW92ZUFwcEZpbGUnLFxuICAgIF0pO1xuICB9KTtcblxuICB0ZXN0KCdTaG91bGQgd3JpdGUgYXBwIGZpbGUnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgb3B0UGF0aCA9IFsnYXBwLWZzLXRlc3QnLCAndGVzdC50eHQnXTtcbiAgICBjb25zdCBjb250ZW50ID0gJ0hlbGxvIFdvcmxkISEhJztcbiAgICBhd2FpdCByZXNwLndyaXRlQXBwRmlsZShvcHRQYXRoLCBjb250ZW50KTtcbiAgICBjb25zdCBnZXRDb250ZW50ID0gYXdhaXQgZnNlLnJlYWRGaWxlKFxuICAgICAgcGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCksICdhcHAtZnMtdGVzdCcsICd0ZXN0LnR4dCcpLFxuICAgICAgJ3V0ZjgnXG4gICAgKTtcbiAgICBleHBlY3QoZ2V0Q29udGVudCkudG9FcXVhbChjb250ZW50KTtcbiAgfSk7XG5cbiAgdGVzdCgnU2hvdWxkIHdyaXRlIGFwcCBwbHVnaW4gZmlsZScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBwbHVnaW5OYW1lID0gJ2FwcC1mcy10ZXN0JztcbiAgICBjb25zdCBvcHRQYXRoID0gWyd0ZXN0LnR4dCddO1xuICAgIGNvbnN0IGNvbnRlbnQgPSAnSGVsbG8gV29ybGQhISEnO1xuICAgIGF3YWl0IHJlc3Aud3JpdGVQbHVnaW5GaWxlKHBsdWdpbk5hbWUsIG9wdFBhdGgsIGNvbnRlbnQpO1xuICAgIGNvbnN0IGdldENvbnRlbnQgPSBhd2FpdCBmc2UucmVhZEZpbGUoXG4gICAgICBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgJ2V4dGVuc2lvbnMnLCAnYXBwLWZzLXRlc3QnLCAndGVzdC50eHQnKSxcbiAgICAgICd1dGY4J1xuICAgICk7XG4gICAgZXhwZWN0KGdldENvbnRlbnQpLnRvRXF1YWwoY29udGVudCk7XG4gIH0pO1xuXG4gIHRlc3QoJ1Nob3VsZCBkZWxldGUgYXBwIGZpbGUnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgb3B0UGF0aCA9IFsnYXBwLWZzLXRlc3QnXTtcbiAgICBjb25zdCBvcHRQbHVnaW5QYXRoID0gWydleHRlbnNpb25zJywgJ2FwcC1mcy10ZXN0J107XG4gICAgYXdhaXQgcmVzcC5yZW1vdmVBcHBGaWxlKG9wdFBhdGgpO1xuICAgIGF3YWl0IHJlc3AucmVtb3ZlQXBwRmlsZShvcHRQbHVnaW5QYXRoKTtcbiAgICBleHBlY3QoXG4gICAgICBmc2UuZXhpc3RzU3luYyhwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgJ2FwcC1mcy10ZXN0JykpXG4gICAgKS50b0JlRmFsc3koKTtcbiAgICBleHBlY3QoXG4gICAgICBmc2UuZXhpc3RzU3luYyhwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgJ2V4dGVuc2lvbnMnLCAnYXBwLWZzLXRlc3QnKSlcbiAgICApLnRvQmVGYWxzeSgpO1xuICB9KTtcbn0pO1xuIl19