{"version":3,"sources":["config-loader.test.js"],"names":["path","require","fs","del","loadConfigs","getConfigDir","prefix","dir","process","cwd","configDir","resolve","existsSync","mkdirSync","testConfigDir","describe","beforeAll","files","readdirSync","filter","file","endsWith","forEach","f","copyFileSync","join","afterAll","test","configs","expect","Object","keys","length","toEqual","database","any","email","middleware","plugins","server","invalidFilePath","writeFileSync","toThrowError","unlinkSync","jsonConfigFilePath","helloConfig","name","JSON","stringify","hello","anyfile","profile","phone","firstName","lastName","fullName"],"mappings":"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","sourcesContent":["const path = require('path');\nconst fs = require('fs');\nconst del = require('del');\nconst loadConfigs = require('../config-loader');\n\nconst getConfigDir = (prefix) => {\n  const dir = process.cwd();\n  const configDir = path.resolve(dir, prefix ? `${prefix}-config` : 'config');\n  if (!fs.existsSync(configDir)) {\n    fs.mkdirSync(configDir);\n  }\n\n  return configDir;\n};\n\nconst testConfigDir = getConfigDir('test');\nconst configDir = getConfigDir();\n\ndescribe('Run config loader', () => {\n  beforeAll(() => {\n    // copy all from config to test config\n    const files = fs\n      .readdirSync(configDir)\n      .filter((file) => file.endsWith('.js') || file.endsWith('.json'));\n    files.forEach((f) => {\n      fs.copyFileSync(path.join(configDir, f), path.join(testConfigDir, f));\n    });\n  });\n  afterAll(async () => {\n    await del(testConfigDir);\n    await del(getConfigDir('not-exist'));\n  });\n\n  test('Should return empty object if the configuration directory does not exists', () => {\n    const configDir = getConfigDir('not-exist');\n    const configs = loadConfigs(configDir);\n    expect(Object.keys(configs).length).toEqual(0);\n  });\n\n  test('Should load configuration file from config directory', () => {\n    // load all configuration in /path/to/project/dir/config\n    const configs = loadConfigs(testConfigDir);\n    expect(configs).toEqual({\n      database: expect.any(Object),\n      email: expect.any(Object),\n      middleware: expect.any(Object),\n      plugins: expect.any(Object),\n      server: expect.any(Object),\n    });\n  });\n\n  test('should throw exception if config dir contain invalid javascript file', () => {\n    // create file\n    const invalidFilePath = path.join(testConfigDir, 'invalid.js');\n    fs.writeFileSync(invalidFilePath, 'Not a javascript file');\n    expect(() => {\n      loadConfigs(testConfigDir);\n    }).toThrowError();\n    fs.unlinkSync(invalidFilePath);\n  });\n\n  test('Should load json config file if it exists', () => {\n    // create file\n    const jsonConfigFilePath = path.join(testConfigDir, 'hello.json');\n    const helloConfig = { name: 'world' };\n    fs.writeFileSync(jsonConfigFilePath, JSON.stringify(helloConfig));\n    const configs = loadConfigs(testConfigDir);\n    expect(configs.hello).toEqual(helloConfig);\n    fs.unlinkSync(jsonConfigFilePath);\n  });\n\n  test('should throw exception if config dir contain invalid json file', () => {\n    // create file\n    const invalidFilePath = path.join(testConfigDir, 'invalid.json');\n    fs.writeFileSync(invalidFilePath, 'Not a json file');\n    expect(() => {\n      loadConfigs(testConfigDir);\n    }).toThrowError();\n    fs.unlinkSync(invalidFilePath);\n  });\n\n  test(\"shouldn't load empty configuration for json / js file\", () => {\n    // create file\n    const invalidFilePath = path.join(testConfigDir, 'anyfile.ext');\n    fs.writeFileSync(invalidFilePath, 'Not a json / js file');\n    const configs = loadConfigs(testConfigDir);\n    expect(Object.keys(configs.anyfile).length).toEqual(0);\n    fs.unlinkSync(invalidFilePath);\n  });\n\n  test('should load nested json configuration', () => {\n    // create file\n    const jsonConfigFilePath = path.join(testConfigDir, 'hello.json');\n    const helloConfig = { name: 'world', profile: { phone: '0123456789' } };\n    fs.writeFileSync(jsonConfigFilePath, JSON.stringify(helloConfig));\n    const configs = loadConfigs(testConfigDir);\n    expect(configs.hello).toEqual(helloConfig);\n    fs.unlinkSync(jsonConfigFilePath);\n  });\n\n  test('should load json configuration with expression inside value', () => {\n    // create file\n    const jsonConfigFilePath = path.join(testConfigDir, 'hello.json');\n    const helloConfig = {\n      firstName: 'world',\n      lastName: 'hello',\n      // eslint-disable-next-line no-template-curly-in-string\n      fullName: \"${acc.firstName + ' ' + acc.lastName}\",\n    };\n    fs.writeFileSync(jsonConfigFilePath, JSON.stringify(helloConfig));\n    const configs = loadConfigs(testConfigDir);\n    expect(configs.hello).toEqual({\n      firstName: helloConfig.firstName,\n      lastName: helloConfig.lastName,\n      fullName: `${helloConfig.firstName} ${helloConfig.lastName}`,\n    });\n    fs.unlinkSync(jsonConfigFilePath);\n  });\n});\n"]}