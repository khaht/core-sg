{"version":3,"sources":["connector-registry.js"],"names":["_","require","requireConnector","createConnectorRegistry","defaultConnection","connections","connectors","Map","load","connection","Object","values","connector","has","set","sgApp","initialize","getAll","Array","from","get","key","val","default","defaultConnector","getByConnection","Error","connectorKey","module","exports"],"mappings":"AAAA;;AACA;AACA;AACA;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,qBAAD,CAAhC;;AAEA,MAAME,uBAAuB,GAAG,CAAC;AAAEC,EAAAA,iBAAF;AAAqBC,EAAAA;AAArB,CAAD,KAAwC;AACtE,QAAMC,UAAU,GAAG,IAAIC,GAAJ,EAAnB;AAEA,SAAO;AACL;AACJ;AACA;AACIC,IAAAA,IAAI,GAAG;AACL,WAAK,MAAMC,UAAX,IAAyBC,MAAM,CAACC,MAAP,CAAcN,WAAd,CAAzB,EAAqD;AACnD,cAAM;AAAEO,UAAAA;AAAF,YAAgBH,UAAtB;;AACA,YAAI,CAACH,UAAU,CAACO,GAAX,CAAeD,SAAf,CAAL,EAAgC;AAC9BN,UAAAA,UAAU,CAACQ,GAAX,CAAeF,SAAf,EAA0BV,gBAAgB,CAACU,SAAD,CAAhB,CAA4BG,KAA5B,CAA1B;AACD;AACF;AACF,KAXI;;AAaL;AACJ;AACA;AACI,UAAMC,UAAN,GAAmB;AACjB,WAAK,MAAMJ,SAAX,IAAwBN,UAAU,CAACK,MAAX,EAAxB,EAA6C;AAC3C,cAAMC,SAAS,CAACI,UAAV,EAAN;AACD;AACF,KApBI;;AAsBLC,IAAAA,MAAM,GAAG;AACP,aAAOC,KAAK,CAACC,IAAN,CAAWb,UAAU,CAACK,MAAX,EAAX,CAAP;AACD,KAxBI;;AA0BLS,IAAAA,GAAG,CAACC,GAAD,EAAM;AACP,aAAOf,UAAU,CAACc,GAAX,CAAeC,GAAf,CAAP;AACD,KA5BI;;AA8BLP,IAAAA,GAAG,CAACO,GAAD,EAAMC,GAAN,EAAW;AACZhB,MAAAA,UAAU,CAACQ,GAAX,CAAeO,GAAf,EAAoBC,GAApB;AACA,aAAO,IAAP;AACD,KAjCI;;AAmCL,QAAIC,OAAJ,GAAc;AACZ,YAAMC,gBAAgB,GAAGnB,WAAW,CAACD,iBAAD,CAAX,CAA+BQ,SAAxD;AACA,aAAON,UAAU,CAACc,GAAX,CAAeI,gBAAf,CAAP;AACD,KAtCI;;AAwCLC,IAAAA,eAAe,CAAChB,UAAD,EAAa;AAC1B,UAAI,CAACT,CAAC,CAACa,GAAF,CAAMR,WAAN,EAAmBI,UAAnB,CAAL,EAAqC;AACnC,cAAM,IAAIiB,KAAJ,CAAU,wDAAV,CAAN;AACD;;AAED,YAAMC,YAAY,GAAGtB,WAAW,CAACI,UAAD,CAAX,CAAwBG,SAA7C;AACA,aAAON,UAAU,CAACc,GAAX,CAAeO,YAAf,CAAP;AACD;;AA/CI,GAAP;AAiDD,CApDD;;AAsDAC,MAAM,CAACC,OAAP,GAAiB1B,uBAAjB","sourcesContent":["/* eslint-disable */\n/**\n * Database connector registry\n */\n\nconst _ = require('lodash');\nconst requireConnector = require('./require-connector');\n\nconst createConnectorRegistry = ({ defaultConnection, connections }) => {\n  const connectors = new Map();\n\n  return {\n    /**\n     * Load connector modules\n     */\n    load() {\n      for (const connection of Object.values(connections)) {\n        const { connector } = connection;\n        if (!connectors.has(connector)) {\n          connectors.set(connector, requireConnector(connector)(sgApp));\n        }\n      }\n    },\n\n    /**\n     * Initialize connectors\n     */\n    async initialize() {\n      for (const connector of connectors.values()) {\n        await connector.initialize();\n      }\n    },\n\n    getAll() {\n      return Array.from(connectors.values());\n    },\n\n    get(key) {\n      return connectors.get(key);\n    },\n\n    set(key, val) {\n      connectors.set(key, val);\n      return this;\n    },\n\n    get default() {\n      const defaultConnector = connections[defaultConnection].connector;\n      return connectors.get(defaultConnector);\n    },\n\n    getByConnection(connection) {\n      if (!_.has(connections, connection)) {\n        throw new Error('Trying to access a connector for an unknown connection');\n      }\n\n      const connectorKey = connections[connection].connector;\n      return connectors.get(connectorKey);\n    },\n  };\n};\n\nmodule.exports = createConnectorRegistry;\n"]}