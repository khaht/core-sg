6530e178548fd0410a5859c8f3224803
/* eslint-disable */

/**
 * Database connector registry
 */
const _ = require('lodash');

const requireConnector = require('./require-connector');

const createConnectorRegistry = ({
  defaultConnection,
  connections
}) => {
  const connectors = new Map();
  return {
    /**
     * Load connector modules
     */
    load() {
      for (const connection of Object.values(connections)) {
        const {
          connector
        } = connection;

        if (!connectors.has(connector)) {
          connectors.set(connector, requireConnector(connector)(sgApp));
        }
      }
    },

    /**
     * Initialize connectors
     */
    async initialize() {
      for (const connector of connectors.values()) {
        await connector.initialize();
      }
    },

    getAll() {
      return Array.from(connectors.values());
    },

    get(key) {
      return connectors.get(key);
    },

    set(key, val) {
      connectors.set(key, val);
      return this;
    },

    get default() {
      const defaultConnector = connections[defaultConnection].connector;
      return connectors.get(defaultConnector);
    },

    getByConnection(connection) {
      if (!_.has(connections, connection)) {
        throw new Error('Trying to access a connector for an unknown connection');
      }

      const connectorKey = connections[connection].connector;
      return connectors.get(connectorKey);
    }

  };
};

module.exports = createConnectorRegistry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbm5lY3Rvci1yZWdpc3RyeS5qcyJdLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsInJlcXVpcmVDb25uZWN0b3IiLCJjcmVhdGVDb25uZWN0b3JSZWdpc3RyeSIsImRlZmF1bHRDb25uZWN0aW9uIiwiY29ubmVjdGlvbnMiLCJjb25uZWN0b3JzIiwiTWFwIiwibG9hZCIsImNvbm5lY3Rpb24iLCJPYmplY3QiLCJ2YWx1ZXMiLCJjb25uZWN0b3IiLCJoYXMiLCJzZXQiLCJzZ0FwcCIsImluaXRpYWxpemUiLCJnZXRBbGwiLCJBcnJheSIsImZyb20iLCJnZXQiLCJrZXkiLCJ2YWwiLCJkZWZhdWx0IiwiZGVmYXVsdENvbm5lY3RvciIsImdldEJ5Q29ubmVjdGlvbiIsIkVycm9yIiwiY29ubmVjdG9yS2V5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBRUEsTUFBTUEsQ0FBQyxHQUFHQyxPQUFPLENBQUMsUUFBRCxDQUFqQjs7QUFDQSxNQUFNQyxnQkFBZ0IsR0FBR0QsT0FBTyxDQUFDLHFCQUFELENBQWhDOztBQUVBLE1BQU1FLHVCQUF1QixHQUFHLENBQUM7QUFBRUMsRUFBQUEsaUJBQUY7QUFBcUJDLEVBQUFBO0FBQXJCLENBQUQsS0FBd0M7QUFDdEUsUUFBTUMsVUFBVSxHQUFHLElBQUlDLEdBQUosRUFBbkI7QUFFQSxTQUFPO0FBQ0w7QUFDSjtBQUNBO0FBQ0lDLElBQUFBLElBQUksR0FBRztBQUNMLFdBQUssTUFBTUMsVUFBWCxJQUF5QkMsTUFBTSxDQUFDQyxNQUFQLENBQWNOLFdBQWQsQ0FBekIsRUFBcUQ7QUFDbkQsY0FBTTtBQUFFTyxVQUFBQTtBQUFGLFlBQWdCSCxVQUF0Qjs7QUFDQSxZQUFJLENBQUNILFVBQVUsQ0FBQ08sR0FBWCxDQUFlRCxTQUFmLENBQUwsRUFBZ0M7QUFDOUJOLFVBQUFBLFVBQVUsQ0FBQ1EsR0FBWCxDQUFlRixTQUFmLEVBQTBCVixnQkFBZ0IsQ0FBQ1UsU0FBRCxDQUFoQixDQUE0QkcsS0FBNUIsQ0FBMUI7QUFDRDtBQUNGO0FBQ0YsS0FYSTs7QUFhTDtBQUNKO0FBQ0E7QUFDSSxVQUFNQyxVQUFOLEdBQW1CO0FBQ2pCLFdBQUssTUFBTUosU0FBWCxJQUF3Qk4sVUFBVSxDQUFDSyxNQUFYLEVBQXhCLEVBQTZDO0FBQzNDLGNBQU1DLFNBQVMsQ0FBQ0ksVUFBVixFQUFOO0FBQ0Q7QUFDRixLQXBCSTs7QUFzQkxDLElBQUFBLE1BQU0sR0FBRztBQUNQLGFBQU9DLEtBQUssQ0FBQ0MsSUFBTixDQUFXYixVQUFVLENBQUNLLE1BQVgsRUFBWCxDQUFQO0FBQ0QsS0F4Qkk7O0FBMEJMUyxJQUFBQSxHQUFHLENBQUNDLEdBQUQsRUFBTTtBQUNQLGFBQU9mLFVBQVUsQ0FBQ2MsR0FBWCxDQUFlQyxHQUFmLENBQVA7QUFDRCxLQTVCSTs7QUE4QkxQLElBQUFBLEdBQUcsQ0FBQ08sR0FBRCxFQUFNQyxHQUFOLEVBQVc7QUFDWmhCLE1BQUFBLFVBQVUsQ0FBQ1EsR0FBWCxDQUFlTyxHQUFmLEVBQW9CQyxHQUFwQjtBQUNBLGFBQU8sSUFBUDtBQUNELEtBakNJOztBQW1DTCxRQUFJQyxPQUFKLEdBQWM7QUFDWixZQUFNQyxnQkFBZ0IsR0FBR25CLFdBQVcsQ0FBQ0QsaUJBQUQsQ0FBWCxDQUErQlEsU0FBeEQ7QUFDQSxhQUFPTixVQUFVLENBQUNjLEdBQVgsQ0FBZUksZ0JBQWYsQ0FBUDtBQUNELEtBdENJOztBQXdDTEMsSUFBQUEsZUFBZSxDQUFDaEIsVUFBRCxFQUFhO0FBQzFCLFVBQUksQ0FBQ1QsQ0FBQyxDQUFDYSxHQUFGLENBQU1SLFdBQU4sRUFBbUJJLFVBQW5CLENBQUwsRUFBcUM7QUFDbkMsY0FBTSxJQUFJaUIsS0FBSixDQUFVLHdEQUFWLENBQU47QUFDRDs7QUFFRCxZQUFNQyxZQUFZLEdBQUd0QixXQUFXLENBQUNJLFVBQUQsQ0FBWCxDQUF3QkcsU0FBN0M7QUFDQSxhQUFPTixVQUFVLENBQUNjLEdBQVgsQ0FBZU8sWUFBZixDQUFQO0FBQ0Q7O0FBL0NJLEdBQVA7QUFpREQsQ0FwREQ7O0FBc0RBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIxQix1QkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyoqXG4gKiBEYXRhYmFzZSBjb25uZWN0b3IgcmVnaXN0cnlcbiAqL1xuXG5jb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5jb25zdCByZXF1aXJlQ29ubmVjdG9yID0gcmVxdWlyZSgnLi9yZXF1aXJlLWNvbm5lY3RvcicpO1xuXG5jb25zdCBjcmVhdGVDb25uZWN0b3JSZWdpc3RyeSA9ICh7IGRlZmF1bHRDb25uZWN0aW9uLCBjb25uZWN0aW9ucyB9KSA9PiB7XG4gIGNvbnN0IGNvbm5lY3RvcnMgPSBuZXcgTWFwKCk7XG5cbiAgcmV0dXJuIHtcbiAgICAvKipcbiAgICAgKiBMb2FkIGNvbm5lY3RvciBtb2R1bGVzXG4gICAgICovXG4gICAgbG9hZCgpIHtcbiAgICAgIGZvciAoY29uc3QgY29ubmVjdGlvbiBvZiBPYmplY3QudmFsdWVzKGNvbm5lY3Rpb25zKSkge1xuICAgICAgICBjb25zdCB7IGNvbm5lY3RvciB9ID0gY29ubmVjdGlvbjtcbiAgICAgICAgaWYgKCFjb25uZWN0b3JzLmhhcyhjb25uZWN0b3IpKSB7XG4gICAgICAgICAgY29ubmVjdG9ycy5zZXQoY29ubmVjdG9yLCByZXF1aXJlQ29ubmVjdG9yKGNvbm5lY3Rvcikoc2dBcHApKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIGNvbm5lY3RvcnNcbiAgICAgKi9cbiAgICBhc3luYyBpbml0aWFsaXplKCkge1xuICAgICAgZm9yIChjb25zdCBjb25uZWN0b3Igb2YgY29ubmVjdG9ycy52YWx1ZXMoKSkge1xuICAgICAgICBhd2FpdCBjb25uZWN0b3IuaW5pdGlhbGl6ZSgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRBbGwoKSB7XG4gICAgICByZXR1cm4gQXJyYXkuZnJvbShjb25uZWN0b3JzLnZhbHVlcygpKTtcbiAgICB9LFxuXG4gICAgZ2V0KGtleSkge1xuICAgICAgcmV0dXJuIGNvbm5lY3RvcnMuZ2V0KGtleSk7XG4gICAgfSxcblxuICAgIHNldChrZXksIHZhbCkge1xuICAgICAgY29ubmVjdG9ycy5zZXQoa2V5LCB2YWwpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIGdldCBkZWZhdWx0KCkge1xuICAgICAgY29uc3QgZGVmYXVsdENvbm5lY3RvciA9IGNvbm5lY3Rpb25zW2RlZmF1bHRDb25uZWN0aW9uXS5jb25uZWN0b3I7XG4gICAgICByZXR1cm4gY29ubmVjdG9ycy5nZXQoZGVmYXVsdENvbm5lY3Rvcik7XG4gICAgfSxcblxuICAgIGdldEJ5Q29ubmVjdGlvbihjb25uZWN0aW9uKSB7XG4gICAgICBpZiAoIV8uaGFzKGNvbm5lY3Rpb25zLCBjb25uZWN0aW9uKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYSBjb25uZWN0b3IgZm9yIGFuIHVua25vd24gY29ubmVjdGlvbicpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjb25uZWN0b3JLZXkgPSBjb25uZWN0aW9uc1tjb25uZWN0aW9uXS5jb25uZWN0b3I7XG4gICAgICByZXR1cm4gY29ubmVjdG9ycy5nZXQoY29ubmVjdG9yS2V5KTtcbiAgICB9LFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVDb25uZWN0b3JSZWdpc3RyeTtcbiJdfQ==