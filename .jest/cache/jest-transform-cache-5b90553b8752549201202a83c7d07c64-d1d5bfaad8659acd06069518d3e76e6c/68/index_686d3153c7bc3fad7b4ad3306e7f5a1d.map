{"version":3,"sources":["index.js"],"names":["uniq","difference","get","isUndefined","merge","require","requiredMiddlewares","module","exports","middlewareConfig","config","middleware","middlewareExists","key","middlewareEnabled","includes","enabledMiddlewares","Object","keys","filter","initialize","middlewareKey","loaded","load","Promise","resolve","reject","timeout","setTimeout","Error","then","clearTimeout","catch","err","all","map","beforeInitialize","initMiddlewaresSeq","middlewareArr","middlewaresBefore","middlewaresAfter","middlewaresOrder","unspecifiedMiddlewares"],"mappings":"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","sourcesContent":["const {\n  uniq, difference, get, isUndefined, merge,\n} = require('lodash');\n\nconst requiredMiddlewares = [\n  // 'responses',\n  'router',\n  // 'logger',\n  'boom',\n  'cors',\n  // 'cron',\n  // 'xframe',\n  // 'xss',\n  // 'public',\n  // 'favicon',\n];\n\n// eslint-disable-next-line func-names\nmodule.exports = async function () {\n  /** Utils */\n  const middlewareConfig = this.config.middleware;\n\n  // check if a middleware exists\n  const middlewareExists = (key) => !isUndefined(this.middleware[key]);\n\n  // check if a middleware is enabled\n  const middlewareEnabled = (key) => requiredMiddlewares.includes(key) || get(middlewareConfig, ['settings', key, 'enabled'], false) === true;\n\n  // list of enabled middlewares\n  const enabledMiddlewares = Object.keys(this.middleware).filter(middlewareEnabled);\n\n  // Method to initialize middlewares and emit an event.\n  const initialize = (middlewareKey) => {\n    if (this.middleware[middlewareKey].loaded === true) return;\n\n    const module = this.middleware[middlewareKey].load;\n\n    // eslint-disable-next-line consistent-return\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(\n        () => reject(new Error(`(middleware: ${middlewareKey}) is taking too long to load.`)),\n        middlewareConfig.timeout || 1000,\n      );\n\n      this.middleware[middlewareKey] = merge(this.middleware[middlewareKey], module);\n\n      Promise.resolve()\n        .then(() => module.initialize())\n        .then(() => {\n          clearTimeout(timeout);\n          this.middleware[middlewareKey].loaded = true;\n          resolve();\n        })\n        // eslint-disable-next-line consistent-return\n        .catch((err) => {\n          clearTimeout(timeout);\n\n          if (err) {\n            return reject(err);\n          }\n        });\n    });\n  };\n\n  /**\n   * Run init functions\n   */\n\n  // Run beforeInitialize of every middleware\n  /* eslint-disable */\n  await Promise.all(\n    enabledMiddlewares.map((key) => {\n      const { beforeInitialize } = this.middleware[key].load;\n      if (typeof beforeInitialize === 'function') {\n        return beforeInitialize();\n      }\n    }),\n  );\n  /* eslint-disable */\n\n  // run the initialization of an array of middlewares sequentially\n  const initMiddlewaresSeq = async (middlewareArr) => {\n    for (const key of uniq(middlewareArr)) {\n      await initialize(key);\n    }\n  };\n\n  const middlewaresBefore = get(middlewareConfig, 'load.before', [])\n    .filter(middlewareExists)\n    .filter(middlewareEnabled);\n\n  const middlewaresAfter = get(middlewareConfig, 'load.after', [])\n    .filter(middlewareExists)\n    .filter(middlewareEnabled);\n\n  const middlewaresOrder = get(middlewareConfig, 'load.order', [])\n    .filter(middlewareExists)\n    .filter(middlewareEnabled);\n\n  const unspecifiedMiddlewares = difference(enabledMiddlewares, middlewaresBefore, middlewaresOrder, middlewaresAfter);\n\n  // before\n  await initMiddlewaresSeq(middlewaresBefore);\n\n  // ordered // rest of middlewares\n  await Promise.all([initMiddlewaresSeq(middlewaresOrder), Promise.all(unspecifiedMiddlewares.map(initialize))]);\n\n  // after\n  await initMiddlewaresSeq(middlewaresAfter);\n};\n"]}