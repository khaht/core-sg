{"version":3,"sources":["middleware.load.test.js"],"names":["loadMiddleware","require","logger","describe","app","log","config","installedMiddlewares","appPath","process","cwd","use","jest","fn","test","resp","expect","Object","keys","toEqual","bodyParser","load","initialize","undefined","toBeDefined","toBe","toHaveBeenCalledTimes"],"mappings":"AAAA,MAAMA,cAAc,GAAGC,OAAO,CAAC,oBAAD,CAA9B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,mBAAD,CAAtB;;AAEAE,QAAQ,CAAC,iBAAD,EAAoB,MAAM;AAChC,QAAMC,GAAG,GAAG;AACVC,IAAAA,GAAG,EAAEH,MADK;AAEVI,IAAAA,MAAM,EAAE;AACNC,MAAAA,oBAAoB,EAAE,CAAC,MAAD,CADhB;AAENC,MAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR;AAFH,KAFE;AAMVN,IAAAA,GAAG,EAAE;AACHO,MAAAA,GAAG,EAAEC,IAAI,CAACC,EAAL;AADF;AANK,GAAZ;AAWAC,EAAAA,IAAI,CAAC,4BAAD,EAA+B,YAAY;AAC7C,UAAMC,IAAI,GAAG,MAAMf,cAAc,CAACI,GAAD,CAAjC;AACAY,IAAAA,MAAM,CAACC,MAAM,CAACC,IAAP,CAAYH,IAAZ,CAAD,CAAN,CAA0BI,OAA1B,CAAkC,CAChC,YADgC,EAEhC,MAFgC,EAGhC,MAHgC,EAIhC,MAJgC,EAKhC,QALgC,EAMhC,MANgC,EAOhC,eAPgC,EAQhC,aARgC,EAShC,MATgC,CAAlC;AAWD,GAbG,CAAJ;AAeAL,EAAAA,IAAI,CAAC,2DAAD,EAA8D,YAAY;AAC5E,UAAM;AAAEM,MAAAA,UAAU,GAAG;AAAf,QAAsB,MAAMpB,cAAc,CAACI,GAAD,CAAhD;AACA,UAAM;AAAEiB,MAAAA,IAAI,GAAG;AAAT,QAAgBD,UAAtB;AACA,UAAM;AAAEE,MAAAA,UAAU,GAAGC;AAAf,QAA6BF,IAAnC;AACAL,IAAAA,MAAM,CAACM,UAAD,CAAN,CAAmBE,WAAnB;AACAR,IAAAA,MAAM,CAAC,OAAOM,UAAR,CAAN,CAA0BG,IAA1B,CAA+B,UAA/B;AAEAH,IAAAA,UAAU;AACVN,IAAAA,MAAM,CAACZ,GAAG,CAACA,GAAJ,CAAQO,GAAT,CAAN,CAAoBe,qBAApB,CAA0C,CAA1C;AACD,GATG,CAAJ;AAUD,CArCO,CAAR","sourcesContent":["const loadMiddleware = require('../middleware.load');\nconst logger = require('utils/logger.util');\n\ndescribe('Load middleware', () => {\n  const app = {\n    log: logger,\n    config: {\n      installedMiddlewares: ['test'],\n      appPath: process.cwd(),\n    },\n    app: {\n      use: jest.fn(),\n    }\n  };\n\n  test('Should load all middleware', async () => {\n    const resp = await loadMiddleware(app);\n    expect(Object.keys(resp)).toEqual([\n      'bodyParser',\n      'boom',\n      'cors',\n      'gzip',\n      'router',\n      'auth',\n      'firebase-auth',\n      'http-logger',\n      'i18n',\n    ]);\n  });\n\n  test('Should call load and initialize for bodyParser middleware', async () => {\n    const { bodyParser = {} } = await loadMiddleware(app);\n    const { load = {} } = bodyParser;\n    const { initialize = undefined } = load;\n    expect(initialize).toBeDefined();\n    expect(typeof initialize).toBe('function');\n\n    initialize();\n    expect(app.app.use).toHaveBeenCalledTimes(2);\n  });\n});\n"]}