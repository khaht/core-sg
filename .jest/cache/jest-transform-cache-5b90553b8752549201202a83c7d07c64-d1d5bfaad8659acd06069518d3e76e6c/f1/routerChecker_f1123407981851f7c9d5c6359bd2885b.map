{"version":3,"sources":["routerChecker.js"],"names":["_","require","policyUtils","finder","getMethod","route","trim","toLower","method","getEndpoint","path","module","exports","sgApp","routerChecker","endpoint","controllerName","actionName","handler","split","controllerKey","controller","controllers","stopWithError","Error","JSON","stringify","isFunction","log","child","action","bind","currentApiName","api","globalPolicy","policies","policyOption","get","isString","isEmpty","isArray","forEach","policyName","push","error","message"],"mappings":"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","sourcesContent":["/**\n * Module dependencies\n */\n\n// Public node modules.\nconst _ = require('lodash');\n\n// sgApp utilities.\nconst policyUtils = require('../../../utils/policy.util');\nconst finder = require('../../../utils/finder.util');\n\nconst getMethod = (route) => _.trim(_.toLower(route.method));\nconst getEndpoint = (route) => _.trim(route.path);\n\nmodule.exports = (sgApp) =>\n  function routerChecker(route) {\n    const method = getMethod(route);\n    const endpoint = getEndpoint(route);\n\n    // Define controller and action names.\n    const [controllerName, actionName] = _.trim(route.handler).split('.');\n    const controllerKey = _.toLower(controllerName);\n\n    // let controller;\n    // if (plugin) {\n    //   controller = plugin === 'admin' ?\n    // sgApp.admin.controllers[controllerKey] : sgApp.plugins[plugin].controllers[controllerKey];\n    // } else {\n    // } // not using plugin yet\n    const controller = sgApp.controllers[controllerKey];\n\n    if (!controller) {\n      sgApp.stopWithError(\n        new Error(\n          `Controller '${controllerKey}' does not exist. Check route config: ${JSON.stringify(\n            route\n          )}`\n        )\n      );\n    }\n\n    if (!_.isFunction(controller[actionName])) {\n      sgApp.stopWithError(\n        `Error creating endpoint [${method}] ${endpoint}: handler not found \"${controllerKey}.${actionName}\"`\n      );\n    }\n\n    controller.log = sgApp.log.child({\n      controller: controllerKey,\n      action: actionName,\n    });\n    const action = controller[actionName].bind(controller);\n\n    // Retrieve the API's name where the controller is located\n    // to access to the right validators\n    // sgApp.plugins[plugin] || sgApp.api || sgApp.admin\n    const currentApiName = finder(sgApp.api, controller);\n\n    // Add the `globalPolicy`.\n    const globalPolicy = policyUtils.globalPolicy({\n      controller: controllerKey,\n      action: actionName,\n      method,\n      endpoint,\n      // plugin,\n    });\n\n    // Init policies array.\n    const policies = [globalPolicy];\n\n    let policyOption = _.get(route, 'config.policies');\n\n    // Allow string instead of array of policies.\n    if (_.isString(policyOption) && !_.isEmpty(policyOption)) {\n      // eslint-disable-next-line\n      policyOption = [policyOption];\n    }\n\n    if (_.isArray(policyOption)) {\n      policyOption.forEach((policyName) => {\n        try {\n          policies.push(policyUtils.get(policyName, currentApiName));\n        } catch (error) {\n          sgApp.stopWithError(\n            `Error creating endpoint [${method}] ${endpoint}: ${error.message}`\n          );\n        }\n      });\n    }\n\n    return {\n      method,\n      endpoint,\n      policies,\n      action,\n    };\n  };\n"]}