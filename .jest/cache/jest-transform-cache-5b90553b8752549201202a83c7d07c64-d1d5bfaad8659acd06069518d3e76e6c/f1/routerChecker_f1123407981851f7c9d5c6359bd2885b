11e4f35223327d609450efc4d56a8825
/**
 * Module dependencies
 */
// Public node modules.
const _ = require('lodash'); // sgApp utilities.


const policyUtils = require('../../../utils/policy.util');

const finder = require('../../../utils/finder.util');

const getMethod = route => _.trim(_.toLower(route.method));

const getEndpoint = route => _.trim(route.path);

module.exports = sgApp => function routerChecker(route) {
  const method = getMethod(route);
  const endpoint = getEndpoint(route); // Define controller and action names.

  const [controllerName, actionName] = _.trim(route.handler).split('.');

  const controllerKey = _.toLower(controllerName); // let controller;
  // if (plugin) {
  //   controller = plugin === 'admin' ?
  // sgApp.admin.controllers[controllerKey] : sgApp.plugins[plugin].controllers[controllerKey];
  // } else {
  // } // not using plugin yet


  const controller = sgApp.controllers[controllerKey];

  if (!controller) {
    sgApp.stopWithError(new Error(`Controller '${controllerKey}' does not exist. Check route config: ${JSON.stringify(route)}`));
  }

  if (!_.isFunction(controller[actionName])) {
    sgApp.stopWithError(`Error creating endpoint [${method}] ${endpoint}: handler not found "${controllerKey}.${actionName}"`);
  }

  controller.log = sgApp.log.child({
    controller: controllerKey,
    action: actionName
  });
  const action = controller[actionName].bind(controller); // Retrieve the API's name where the controller is located
  // to access to the right validators
  // sgApp.plugins[plugin] || sgApp.api || sgApp.admin

  const currentApiName = finder(sgApp.api, controller); // Add the `globalPolicy`.

  const globalPolicy = policyUtils.globalPolicy({
    controller: controllerKey,
    action: actionName,
    method,
    endpoint // plugin,

  }); // Init policies array.

  const policies = [globalPolicy];

  let policyOption = _.get(route, 'config.policies'); // Allow string instead of array of policies.


  if (_.isString(policyOption) && !_.isEmpty(policyOption)) {
    // eslint-disable-next-line
    policyOption = [policyOption];
  }

  if (_.isArray(policyOption)) {
    policyOption.forEach(policyName => {
      try {
        policies.push(policyUtils.get(policyName, currentApiName));
      } catch (error) {
        sgApp.stopWithError(`Error creating endpoint [${method}] ${endpoint}: ${error.message}`);
      }
    });
  }

  return {
    method,
    endpoint,
    policies,
    action
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvdXRlckNoZWNrZXIuanMiXSwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJwb2xpY3lVdGlscyIsImZpbmRlciIsImdldE1ldGhvZCIsInJvdXRlIiwidHJpbSIsInRvTG93ZXIiLCJtZXRob2QiLCJnZXRFbmRwb2ludCIsInBhdGgiLCJtb2R1bGUiLCJleHBvcnRzIiwic2dBcHAiLCJyb3V0ZXJDaGVja2VyIiwiZW5kcG9pbnQiLCJjb250cm9sbGVyTmFtZSIsImFjdGlvbk5hbWUiLCJoYW5kbGVyIiwic3BsaXQiLCJjb250cm9sbGVyS2V5IiwiY29udHJvbGxlciIsImNvbnRyb2xsZXJzIiwic3RvcFdpdGhFcnJvciIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsImlzRnVuY3Rpb24iLCJsb2ciLCJjaGlsZCIsImFjdGlvbiIsImJpbmQiLCJjdXJyZW50QXBpTmFtZSIsImFwaSIsImdsb2JhbFBvbGljeSIsInBvbGljaWVzIiwicG9saWN5T3B0aW9uIiwiZ2V0IiwiaXNTdHJpbmciLCJpc0VtcHR5IiwiaXNBcnJheSIsImZvckVhY2giLCJwb2xpY3lOYW1lIiwicHVzaCIsImVycm9yIiwibWVzc2FnZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQSxNQUFNQSxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxRQUFELENBQWpCLEMsQ0FFQTs7O0FBQ0EsTUFBTUMsV0FBVyxHQUFHRCxPQUFPLENBQUMsNEJBQUQsQ0FBM0I7O0FBQ0EsTUFBTUUsTUFBTSxHQUFHRixPQUFPLENBQUMsNEJBQUQsQ0FBdEI7O0FBRUEsTUFBTUcsU0FBUyxHQUFJQyxLQUFELElBQVdMLENBQUMsQ0FBQ00sSUFBRixDQUFPTixDQUFDLENBQUNPLE9BQUYsQ0FBVUYsS0FBSyxDQUFDRyxNQUFoQixDQUFQLENBQTdCOztBQUNBLE1BQU1DLFdBQVcsR0FBSUosS0FBRCxJQUFXTCxDQUFDLENBQUNNLElBQUYsQ0FBT0QsS0FBSyxDQUFDSyxJQUFiLENBQS9COztBQUVB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QUFJNkIsS0FBSyxDQUFDQyxPQUFRLEVBRHBFO0FBR0Q7QUFDRixLQVJEO0FBU0Q7O0FBRUQsU0FBTztBQUNMckMsSUFBQUEsTUFESztBQUVMTyxJQUFBQSxRQUZLO0FBR0xvQixJQUFBQSxRQUhLO0FBSUxMLElBQUFBO0FBSkssR0FBUDtBQU1ELENBbEZIIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzXG4gKi9cblxuLy8gUHVibGljIG5vZGUgbW9kdWxlcy5cbmNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcblxuLy8gc2dBcHAgdXRpbGl0aWVzLlxuY29uc3QgcG9saWN5VXRpbHMgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlscy9wb2xpY3kudXRpbCcpO1xuY29uc3QgZmluZGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbHMvZmluZGVyLnV0aWwnKTtcblxuY29uc3QgZ2V0TWV0aG9kID0gKHJvdXRlKSA9PiBfLnRyaW0oXy50b0xvd2VyKHJvdXRlLm1ldGhvZCkpO1xuY29uc3QgZ2V0RW5kcG9pbnQgPSAocm91dGUpID0+IF8udHJpbShyb3V0ZS5wYXRoKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoc2dBcHApID0+XG4gIGZ1bmN0aW9uIHJvdXRlckNoZWNrZXIocm91dGUpIHtcbiAgICBjb25zdCBtZXRob2QgPSBnZXRNZXRob2Qocm91dGUpO1xuICAgIGNvbnN0IGVuZHBvaW50ID0gZ2V0RW5kcG9pbnQocm91dGUpO1xuXG4gICAgLy8gRGVmaW5lIGNvbnRyb2xsZXIgYW5kIGFjdGlvbiBuYW1lcy5cbiAgICBjb25zdCBbY29udHJvbGxlck5hbWUsIGFjdGlvbk5hbWVdID0gXy50cmltKHJvdXRlLmhhbmRsZXIpLnNwbGl0KCcuJyk7XG4gICAgY29uc3QgY29udHJvbGxlcktleSA9IF8udG9Mb3dlcihjb250cm9sbGVyTmFtZSk7XG5cbiAgICAvLyBsZXQgY29udHJvbGxlcjtcbiAgICAvLyBpZiAocGx1Z2luKSB7XG4gICAgLy8gICBjb250cm9sbGVyID0gcGx1Z2luID09PSAnYWRtaW4nID9cbiAgICAvLyBzZ0FwcC5hZG1pbi5jb250cm9sbGVyc1tjb250cm9sbGVyS2V5XSA6IHNnQXBwLnBsdWdpbnNbcGx1Z2luXS5jb250cm9sbGVyc1tjb250cm9sbGVyS2V5XTtcbiAgICAvLyB9IGVsc2Uge1xuICAgIC8vIH0gLy8gbm90IHVzaW5nIHBsdWdpbiB5ZXRcbiAgICBjb25zdCBjb250cm9sbGVyID0gc2dBcHAuY29udHJvbGxlcnNbY29udHJvbGxlcktleV07XG5cbiAgICBpZiAoIWNvbnRyb2xsZXIpIHtcbiAgICAgIHNnQXBwLnN0b3BXaXRoRXJyb3IoXG4gICAgICAgIG5ldyBFcnJvcihcbiAgICAgICAgICBgQ29udHJvbGxlciAnJHtjb250cm9sbGVyS2V5fScgZG9lcyBub3QgZXhpc3QuIENoZWNrIHJvdXRlIGNvbmZpZzogJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAgIHJvdXRlXG4gICAgICAgICAgKX1gXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFfLmlzRnVuY3Rpb24oY29udHJvbGxlclthY3Rpb25OYW1lXSkpIHtcbiAgICAgIHNnQXBwLnN0b3BXaXRoRXJyb3IoXG4gICAgICAgIGBFcnJvciBjcmVhdGluZyBlbmRwb2ludCBbJHttZXRob2R9XSAke2VuZHBvaW50fTogaGFuZGxlciBub3QgZm91bmQgXCIke2NvbnRyb2xsZXJLZXl9LiR7YWN0aW9uTmFtZX1cImBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29udHJvbGxlci5sb2cgPSBzZ0FwcC5sb2cuY2hpbGQoe1xuICAgICAgY29udHJvbGxlcjogY29udHJvbGxlcktleSxcbiAgICAgIGFjdGlvbjogYWN0aW9uTmFtZSxcbiAgICB9KTtcbiAgICBjb25zdCBhY3Rpb24gPSBjb250cm9sbGVyW2FjdGlvbk5hbWVdLmJpbmQoY29udHJvbGxlcik7XG5cbiAgICAvLyBSZXRyaWV2ZSB0aGUgQVBJJ3MgbmFtZSB3aGVyZSB0aGUgY29udHJvbGxlciBpcyBsb2NhdGVkXG4gICAgLy8gdG8gYWNjZXNzIHRvIHRoZSByaWdodCB2YWxpZGF0b3JzXG4gICAgLy8gc2dBcHAucGx1Z2luc1twbHVnaW5dIHx8IHNnQXBwLmFwaSB8fCBzZ0FwcC5hZG1pblxuICAgIGNvbnN0IGN1cnJlbnRBcGlOYW1lID0gZmluZGVyKHNnQXBwLmFwaSwgY29udHJvbGxlcik7XG5cbiAgICAvLyBBZGQgdGhlIGBnbG9iYWxQb2xpY3lgLlxuICAgIGNvbnN0IGdsb2JhbFBvbGljeSA9IHBvbGljeVV0aWxzLmdsb2JhbFBvbGljeSh7XG4gICAgICBjb250cm9sbGVyOiBjb250cm9sbGVyS2V5LFxuICAgICAgYWN0aW9uOiBhY3Rpb25OYW1lLFxuICAgICAgbWV0aG9kLFxuICAgICAgZW5kcG9pbnQsXG4gICAgICAvLyBwbHVnaW4sXG4gICAgfSk7XG5cbiAgICAvLyBJbml0IHBvbGljaWVzIGFycmF5LlxuICAgIGNvbnN0IHBvbGljaWVzID0gW2dsb2JhbFBvbGljeV07XG5cbiAgICBsZXQgcG9saWN5T3B0aW9uID0gXy5nZXQocm91dGUsICdjb25maWcucG9saWNpZXMnKTtcblxuICAgIC8vIEFsbG93IHN0cmluZyBpbnN0ZWFkIG9mIGFycmF5IG9mIHBvbGljaWVzLlxuICAgIGlmIChfLmlzU3RyaW5nKHBvbGljeU9wdGlvbikgJiYgIV8uaXNFbXB0eShwb2xpY3lPcHRpb24pKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIHBvbGljeU9wdGlvbiA9IFtwb2xpY3lPcHRpb25dO1xuICAgIH1cblxuICAgIGlmIChfLmlzQXJyYXkocG9saWN5T3B0aW9uKSkge1xuICAgICAgcG9saWN5T3B0aW9uLmZvckVhY2goKHBvbGljeU5hbWUpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBwb2xpY2llcy5wdXNoKHBvbGljeVV0aWxzLmdldChwb2xpY3lOYW1lLCBjdXJyZW50QXBpTmFtZSkpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIHNnQXBwLnN0b3BXaXRoRXJyb3IoXG4gICAgICAgICAgICBgRXJyb3IgY3JlYXRpbmcgZW5kcG9pbnQgWyR7bWV0aG9kfV0gJHtlbmRwb2ludH06ICR7ZXJyb3IubWVzc2FnZX1gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG1ldGhvZCxcbiAgICAgIGVuZHBvaW50LFxuICAgICAgcG9saWNpZXMsXG4gICAgICBhY3Rpb24sXG4gICAgfTtcbiAgfTtcbiJdfQ==