{"version":3,"sources":["webhook-runner.test.js"],"names":["mock","jest","fn","mockImplementationOnce","Promise","resolve","ok","status","text","reject","createWebhookRunner","require","createEventHub","logger","_","describe","test","opts","eventHub","_webhookRunner","queue","enqueue","expect","Object","keys","toEqual","configuration","concurrency","event","info","pop","toThrow","createListener","_events","listeners","has","toBe","deleteListener","resp","toBeUndefined","add","id","events","webhooksMap","remove","update","isEnabled","url","headers","executeListener","toHaveBeenCalledTimes","run"],"mappings":"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","sourcesContent":["const createWebhookRunner = require('../webhook-runner');\nconst createEventHub = require('../event-hub');\nconst logger = require('utils/logger.util');\nconst _ = require('lodash');\n\njest.mock('node-fetch', () =>\n  jest\n    .fn()\n    .mockImplementationOnce(() =>\n      Promise.resolve({\n        ok: 'Ok',\n        status: 200,\n        text: jest.fn(() => Promise.resolve('text')),\n      })\n    )\n    .mockImplementationOnce(() =>\n      Promise.resolve({\n        status: 200,\n        text: jest.fn(() => Promise.resolve('text')),\n      })\n    )\n    .mockImplementationOnce(() =>\n      Promise.reject(false)\n    )\n);\n\ndescribe('Create webhook runner', () => {\n  test('Should return constructor object', () => {\n    const opts = { eventHub: createEventHub(), logger };\n    const _webhookRunner = createWebhookRunner(opts);\n    _webhookRunner.queue.enqueue([]);\n\n    expect(Object.keys(_webhookRunner)).toEqual([\n      'eventHub',\n      'logger',\n      'webhooksMap',\n      'listeners',\n      'config',\n      'queue',\n    ]);\n  });\n\n  test('Should pop worker queue and execute', () => {\n    const opts = { eventHub: createEventHub(), logger, configuration: {} };\n    const _webhookRunner = createWebhookRunner(opts);\n    _webhookRunner.queue.concurrency = 0;\n    _webhookRunner.queue.enqueue([{ event: 'test', info: 'info' }]);\n    _webhookRunner.queue.pop();\n    expect(_webhookRunner.queue.queue).toEqual([]);\n  });\n\n  test('Should configuration does not object', () => {\n    const opts = {\n      eventHub: createEventHub(),\n      logger,\n      configuration: 'configuration',\n    };\n    expect(() => createWebhookRunner(opts)).toThrow();\n  });\n\n  test('Should create or delete event', () => {\n    const opts = { eventHub: createEventHub(), logger, configuration: {} };\n    const _webhookRunner = createWebhookRunner(opts);\n\n    _webhookRunner.createListener('test');\n    _webhookRunner.eventHub._events.test();\n    expect(_webhookRunner.listeners.has('test')).toBe(true);\n\n    _webhookRunner.deleteListener('test');\n    _webhookRunner.deleteListener('test');// else branch\n    expect(_webhookRunner.listeners.has('test')).toBe(false);\n  });\n\n  test('Should not create event if existed', () => {\n    const opts = { eventHub: createEventHub(), logger, configuration: {} };\n    const _webhookRunner = createWebhookRunner(opts);\n\n    _webhookRunner.createListener('test');\n    expect(_webhookRunner.listeners.has('test')).toBe(true);\n\n    const resp = _webhookRunner.createListener('test');\n    expect(resp).toBeUndefined();\n  });\n\n  test('Should add update delete executeListener a webhook', async () => {\n    const opts = { eventHub: createEventHub(), logger, configuration: {} };\n    const _webhookRunner = createWebhookRunner(opts);\n\n    _webhookRunner.add({ id: 'webhookId', events: ['test', 'test'] });\n    expect(_webhookRunner.webhooksMap.has('test')).toBe(true);\n\n    _webhookRunner.add({ id: 'webhookId1', events: ['test1'] });\n    _webhookRunner.remove({ id: 'webhookId1', events: ['test1'] });\n    expect(_webhookRunner.webhooksMap.has('test1')).toBe(false);\n\n    _webhookRunner.update({\n      id: 'webhookId',\n      events: ['test1'],\n      isEnabled: true,\n      url: 'url',\n      headers: {},\n    });\n    expect(_webhookRunner.webhooksMap.has('test1')).toBe(true);\n\n    await _webhookRunner.executeListener({ event: 'test1' });\n    expect(require('node-fetch')).toHaveBeenCalledTimes(1);\n    await _webhookRunner.executeListener({ event: 'test1', info: 'info' });\n    expect(require('node-fetch')).toHaveBeenCalledTimes(2);\n    await _webhookRunner.executeListener({ event: 'test1', info: 'info' });\n    expect(require('node-fetch')).toHaveBeenCalledTimes(3);\n  });\n\n  test('Should log error after executeListener', async () => {\n    const opts = { eventHub: createEventHub(), logger, configuration: {} };\n    const _webhookRunner = createWebhookRunner(opts);\n    _webhookRunner.add({ id: 'webhookId', events: ['test'] });\n    _webhookRunner.update({\n      id: 'webhookId',\n      events: ['test1'],\n      isEnabled: true,\n      url: 'url',\n      headers: {},\n    });\n    _webhookRunner.run = jest.fn(() => Promise.reject(false));\n    await _webhookRunner.executeListener({ event: 'test1', info: 'info' });\n    expect(_webhookRunner.run).toHaveBeenCalledTimes(1);\n  });\n});\n"]}