{"version":3,"sources":["require-file-parse.test.js"],"names":["join","require","fs","path","fileParse","removeDir","getConfigDir","prefix","dir","process","cwd","configDir","resolve","existsSync","mkdirSync","testConfigDir","describe","afterAll","test","filePath","resp","expect","toBeDefined","toBe","jsonConfigFilePath","helloConfig","name","writeFileSync","JSON","stringify","configs","toEqual","unlinkSync"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAWC,OAAO,CAAC,MAAD,CAAxB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,uBAAD,CAAzB;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAgBJ,OAAO,CAAC,uBAAD,CAA7B;;AAEA,MAAMK,YAAY,GAAIC,MAAD,IAAY;AAC/B,QAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,EAAZ;AACA,QAAMC,SAAS,GAAGR,IAAI,CAACS,OAAL,CAAaJ,GAAb,EAAkBD,MAAM,GAAI,GAAEA,MAAO,SAAb,GAAwB,QAAhD,CAAlB;;AACA,MAAI,CAACL,EAAE,CAACW,UAAH,CAAcF,SAAd,CAAL,EAA+B;AAC7BT,IAAAA,EAAE,CAACY,SAAH,CAAaH,SAAb;AACD;;AAED,SAAOA,SAAP;AACD,CARD;;AAUA,MAAMI,aAAa,GAAGT,YAAY,CAAC,yBAAD,CAAlC;AAEAU,QAAQ,CAAC,YAAD,EAAe,MAAM;AAC3B,QAAMR,GAAG,GAAGC,OAAO,CAACC,GAAR,EAAZ;AACAO,EAAAA,QAAQ,CAAC,MAAM;AACbZ,IAAAA,SAAS,CAACU,aAAD,CAAT;AACD,GAFO,CAAR;AAGAG,EAAAA,IAAI,CAAC,4BAAD,EAA+B,MAAM;AACvC,UAAMC,QAAQ,GAAGnB,IAAI,CAACQ,GAAD,EAAM,QAAN,EAAgB,aAAhB,CAArB;AACA,UAAMY,IAAI,GAAGhB,SAAS,CAACe,QAAD,CAAtB;AACAE,IAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,WAAb;AACAD,IAAAA,MAAM,CAAC,OAAOD,IAAR,CAAN,CAAoBG,IAApB,CAAyB,UAAzB;AACD,GALG,CAAJ;AAOAL,EAAAA,IAAI,CAAC,oCAAD,EAAuC,MAAM;AAC/C,UAAMC,QAAQ,GAAGnB,IAAI,CAACQ,GAAD,EAAM,UAAN,EAAkB,qBAAlB,CAArB;AACA,UAAMY,IAAI,GAAGhB,SAAS,CAACe,QAAD,CAAtB;AACAE,IAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,WAAb;AACAD,IAAAA,MAAM,CAAC,OAAOD,IAAR,CAAN,CAAoBG,IAApB,CAAyB,QAAzB;AACD,GALG,CAAJ;AAOAL,EAAAA,IAAI,CAAC,0BAAD,EAA6B,MAAM;AACrC,UAAMM,kBAAkB,GAAGrB,IAAI,CAACH,IAAL,CAAUe,aAAV,EAAyB,YAAzB,CAA3B;AACA,UAAMU,WAAW,GAAG;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAApB;AACAxB,IAAAA,EAAE,CAACyB,aAAH,CAAiBH,kBAAjB,EAAqCI,IAAI,CAACC,SAAL,CAAeJ,WAAf,CAArC;AACA,UAAMK,OAAO,GAAG1B,SAAS,CAACoB,kBAAD,CAAzB;AACAH,IAAAA,MAAM,CAACS,OAAD,CAAN,CAAgBC,OAAhB,CAAwBN,WAAxB;AACAvB,IAAAA,EAAE,CAAC8B,UAAH,CAAcR,kBAAd;AACD,GAPG,CAAJ;AAQD,CA3BO,CAAR","sourcesContent":["const { join } = require('path');\nconst fs = require('fs');\nconst path = require('path');\nconst fileParse = require('../require-file-parse');\nconst { removeDir } = require('../../../tests/helper');\n\nconst getConfigDir = (prefix) => {\n  const dir = process.cwd();\n  const configDir = path.resolve(dir, prefix ? `${prefix}-config` : 'config');\n  if (!fs.existsSync(configDir)) {\n    fs.mkdirSync(configDir);\n  }\n\n  return configDir;\n};\n\nconst testConfigDir = getConfigDir('test-require-file-parse');\n\ndescribe('File parse', () => {\n  const dir = process.cwd();\n  afterAll(() => {\n    removeDir(testConfigDir);\n  });\n  test('Should require database.js', () => {\n    const filePath = join(dir, 'config', 'database.js');\n    const resp = fileParse(filePath);\n    expect(resp).toBeDefined();\n    expect(typeof resp).toBe('function');\n  });\n\n  test('Should require serviceaccount.json', () => {\n    const filePath = join(dir, 'firebase', 'serviceaccount.json');\n    const resp = fileParse(filePath);\n    expect(resp).toBeDefined();\n    expect(typeof resp).toBe('object');\n  });\n\n  test('should require json file', () => {\n    const jsonConfigFilePath = path.join(testConfigDir, 'hello.json');\n    const helloConfig = { name: 'world' };\n    fs.writeFileSync(jsonConfigFilePath, JSON.stringify(helloConfig));\n    const configs = fileParse(jsonConfigFilePath);\n    expect(configs).toEqual(helloConfig);\n    fs.unlinkSync(jsonConfigFilePath);\n  });\n});\n"]}