{"version":3,"sources":["policies.load.js"],"names":["assert","require","path","_","fse","loadPolicy","file","policy","error","Error","message","module","exports","dir","existsSync","root","paths","readdirSync","withFileTypes","filter","fd","isFile","forEach","name","fullPath","sep","ext","extname","key","basename","toLower"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,CAAC,GAAGF,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMG,GAAG,GAAGH,OAAO,CAAC,UAAD,CAAnB;;AAEA,MAAMI,UAAU,GAAIC,IAAD,IAAU;AAC3B,MAAI;AACF,UAAMC,MAAM,GAAGN,OAAO,CAACK,IAAD,CAAtB;;AAEAN,IAAAA,MAAM,CAAC,OAAOO,MAAP,KAAkB,UAAnB,EAA+B,4BAA/B,CAAN;AAEA,WAAOA,MAAP;AACD,GAND,CAME,OAAOC,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,CAAW,yBAAwBH,IAAK,KAAIE,KAAK,CAACE,OAAQ,EAA1D,CAAN;AACD;AACF,CAVD;;AAYAC,MAAM,CAACC,OAAP,GAAkBC,GAAD,IAAS;AACxB,MAAI,CAACT,GAAG,CAACU,UAAJ,CAAeD,GAAf,CAAL,EAA0B,OAAO,EAAP;AAE1B,QAAME,IAAI,GAAG,EAAb;AACA,QAAMC,KAAK,GAAGZ,GAAG,CACda,WADW,CACCJ,GADD,EACM;AAAEK,IAAAA,aAAa,EAAE;AAAjB,GADN,EAEXC,MAFW,CAEHC,EAAD,IAAQA,EAAE,CAACC,MAAH,EAFJ,CAAd;AAIAL,EAAAA,KAAK,CAACM,OAAN,CAAeF,EAAD,IAAQ;AACpB,UAAM;AAAEG,MAAAA;AAAF,QAAWH,EAAjB;AACA,UAAMI,QAAQ,GAAGX,GAAG,GAAGX,IAAI,CAACuB,GAAX,GAAiBF,IAAlC;AAEA,UAAMG,GAAG,GAAGxB,IAAI,CAACyB,OAAL,CAAaJ,IAAb,CAAZ;AACA,UAAMK,GAAG,GAAG1B,IAAI,CAAC2B,QAAL,CAAcN,IAAd,EAAoBG,GAApB,CAAZ;AACAX,IAAAA,IAAI,CAACZ,CAAC,CAAC2B,OAAF,CAAUF,GAAV,CAAD,CAAJ,GAAuBvB,UAAU,CAACmB,QAAD,CAAjC;AACD,GAPD;AASA,SAAOT,IAAP;AACD,CAlBD","sourcesContent":["const assert = require('assert');\nconst path = require('path');\nconst _ = require('lodash');\nconst fse = require('fs-extra');\n\nconst loadPolicy = (file) => {\n  try {\n    const policy = require(file);\n\n    assert(typeof policy === 'function', 'Policy must be a function.');\n\n    return policy;\n  } catch (error) {\n    throw new Error(`Could not load policy ${file}: ${error.message}`);\n  }\n};\n\nmodule.exports = (dir) => {\n  if (!fse.existsSync(dir)) return {};\n\n  const root = {};\n  const paths = fse\n    .readdirSync(dir, { withFileTypes: true })\n    .filter((fd) => fd.isFile());\n\n  paths.forEach((fd) => {\n    const { name } = fd;\n    const fullPath = dir + path.sep + name;\n\n    const ext = path.extname(name);\n    const key = path.basename(name, ext);\n    root[_.toLower(key)] = loadPolicy(fullPath);\n  });\n\n  return root;\n};\n"]}