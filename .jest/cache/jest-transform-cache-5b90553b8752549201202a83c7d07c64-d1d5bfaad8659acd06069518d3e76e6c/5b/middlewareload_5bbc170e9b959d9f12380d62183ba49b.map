{"version":3,"sources":["middleware.load.js"],"names":["path","require","_","glob","createLoaders","app","mountMiddleware","name","files","middlewares","forEach","file","loaded","endsWith","load","Object","defineProperty","configurable","enumerable","get","log","child","middleware","defaults","loadMiddlewaresInDir","dir","cwd","f","split","resolve","loadInternalMiddlewares","__dirname","loadLocalMiddlewares","appPath","module","exports","config","loaders"],"mappings":"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","sourcesContent":["/* eslint-disable consistent-return, no-param-reassign, no-await-in-loop */\nconst path = require('path');\n// const fs = require('fs-extra');\nconst _ = require('lodash');\nconst glob = require('./glob.load');\n// const findPackagePath = require('./package-path.load');\n\n/**\n * Build loader functions\n * @param {*} app - app instance\n */\nconst createLoaders = (app) => {\n  const mountMiddleware = (name, files, middlewares) => {\n    files.forEach((file) => {\n      middlewares[name] = middlewares[name] || { loaded: false };\n\n      if (_.endsWith(file, 'index.js') && !middlewares[name].load) {\n        return Object.defineProperty(middlewares[name], 'load', {\n          configurable: false,\n          enumerable: true,\n          get: () =>\n            require(file)({ ...app, log: app.log.child({ middleware: name }) }),\n        });\n      }\n\n      if (_.endsWith(file, 'defaults.json')) {\n        middlewares[name].defaults = require(file);\n      }\n    });\n  };\n\n  const loadMiddlewaresInDir = async (dir, middlewares) => {\n    const files = await glob('*/*(index|defaults).*(js|json)', {\n      cwd: dir,\n    });\n\n    files.forEach((f) => {\n      const name = f.split('/')[0];\n      mountMiddleware(name, [path.resolve(dir, f)], middlewares);\n    });\n  };\n\n  const loadInternalMiddlewares = (middlewares) =>\n    loadMiddlewaresInDir(\n      path.resolve(__dirname, '..', 'middlewares'),\n      middlewares\n    );\n\n  const loadLocalMiddlewares = (appPath, middlewares) =>\n    loadMiddlewaresInDir(path.resolve(appPath, 'middlewares'), middlewares);\n\n  // const loadPluginsMiddlewares = async (plugins, middlewares) => {\n  //   // eslint-disable-next-line no-restricted-syntax\n  //   for (const pluginName of plugins) {\n  //     const dir = path.resolve(findPackagePath(`app-plugin-${pluginName}`), 'middlewares');\n  //     await loadMiddlewaresInDir(dir, middlewares);\n  //   }\n  // };\n\n  // const loadLocalPluginsMiddlewares = async (appPath, middlewares) => {\n  //   const pluginsDir = path.resolve(appPath, 'plugins');\n  //   if (!fs.existsSync(pluginsDir)) return;\n\n  //   const pluginsNames = await fs.readdir(pluginsDir);\n\n  //   pluginsNames.forEach(async (pluginFolder) => {\n  //     // ignore files\n  //     // eslint-disable-next-line no-await-in-loop\n  //     const stat = await fs.stat(path.resolve(pluginsDir, pluginFolder));\n  //     // eslint-disable-next-line\n  //     // if (!stat.isDirectory()) continue;\n  //     if (stat.isDirectory()) {\n  //       const dir = path.resolve(pluginsDir, pluginFolder, 'middlewares');\n  //       await loadMiddlewaresInDir(dir, middlewares);\n  //     }\n  //   });\n  // };\n\n  // const loadAdminMiddlewares = async (middlewares) => {\n  //   const dir = path.resolve(findPackagePath('app-admin'), 'middlewares');\n  //   await loadMiddlewaresInDir(dir, middlewares);\n  // };\n\n  // const loadMiddlewareDependencies = async (packages, middlewares) => {\n  //   // eslint-disable-next-line no-restricted-syntax\n  //   for (const packageName of packages) {\n  //     const baseDir = path.dirname(require.resolve(`app-middleware-${packageName}`));\n  //     const files = await glob('*(index|defaults).*(js|json)', {\n  //       cwd: baseDir,\n  //       absolute: true,\n  //     });\n\n  //     mountMiddleware(packageName, files, middlewares);\n  //   }\n  // };\n\n  return {\n    loadInternalMiddlewares,\n    loadLocalMiddlewares,\n    // loadPluginsMiddlewares,\n    // loadLocalPluginsMiddlewares,\n    // loadMiddlewareDependencies,\n    // loadAdminMiddlewares,\n  };\n};\n\n/**\n * Load middlewares\n */\nmodule.exports = async (app) => {\n  const { appPath } = app.config;\n\n  const middlewares = {};\n\n  const loaders = createLoaders(app);\n\n  // await loaders.loadMiddlewareDependencies(installedMiddlewares, middlewares);\n  // internal middlewares\n  await loaders.loadInternalMiddlewares(middlewares);\n  // local middleware\n  await loaders.loadLocalMiddlewares(appPath, middlewares);\n  // plugins middlewares\n  // await loaders.loadPluginsMiddlewares(installedPlugins, middlewares);\n  // local plugin middlewares\n  // await loaders.loadLocalPluginsMiddlewares(appPath, middlewares);\n  // load admin middlwares\n  // await loaders.loadAdminMiddlewares(middlewares);\n\n  return middlewares;\n};\n"]}